<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.9.5" created="2018-06-25 03:28" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Programming Fundamentals</title>
	<link>https://press.rebus.community/programmingfundamentals</link>
	<description>Simple Book Publishing</description>
	<pubDate>Mon, 25 Jun 2018 03:28:45 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://press.rebus.community/</wp:base_site_url>
	<wp:base_blog_url>https://press.rebus.community/programmingfundamentals</wp:base_blog_url>

	<wp:author><wp:author_id>181</wp:author_id><wp:author_login><![CDATA[dbraunsc]]></wp:author_login><wp:author_email><![CDATA[dbraunsc@harpercollege.edu]]></wp:author_email><wp:author_display_name><![CDATA[Dave Braunschweig]]></wp:author_display_name><wp:author_first_name><![CDATA[Dave]]></wp:author_first_name><wp:author_last_name><![CDATA[Braunschweig]]></wp:author_last_name></wp:author>

	<wp:category>
		<wp:term_id>1</wp:term_id>
		<wp:category_nicename><![CDATA[uncategorized]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
	</wp:category>
	<wp:term>
		<wp:term_id><![CDATA[23]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[back-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[about-the-author]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[About the Author]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[24]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[back-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[about-the-publisher]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[About the Publisher]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[2]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[front-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[abstracts]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Abstract]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[3]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[front-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[acknowledgements]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Acknowledgements]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[25]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[back-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[acknowledgements]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Acknowledgements]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[26]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[back-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[afterword]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Afterword]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[56]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[license]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[all-rights-reserved]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[All Rights Reserved]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[27]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[back-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[appendix]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Appendix]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[28]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[back-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[authors-note]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Author's Note]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[29]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[back-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[back-of-book-ad]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Back of Book Ad]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[4]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[front-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[before-title]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Before Title Page]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[30]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[back-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[bibliography]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Bibliography]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[31]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[back-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[biographical-note]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Biographical Note]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[50]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[license]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[cc-by]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[CC BY (Attribution)]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[53]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[license]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[cc-by-nc]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[CC BY-NC (Attribution NonCommercial)]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[55]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[license]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[cc-by-nc-nd]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[CC BY-NC-ND (Attribution NonCommercial NoDerivatives)]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[54]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[license]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[cc-by-nc-sa]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[CC BY-NC-SA (Attribution NonCommercial ShareAlike)]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[52]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[license]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[cc-by-nd]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[CC BY-ND (Attribution NoDerivatives)]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[51]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[license]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[cc-by-sa]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[CC BY-SA (Attribution ShareAlike)]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[5]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[front-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[chronology-timeline]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Chronology, Timeline]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[32]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[back-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[colophon]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Colophon]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[33]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[back-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[conclusion]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Conclusion]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[34]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[back-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[credits]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Credits]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[57]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[contributor]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[dbraunsc]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Dave Braunschweig]]></wp:term_name>
		<wp:term_description><![CDATA[Dave Braunschweig is a Professor of Computer Information Systems at Harper College in Palatine, Illinois, United States.]]></wp:term_description>
		<wp:termmeta>
			<wp:meta_key><![CDATA[contributor_first_name]]></wp:meta_key>
			<wp:meta_value><![CDATA[Dave]]></wp:meta_value>
		</wp:termmeta>
		<wp:termmeta>
			<wp:meta_key><![CDATA[contributor_last_name]]></wp:meta_key>
			<wp:meta_value><![CDATA[Braunschweig]]></wp:meta_value>
		</wp:termmeta>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[6]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[front-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[dedication]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Dedication]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[35]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[back-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[dedication]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Dedication]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[7]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[front-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[disclaimer]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Disclaimer]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[8]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[front-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[epigraph]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Epigraph]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[36]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[back-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[epilogue]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Epilogue]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[9]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[front-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[foreword]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Foreword]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[10]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[front-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[genealogy-family-tree]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Genealogy, Family Tree]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[37]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[back-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[glossary]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Glossary]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[11]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[front-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[image-credits]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Image credits]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[38]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[back-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[index]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Index]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[12]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[front-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[introduction]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Introduction]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[58]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[contributor]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[klbusbee]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Kenneth Leroy Busbee]]></wp:term_name>
		<wp:term_description><![CDATA[Kenneth Leroy Busbee is a faculty member at Houston Community College in Houston, Texas.]]></wp:term_description>
		<wp:termmeta>
			<wp:meta_key><![CDATA[contributor_first_name]]></wp:meta_key>
			<wp:meta_value><![CDATA[Kenneth Leroy]]></wp:meta_value>
		</wp:termmeta>
		<wp:termmeta>
			<wp:meta_key><![CDATA[contributor_last_name]]></wp:meta_key>
			<wp:meta_value><![CDATA[Busbee]]></wp:meta_value>
		</wp:termmeta>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[13]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[front-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[list-of-abbreviations]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[List of Abbreviations]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[14]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[front-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[list-of-characters]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[List of Characters]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[15]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[front-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[list-of-illustrations]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[List of Illustrations]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[16]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[front-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[list-of-tables]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[List of Tables]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[17]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[front-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[miscellaneous]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Miscellaneous]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[39]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[back-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[miscellaneous]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Miscellaneous]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[40]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[back-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[notes]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Notes]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[48]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[chapter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[numberless]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Numberless]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[18]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[front-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[other-books]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Other Books by Author]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[41]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[back-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[other-books]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Other Books by Author]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[42]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[back-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[permissions]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Permissions]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[19]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[front-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[preface]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Preface]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[20]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[front-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[prologue]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Prologue]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[49]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[license]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[public-domain]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Public Domain (No Rights Reserved)]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[43]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[back-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[reading-group-guide]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Reading Group Guide]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[21]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[front-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[recommended-citation]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Recommended citation]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[44]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[back-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[resources]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Resources]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[45]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[back-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[sources]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Sources]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[47]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[chapter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[standard]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Standard]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[46]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[back-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[suggested-reading]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Suggested Reading]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[22]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[front-matter-type]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[title-page]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Title Page]]></wp:term_name>
	</wp:term>

	<generator>https://wordpress.org/?v=4.9.5</generator>

	<item>
		<title>Systems Development Life Cycle</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/systems-development-life-cycle/</link>
		<pubDate>Wed, 13 Jun 2018 15:21:53 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/2018/06/13/chapter-1/</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Overview</h2>
The <strong>Systems Development Life Cycle</strong> describes a process for planning, creating, testing, and deploying an information system.[footnote]<a href="https://en.wikipedia.org/wiki/Systems_development_life_cycle">Wikipedia: Systems development life cycle</a>[/footnote]
<h2>Discussion</h2>
<p id="id1165522037741">The Systems Development Life Cycle is the big picture of creating an information system that handles a major task (referred to as an application). The <strong>applications</strong> usually consist of many programs. An example would be the Department of Defense supply system, the customer system used at your local bank, the repair parts inventory system used by car dealerships. There are thousands of applications that use an information system created just to help solve a business problem.</p>
<p id="id1165520145933">Another example of an information system would be the "101 Computer Games" software you might buy at any of several retail stores. This is an entertainment application, that is we are applying the computer to do a task (entertain you). The software actually consists of many different programs (checkers, chess, tic tac toe, etc.) that were most likely written by several different programmers.</p>
<p id="id1165527316871">Computer professionals that are in charge of creating applications often have the job title of <strong>System Analyst</strong>. The major steps in creating an application include the following and start at <strong>Planning</strong> step.</p>

<figure id="id7832618" class="ui-has-child-figcaption"><span id="id7832618_media"><img id="id7832618__onlineimage" src="https://cnx.org/resources/87f175b5f2f3ee6baaa9408eb750fb5786356cfa/graphics1.jpg" alt="" width="600" height="450" /></span><figcaption>Systems Development Life Cycle</figcaption></figure>
<p id="id1165521329650">During the <strong>Design</strong> phase the System Analyst will document the inputs, processing and outputs of each program within the application. During the <strong>Implementation</strong> phase programmers would be assigned to write the specific programs using a programming language decided by the System Analyst. Once the system of programs is tested the new application is installed for people to use. As time goes by, things change and a specific part or program might need repair. During the <strong>Maintenance</strong> phase, it goes through a mini planning, analysis, design and implementation. The programs that need modification are identified and programmers change or repair those programs. After several years of use, the system usually becomes obsolete. At this point a major revision of the application is done. Thus the cycle repeats itself.</p>

<h2>Key Terms</h2>
<dl id="fs-id1164847211887"></dl>
<dl id="fs-id3640095">
 	<dt>applications</dt>
 	<dd id="fs-id1164853662565">An information system or collection of programs that handles a major task.</dd>
</dl>
<dl id="fs-id1164847208606"></dl>
<dl id="fs-id1164847454552">
 	<dt>implementation</dt>
 	<dd id="fs-id3647190">The phase of a Systems Development Life Cycle where the programmers would be assigned to write specific programs.</dd>
</dl>
<dl id="fs-id1164847211887">
 	<dt>
<dl id="fs-id1164847208606">
 	<dt>life cycle</dt>
 	<dd id="fs-id1164847002482">Systems Development Life Cycle: Planning - Analysis - Design - Implementation - Maintenance</dd>
</dl>
<dl id="fs-id1164847454552">
 	<dt></dt>
</dl>
system analyst</dt>
 	<dd id="fs-id1164847308431">Computer professional in charge of creating applications.</dd>
</dl>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 15:21:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 15:21:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[systems-development-life-cycle]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>3</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[chapter-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Appendix</title>
		<link>https://press.rebus.community/programmingfundamentals/back-matter/appendix__trashed/</link>
		<pubDate>Wed, 13 Jun 2018 15:21:53 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/2018/06/13/appendix/</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
 	<li>Abbreviated Precedence Chart for C++ Operators</li>
 	<li>C++ Reserved Keywords</li>
 	<li>ASCII Character Set</li>
 	<li>Show Hide File Extensions</li>
 	<li>Academic or Scholastic Dishonesty</li>
 	<li>Successful Learning Skills</li>
 	<li>Study Habits that Build the Brain</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 15:21:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 15:21:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[appendix__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[back-matter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="back-matter-type" nicename="appendix"><![CDATA[Appendix]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1529173643]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[appendix]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bloodshed Dev-C++ 5 Compiler/IDE</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/bloodshed-dev-c-5-compiler-ide/</link>
		<pubDate>Thu, 14 Jun 2018 00:27:43 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=84</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id13379260">
<h2>Introduction</h2>
<p id="id18812577">Microsoft and Borland are the two reputable names within the programming world for compilers. They sell compiler software for many programming languages. For the C++ programming language, the Microsoft Visual Studio which includes C++ and Borland C++ Builder are excellent compilers. Often with textbooks or free via the internet; you can get Microsoft’s Visual C++ Express or Borland’s Personal Edition version of a compiler. However, installing either of these compliers can be complex. Microsoft’s Visual Studio compiler often creates a variety of installation problems (such as making sure the operating system and .net components are current) thus making it difficult for students to install at home. These compliers require you to build a project to encompass every program. Using a commercially sold compiler that professional programmers would consider using for project development is fine for professionals but often confusing to beginners. Eventually, if you are going to become a professional programmer, you will need to become familiar with the commercially sold compilers.</p>
<p id="id17741373">We suggest that beginning students consider one of the easier to install compiler software packages for use in a programming fundamentals course. The best option we have found is an <strong>open source</strong> compiler/IDE (Integrated Development Environment) named: Bloodshed Dev-C++ 5 compiler/IDE.</p>

<dl id="opensourcedef">
 	<dt>open source</dt>
 	<dd id="fs-id25245518">Group development of source code for software that is made available to the public at no cost.</dd>
</dl>
</section><section id="id15686863">
<h2>Bloodshed Dev-C++ 5 compiler/IDE</h2>
<p id="id10933890">Advantages: Can be installed on Windows 95/98/NT/2000/XP operating systems. I have it installed on Windows Vista operating system, thus it can work with slower processors and almost any Windows operating system. It only requires about 80 MB of storage space (usually enough for the compiler with all of its files and storage room for several of your programs). It is very easy to install and easy to use.  Does not require the use of a "project"; thus individual source code files can be easily compiled.</p>
<p id="id17772283">Disadvantages: Would not normally be used by professional programmers, but is sufficient for a beginning computer programming course and is a full-featured compiler/IDE.</p>
<p id="id20808371"><strong>Unique Advantage:</strong> Can be installed and run on a flash drive, thus giving the student the ability to work on their lab assignments on any computer that has a USB port. This can give the student <strong>portability</strong>, being able to do lab assignments at home, work, library, open lab, classroom, friend’s house, etc.</p>

<dl id="portabilitydef">
 	<dt>portability</dt>
 	<dd id="fs-id8393802">The ability to transport software on a flash drive and thus use it on various machines.</dd>
</dl>
</section><section id="id11255205">
<h2>Preparation before Installation</h2>
<section id="id12131814">
<h3>Creating the Needed Folders and Sub-Folders</h3>
<p id="id24918632">You need to get the <strong>software</strong> and a C++ <strong>source code</strong> program that has been tested and is error free. You will need about 80MB of storage space. We suggest that you create <strong>two folders</strong> on your hard drive or flash drive depending on which installation you choose. If on a flash drive create them at the root level of the drive. If on your home machine, you can use the folder area set up by the operating system for you as a user. Name them:</p>

<ul id="id20123233">
 	<li>Cpp_Software_Download</li>
 	<li>Cpp_Source_Code_Files</li>
</ul>
<p id="id17984360">Within the Cpp_Source_Code_Files folder, create a sub-folder named:</p>

<ul id="id18188664">
 	<li>Compiler_Test</li>
</ul>
<p id="id18905218">To help you keep files organized, you will want to create other sub-folders for storing source code files. We suggest you create at least two other sub-folder to be used with Connexions' related modules. Within the Cpp_Source_Code_Files, create sub-folders named:</p>

<ul id="id9041156">
 	<li>Demo_Programs</li>
 	<li>Monitor_Header</li>
</ul>
<dl id="folderdef">
 	<dt>folder</dt>
 	<dd id="fs-id10386864">A named area for storage of documents or other files on a disk drive or flash drive.</dd>
</dl>
<dl id="sourcecodedef">
 	<dt>source code</dt>
 	<dd id="fs-id13916323">Any collection of statements or declarations written in some human-readable computer programming language.</dd>
</dl>
</section><section id="id23639492">
<h4>Getting the Software</h4>
<p id="id19435814">The full version of the software is named: Dev-C++ 5.0 beta 9.2 (4.9.9.2) (9.0 MB) with Mingw/GCC 3.4.2 You can either download it from Bloodshed or download the version as of 12/8/2008 that is stored on the Connexions web site. Store it in the Cpp_Software_Download folder you created. The software is approximately 9.1 MB and will take several minutes to download if you are using a dial-up modem connection.</p>

<div id="fs-id15145110"><section>The software has not significantly changed since 2007 and the Connexions version will be sufficient for most users. The Bloodshed link requires some additional navigation to get to the software download. Thus, because it is significantly easier, we recommend that you download the software from the Connections web site.</section></div>
<p id="id18146334">Link to Bloodshed: <a href="http://www.bloodshed.net/dev/devcpp.html" target="_window" rel="nofollow">http://www.bloodshed.net/dev/devcpp.html</a></p>
<p id="id19891684">Download from Connexions: <a href="https://cnx.org/resources/e22007d1b1587cb4eaadf90e7076c3bee61954ec/devcpp-4.9.9.2_setup.exe">devcpp-4.9.9.2_setup.exe</a></p>

</section><section id="id11365431">
<h3>Getting a C++ Source Code File</h3>
<p id="id11669450">Listed below is a C++ source code file titled: Compiler_Test.cpp It has been prepared for Connexions web delivery. Download and store it in the Compiler_Test sub-folder you created. You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id23822009">Download from Connexions: <a href="https://cnx.org/resources/8aaeb276391ed55fcb95ab09498f54e07e4c5d80/Compiler_Test.cpp">Compiler_Test.cpp</a></p>

</section></section><section id="id18023235">
<h2>Installation Instructions for Bloodshed Dev-C++ 5 compiler/IDE</h2>
<p id="id5337505">The Version 5 which is well tested (don’t let the beta release scare you) and should work on a variety of machines and various Microsoft Operating systems including Windows 98, Windows 2000, Windows XP and Windows Vista. Below are installation instructions for installing it on a machine or installing it on a flash drive. We don’t suggest trying to switch between the machine drive and flash drive. If it is installed on the machine drive and you try installing it on a flash drive, it creates problems and will not work perperly. Either install it on the flash drive to gain your portability or install it on your machine.</p>

<section id="id18068740">
<h3> Computer Installation Instructions</h3>
<ol id="id22794734">
 	<li>Navigate to the Cpp_Software_Download folder and run the devcpp-4.9.9.2_setup.exe software by double cliking on the filename.</li>
 	<li>Use common sense and answer the installation prompts. NOTE THE FOLLOWING TWO ITEMS:</li>
 	<li>When it gets to the "Choose Install Location" use the default software location of: C:\Dev-Cpp\ (or select the location you want to store the installed program but use the default unless you are familiar with installing software).</li>
 	<li>When it asks: "Do you want to install Dev C++ for all users on this computer?" answer "Yes".</li>
 	<li>After it installs, it will ask some "first time configuration" questions. Again, use common sense and answer the questions. NOTE THE FOLLOWING ITEM:</li>
 	<li>Answer "No" to the retrieve information from header files.</li>
 	<li>It will start your compiler/IDE with a "Tip of the day". We suggest you check the box in the lower left and select "Close".</li>
 	<li>Close your compiler/IDE by using the normal red "X" box. We want to show you how to start your compiller normally.</li>
 	<li>You start your compiler software similar to starting any software loaded on your machine ("Start" then "All Programs" then "Bloodshed Dev-C++" then "Dev-C++").</li>
 	<li>On the menus at the top – Select "File" then "Open project or file" then navigate to where your source code file (Compiler_Test.cpp) is stored on your hard drive. See the suggested folder name above. Select the source code file and open it.</li>
 	<li>You should see the source code listing. Press F9 key or select the "Execute" then "Compile &amp; Run" from the menus at the top. A black screen box should appear and you answer questions appropriately to run the program. When you are done running your program the black screen box goes away.</li>
</ol>
</section><section id="id17452591">
<h3>Flash Drive Installation Instructions</h3>
<ol id="id16610463">
 	<li>Navigate to the Cpp_Software_Download folder and run the devcpp-4.9.9.2_setup.exe software by double cliking on the filename.</li>
 	<li>Use common sense and answer the installation prompts. NOTE THE FOLLOWING TWO ITEMS:</li>
 	<li>When it gets to the "Choose Install Location" you can see that the default software location of: C:\Dev-Cpp\ however, it needs to be changed. Change the "Destination Directory" by selecting changing the default software location from: C:\Dev-Cpp\ to DriveLetter:\Dev-Cpp\ (where the DriveLetter is the drive that represents your flash drive).</li>
 	<li>When it asks: "Do you want to install Dev C++ for all users on this computer?" answer "No".</li>
 	<li>After it installs, it will ask some "first time configuration" questions. Again, use common sense and answer the questions. NOTE THE FOLLOWING ITEM:</li>
 	<li>Answer "No" to the retrieve information from header files.</li>
 	<li>It will start your compiler/IDE with a "Tip of the day". We suggest you check the box in the lower left and select "Close".</li>
 	<li>Close your compiler/IDE by using the normal red "X" box. We want to show you how to start your compiller normally.</li>
 	<li>To start your compiler software you navigate to the "Dev-Cpp" folder on your flash drive and select the "devcpp.exe" application. NOTE: When using the flash drive you should not try starting the compiler by double clicking on a C++ source code file. This method works on a machine installation but does not work on a flash drive installation.</li>
 	<li>On the menus at the top – Select "File" then "Open project or file" then navigate to where your source code file (Compiler_Test.cpp) is stored on your flash drive. See the suggested folder name above. Select the source code file and open it.</li>
 	<li>You should see the source code listing. Press F9 key or select the "Execute" then "Compile &amp; Run" from the menus at the top. A black screen box should appear and you answer questions appropriately to run the program. When you are done running your program the black screen box goes away.</li>
</ol>
</section></section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>84</wp:post_id>
		<wp:post_date><![CDATA[2018-06-14 00:27:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-14 00:27:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[bloodshed-dev-c-5-compiler-ide]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>334</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Modularization and Program Layout</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/modularization-and-program-layout/</link>
		<pubDate>Thu, 14 Jun 2018 00:31:19 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=87</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id20498278">
<h2>Overview</h2>
Modular programming is a software design technique that emphasizes separating the functionality of a program into independent, interchangeable modules, such that each contains everything necessary to execute only one aspect of the desired functionality.[footnote]<a href="https://en.wikipedia.org/wiki/Modular_programming">Wikipedia: Modular programming</a>[/footnote]
<h2>Concept of Modularization</h2>
<p id="id11107238">One of the most important concepts of programming is the ability to group some lines of code into a unit that can be included in our program. The original wording for this was a sub-program. Other names include: macro, sub-routine, procedure, module and function. We are going to use the term <strong>function</strong> for that is what they are called in most of the predominant programming languages of today. Functions are important because they allow us to take large complicated programs and to divide them into smaller manageable pieces. Because the function is a smaller piece of the overall program, we can concentrate on what we want it to do and test it to make sure it works properly. Generally functions fall into two categories:</p>

<ol id="id21820630" type="1">
 	<li><strong>Program Control</strong> - Functions used to simply sub divide and control the program. These functions are unique to the program being written. Other programs may use similar functions maybe even functions with the same name, but the content of the functions are almost always very different.</li>
 	<li><strong>Specific Task</strong> - Functions designed to be used with several programs. These functions perform a specific task and thus are useable in many different programs because the other programs also need to do the specific task. Specific task functions are sometimes referred to as building blocks. Because they are already coded and tested, we can use them with confidence to more efficiently write a large program.</li>
</ol>
<p id="id20506092">The main program must establish the existence of functions used in that program. Depending on the programming language, there is a formal way to:</p>

<ol id="id23561710" type="1">
 	<li>define a function (it's <strong>definition</strong> or the code it will execute)</li>
 	<li><strong>call</strong> a function</li>
 	<li>declare a function (a <strong>prototype</strong> is a declaration to a complier)</li>
</ol>
<div class="textbox shaded">Defining and calling functions are common activities across programming languages. Declaring functions with prototypes is specific to certain programming languages, including C and C++.</div>
<p id="id21174298">Program Control functions normally do not communicate information to each other but use a common area for variable storage. Specific Task functions are constructed so that data can be communicated between the calling program piece (which is usually another function) and the function being called. This ability to communicate data is what allows us to build a specific task function that may be used in many programs. The rules for how the data is communicated in and out of a function vary greatly by programming language, but the concept is the same. The data items passed (or communicated) are called parameters. Thus the wording: <strong>parameter passing</strong>. The four data communication options include:</p>

<ol id="id21820512" type="1">
 	<li>no communication in with no communication out</li>
 	<li>some communication in with no communication out</li>
 	<li>some communication in with some communication out</li>
 	<li>no communication in with some communication out</li>
</ol>
</section><section id="id21924252">
<h2>Introduction of Functions within C++</h2>
<p id="id20001666">We are going to consider a simple program that might be used for testing a compiler to make sure that it is installed correctly.</p>

<div id="fs-id1168689606566" class="ui-has-child-title"><header>
<div>Compiler_Test.cpp source code</div>
</header><section>
<pre id="fs-id7428023"><code>//******************************************************
// Filename: Compiler_Test.cpp
// Purpose:  Average the ages of two people
// Author:   Ken Busbee; © Kenneth Leroy Busbee
// Date:     Jan 5, 2009
// Comment:  Main idea is to be able to 
//           debug and run a program on your compiler.
//******************************************************

// Headers and Other Technical Items

#include &lt;iostream&gt;  
using namespace std;

// Function Prototypes

void pause(void);

// Variables

int     age1;
int     age2;
double  answer;

//******************************************************
// main
//******************************************************

int main(void)
  {
  // Input	
  cout &lt;&lt; "\nEnter the age of the first person ---&gt;: ";
  cin &gt;&gt; age1;
  cout &lt;&lt; "\nEnter the age of the second person --&gt;: ";
  cin &gt;&gt; age2;

  // Process
  answer = (age1 + age2) / 2.0;

  // Output
  cout &lt;&lt; "\nThe average of their ages is --------&gt;: ";
  cout &lt;&lt; answer;

  pause();
  return 0;
  }

//******************************************************
// pause
//******************************************************

void pause(void)
  {
  cout &lt;&lt; "\n\n";
  system("PAUSE");
  cout &lt;&lt; "\n\n";
  return;
  }

//******************************************************
// End of Program
//******************************************************</code></pre>
</section></div>
<p id="id21726338">This program has two functions, one from each of our categories. The technical layout of functions are the same, it is our distinction that creates the two categories based on how a function is being implemented.</p>

<section id="id20837891">
<h3>Program Control Function</h3>
<p id="id22397355">The main program piece in C++ program is a special function with the <strong>identifier name</strong> of main. The special or uniqueness of main as a function is that this is where the program starts executing code and this is where it usually stops executing code. It is usually the first function defined in a program and appears after the area used for includes, other technical items, declaration of prototypes, the listing of global constants and variables and any other items generally needed by the program. The code to define the function main is provided; however, it is not prototyped or usually called like other functions within a program. In this simple example, there are no other program control functions.</p>

</section><section id="id20805156">
<h3>Specific Task Function</h3>
<p id="id21891535">We often have the need to perform a specific task that might be used in many programs. In the Compile_Test.cpp source code above we have such a task that is used to stop the execution of the code until the user hits the enter key. The functions name is: pause. This function is not communicating any information between the calling function and itself, thus the use of the data type void.</p>

<div id="fs-id1168689346159" class="ui-has-child-title"><header>
<div>general layout of a function</div>
</header><section>
<pre id="fs-id1168689489069"><code>
&lt;return value data type&gt; function identifier name(&lt;data type&gt; &lt;identifier name for input value&gt;)
  {
  lines of code;

  return &lt;value&gt;;
  }</code></pre>
</section></div>
<p id="id21946377">There is no semi-colon after the first line. Semi-colons are used at the end of a statement in C++, but not on the first line when defining a function. Functions have a set of <strong>braces</strong> {} used for identifying a group or block of statements or lines of code. There are normally several lines of code within a function. Lines of code containing the instructions end in a semi-colon. Can you identify the definition of the pause function in the above program example? The pause function definition is after the function main. Though not technically required, most programs list all functions (program control or specific task) after the function main.</p>
<p id="id18038744">Let's identify the location where the function pause is called. The calling function is the function main and it towards the end of the function. The line looks like:</p>
<p id="id18869916"><code>pause();</code></p>
<p id="id18121237">When you call a function you use its identifier name and a set of parentheses. You place any data items you are passing inside the parentheses, and in our example there are none. A semi-colon ends the statement or line of code. After our program is compiled and running, the lines of code in the function main are executed and when it gets to the calling of the pause function, the control of the program moves to the pause function and starts executing the lines of code in the pause function. When it’s done with the lines of code, it will return to the place in the program that called it (in our example the function main) and continue with the code in that function.</p>
<p id="id21775571">Once we know how to define a function and how to call a function, we usually will need to know how to declare a function to the compiler (called a prototype). Because of normal computer programming industry standards, programmers usually list the function main first with other functions defined after it. Then somewhere in the function main, we will call a function. When we convert our source code program to an executable version for running on our computer, the first step of the process is compiling. The compiler program demands to know what the communication will be between two functions when a function is called. It will know the communication (what going in and out as parameters) if the function being called has been defined. But, we have not defined that function yet; it is defined after the function main. To solve this problem, we show the compiler a prototype of what the function will look like (at least the communication features of the function) when we define it.</p>
<p id="id22291908"><code>void pause(void);</code></p>
<p id="id21189985">This line of code looks exactly like the first line in our function definition with one important addition of a semi-colon. Prototypes (or declarations to the compiler of the communications of a function not yet defined) are placed near the top of the program before the function main. <strong>Summary concept: If you call a function before it is defined you must prototype it before it is called.</strong> Looking at our list of the three things you do in conjunction with a function in the order that they normally appear in a program, there is a formal way to:</p>

<ol id="id21194510" type="1">
 	<li>declare a function (a prototype is a communications declaration to a complier)</li>
 	<li>call a function</li>
 	<li>define a function</li>
</ol>
</section></section><section id="id17165547">
<h2>C++ Program Layout</h2>
<p id="id22369786">From the above example, you can see that 2/3 of the program is the two functions. Most C++ programs have several items before the function main. As in the example, they often are:</p>

<ol id="id20887090" type="1">
 	<li>Documentation – Most programs have a comment area at the start of the program with a variety of comments pertinent to the program. Any line starting with two slashes // is a comment and the compiler software disregards everything from the // to the end of the line.</li>
 	<li>#include&lt;iostream&gt; – This line of code inserts a file into the source code. The file contains necessary code to be able to do simple input and output.</li>
 	<li>using namespace std – The C++ compiler has an area where it keeps the identifier names used in a program organized and it is called a namespace. There is a namespace created in conjunction with the iostream file called: std. This line informs the compiler to use the namespace std where the identifier names in the iostream are established.</li>
 	<li>Function prototypes have already been explained.</li>
 	<li>We need some variables (storage areas) for this program to work. They are defined next.</li>
</ol>
</section><section id="id22121639">
<h2>Key Terms</h2>
<dl id="fs-id1164229923368">
 	<dt>
<dl id="fs-id6611246">
 	<dt><section id="id22121639">
<dl id="fs-id3162174">
 	<dt>braces</dt>
 	<dd id="fs-id1164229133792">Used to identify a block of code in C++.</dd>
</dl>
</section>function</dt>
 	<dd id="fs-id2703998">What modules are called in the two predominant programming languages of today: C++ and Java.</dd>
</dl>
<dl id="fs-id1164234935714">
 	<dt></dt>
</dl>
<dl id="fs-id1164230067638">
 	<dt>
<dl id="fs-id1164231210238">
 	<dt>
<dl id="fs-id6417714">
 	<dt>function call</dt>
 	<dd id="fs-id2916466">A function's using or invoking of another function.</dd>
</dl>
<dl id="fs-id5276259">
 	<dt>function definition</dt>
 	<dd id="fs-id8829989">The code that defines what a function does.</dd>
</dl>
<dl id="fs-id3162174">
 	<dt></dt>
</dl>
function prototype</dt>
 	<dd id="fs-id8157390">A function's communications declaration to a compiler.</dd>
</dl>
<dl id="fs-id6417714"></dl>
<dl id="fs-id3162174">
 	<dt></dt>
</dl>
identifier name</dt>
 	<dd id="fs-id8849434">The name given by the programmer to identify a function or other program items such as variables.</dd>
</dl>
<dl id="fs-id1164231210238">
 	<dt></dt>
</dl>
modularization</dt>
 	<dd id="fs-id1164230979083">The ability to group some lines of code into a unit that can be included in our program.</dd>
</dl>
<dl id="fs-id6611246"></dl>
<dl id="fs-id1164234935714">
 	<dt>
<dl id="fs-id1164225432367">
 	<dt>parameter passing</dt>
 	<dd id="fs-id7520713">How the data is communicated in to and out of a function.</dd>
</dl>
<dl id="fs-id1164230067638">
 	<dt></dt>
</dl>
program control</dt>
 	<dd id="fs-id6090810">Functions used to simply sub divide and control the program.</dd>
</dl>
<dl id="fs-id1164230892516">
 	<dt>specific task</dt>
 	<dd id="fs-id1164226484466">Functions designed to be used with several programs.</dd>
</dl>
<dl id="fs-id1164225432367"></dl>
<dl id="fs-id1164230067638"></dl>
<dl id="fs-id1164231210238">
 	<dt>
<dl id="fs-id6417714"></dl>
</dt>
</dl>
<dl id="fs-id3162174"></dl>
</section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>87</wp:post_id>
		<wp:post_date><![CDATA[2018-06-14 00:31:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-14 00:31:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[modularization-and-program-layout]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>42</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[modularization-and-c-program-layout]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Practice 0</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/practice/</link>
		<pubDate>Thu, 14 Jun 2018 00:50:28 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=94</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div class="media-body">
<div id="content"><section id="id10479433">
<div class="textbox shaded">

Note to Contributors:

This practice page came from the original Chapter 1 and needs to be merged with the other practice page consistent with the revised content.

</div>
<h2>Learning Objectives</h2>
<ol id="id10016597" type="1">
 	<li>Understand key terms and definitions as listed in the modules associated with this chapter.</li>
 	<li>Install the Bloodshed Dev-C++ 5 compiler</li>
 	<li>Make minor modifications to an existing program</li>
</ol>
</section><section id="id14165849"></section><section id="id15373100">
<h2>Review Questions</h2>
<div id="fs-id1170660082346"><section>
<div id="fs-id7174419">
<div id="fs-id1170657530951">
<div>Answer the following statements as either true or false:</div>
<ol>
 	<li>The Bloodshed Dev-C++ 5 compiler/IDE is the preferred compiler for this textbook/collection, however any C++ compiler will work.</li>
 	<li>Most compilers can be installed on a flash drive.</li>
 	<li>In addition to function as the name of a sub-program, the computer industry also uses macro, procedure and module.</li>
 	<li>Generally functions fall into two categories: Program Control and Specific Task.</li>
</ol>
</div>
</div>
<div id="fs-id1170659645344">
<div class="ui-toggle-wrapper">
<div>Answers:</div>
<ol>
 	<li>true</li>
 	<li>false</li>
 	<li>true</li>
 	<li>true</li>
</ol>
</div>
</div>
</section></div>
</section><section id="id9658617"></section><section id="id9645414">
<h2>Activities</h2>
<section id="id9670878">
<h3>Creating a Folder or Sub-Folder for Chapter 01 Files</h3>
<p id="id14882648">Within the Chapter 1 Connexions modules you were given directions on how to install the <strong>Bloodshed Dev-C++ 5 compiler/IDE</strong>and to test your installation with the Compiler_Test.cpp source code file. If you have not done this, return to the Connexions materials and complete this task.</p>
<p id="id8570104">In the compiler installation directions you were asked to make a folder named: Cpp_Source_Code_Files. All of your lab assignments in this course assume you have that folder on the same drive as your compiler (either drive C: your hard disk drive, or on a flash drive). If you don’t have that folder, go create it now.</p>
<p id="id7257403">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id5087605">
 	<li>Chapter_01 within the folder named: Cpp_Source_Code_Files</li>
</ul>
<p id="id10551027">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id6640222">
<h3>Download the Lab File(s)</h3>
<p id="id6191938">Download and store the following file(s) to your storage device in the appropriate folder(s). You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id7120374">Download from Connexions: <a href="https://cnx.org/resources/8aaeb276391ed55fcb95ab09498f54e07e4c5d80/Compiler_Test.cpp">Compiler_Test.cpp</a></p>

</section><section id="id5134206">
<h3>Detailed Lab Instructions</h3>
<p id="id6582707">Read and follow the directions below carefully, and perform the steps in the order listed.</p>

<ul id="id4343030">
 	<li>Navigate to your sub-folder: Chapter_01 and rename the Compiler_Test.cpp source code file to: <strong>Lab_01.cpp</strong></li>
 	<li>If you are having problems seeing the file extensions, visit the “Show Hide File Extensions” instructions within the Appendix.</li>
 	<li>Start your compiler and open the source code file. Carefully make the following modifications:</li>
</ul>
<ul id="id3535479">
 	<li><strong>Change the comments at the top, specifically:</strong></li>
</ul>
<ul id="id9312266">
 	<li>The filename should be: Lab_01.cpp</li>
 	<li>Purpose should be: Average the weight of three people</li>
 	<li>Remove the next 2 lines of comment talking about the main idea</li>
 	<li>Author: put your name and erase my name and copyright</li>
 	<li>Date: Put today's date</li>
 	<li>Remove the next 3 lines of comment dealing with licensing (don't erase the asterisk line)</li>
</ul>
<div id="eip-42"><section>During the rest of the course you will often use a source code file provided by the instructor as your starting point for a new lab assignment. Sometimes you will use a source code file that you have created as your starting point for a new lab assignment. Either way, you should modify the comments area as appropriate to include at a minimum the four lines of information (filename, purpose, author and date) as established in this lab assignment.</section></div>
<ul id="id5392975">
 	<li><strong>We are now going to make simple modifications to this program so that it is able to average the weight of three people. Do the following:</strong></li>
</ul>
<ul id="id7331834">
 	<li>Within the variables area, change the variable names for age1 and age2 to weight1 and weight2. Add another variable of integer data type with the identifier name of weight3.</li>
 	<li>The input area has two prompts and requests for data from the user. They are paired up – a prompt and getting data from the keyboard. We need to modify the prompt to ask for weight instead of age. We need to change the variable name from age1 to weight1. Do this for the second pair that prompts and gets the second data item. Create a third pair that prompts and gets the third data item.</li>
 	<li>The process area has only one line of code and we need to make changes that add the weight3 and divides by 3.0 instead of 2.0. The code should look like this:</li>
 	<li><strong>answer = (weight1 + weight2 + weight3) / 3.0;</strong></li>
 	<li>The output area needs the text modified from ages to weights.</li>
</ul>
<ul id="id8141453">
 	<li>Build (compile and run) your program. You have successfully written this program if when it run and you put in the three weights; it tells you the correct average.</li>
</ul>
<ul id="id9787178">
 	<li>After you have successfully written this program, if you are taking this course for college credit, follow the instructions from your professor/instructor for submitting it for grading.</li>
</ul>
</section></section></div>
</div>
</div>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>94</wp:post_id>
		<wp:post_date><![CDATA[2018-06-14 00:50:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-14 00:50:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[practice]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>42</wp:post_parent>
		<wp:menu_order>11</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Program Design</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/program-design/</link>
		<pubDate>Thu, 14 Jun 2018 01:19:27 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=106</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Overview</h2>
<p id="id1164916302672"><strong>Program design</strong> consists of the steps a programmer should do before they start coding the program in a specific language. These steps when properly documented will make the completed program easier for other programmers to maintain in the future. There are three broad areas of activity:</p>

<ul id="id1164913269267">
 	<li>Understanding the Program</li>
 	<li>Using Design Tools to Create a Model</li>
 	<li>Develop Test Data</li>
</ul>
<h3>Understanding the Program</h3>
<p id="id1164907595267">If you are working on a project as a one of many programmers, the system analyst may have created a variety of documentation items that will help you understand what the program is to do. These could include screen layouts, narrative descriptions, documentation showing the processing steps, etc. If you are not on a project and you are creating a simple program you might be given only a simple description of the purpose of the program. Understanding the purpose of a program usually involves understanding it's:</p>

<ul id="id1164911185296">
 	<li>Inputs</li>
 	<li>Processing</li>
 	<li>Outputs</li>
</ul>
<p id="id1164916290809">This <strong>IPO</strong> approach works very well for beginning programmers. Sometimes, it might help to visualize the programming running on the computer. You can imagine what the monitor will look like, what the user must enter on the keyboard and what processing or manipulations will be done.</p>

<h3>Using Design Tools to Create a Model</h3>
<p id="id1164913166432">At first you will not need a hierarchy chart because your first programs will not be complex. But as they grow and become more complex, you will divide your program into several modules (or functions).</p>
<p id="id1164914402838">The first modeling tool you will usually learn is <strong>pseudocode</strong>. You will document the logic or algorithm of each function in your program. At first, you will have only one function, and thus your pseudocode will follow closely the IPO approach above.</p>
<p id="id1164910222113">There are several methods or tools for planning the logic of a program. They include: flowcharting, hierarchy or structure charts, pseudocode, HIPO, Nassi-Schneiderman charts, Warnier-Orr diagrams, etc. Programmers are expected to be able to understand and do flowcharting and pseudocode. These methods of developing the model of a program are usually taught in most computer courses. Several standards exist for flowcharting and pseudocode and most are very similar to each other. However, most companies have their own documentation standards and styles. Programmers are expected to be able to quickly adapt to any flowcharting or pseudocode standards for the company at which they work. The others methods that are less universal require some training which is generally provided by the employer that chooses to use them.</p>
<p id="id1164916387555">Later in your programming career, you will learn about using applications software that helps create an information system and/or programs. This type of software is called Computer-aided Software Engineering.</p>
<p id="id1164913129755">Understanding the logic and planning the algorithm on paper before you start to code is very important concept. Many students develop poor habits and skipping this step is one of them.</p>

<h3>Develop Test Data</h3>
<p id="id1164917730113"><strong>Test data</strong> consists of the user providing some input values and predicting the outputs. This can be quite easy for a simple program and the test data can be used to check the model to see if it produces the correct results.</p>

<h2>Key Terms</h2>
<dl id="fs-id1164917078538">
 	<dt>IPO</dt>
 	<dd id="fs-id1164911971264">Inputs - Processing - Outputs</dd>
</dl>
<dl id="fs-id7667693">
 	<dt>pseudocode</dt>
 	<dd id="fs-id1164917236414">English-like statements used to convey the steps of an algorithm or function.</dd>
</dl>
<dl id="fs-id1966744">
 	<dt>test data</dt>
 	<dd id="fs-id6282461">Providing input values and predicting the outputs.</dd>
</dl>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>106</wp:post_id>
		<wp:post_date><![CDATA[2018-06-14 01:19:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-14 01:19:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[program-design]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>3</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Pseudocode</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/pseudocode/</link>
		<pubDate>Thu, 14 Jun 2018 01:20:09 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=108</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Overview</h2>
<strong>Pseudocode</strong> is an informal high-level description of the operating principle of a computer program or other algorithm.[footnote]<a href="https://en.wikipedia.org/wiki/Pseudocode">Wikipedia: Pseudocode</a>[/footnote]
<h2>Discussion</h2>
<p id="id1167338469122">Pseudocode is one method of designing or planning a program. <strong>Pseudo</strong> means false, thus pseudocode means false code. A better translation would be the word fake or imitation. Pseudocode is fake (not the real thing). It looks like (imitates) real code but it is NOT real code. It uses English statements to describe what a program is to accomplish. It is fake because no complier exists that will translate the pseudocode to any machine language. Pseudocode is used for documenting the program or module design (also known as the algorithm).</p>
<p id="id1167338441600">The following outline of a simple program illustrates pseudocode. We want to be able to enter the ages of two people and have the computer calculate their average age and display the answer.</p>

<div id="fs-id10207076" class="ui-has-child-title"><header>
<div>Outline using Pseudocode</div>
</header>
<pre id="fs-id16874732"><code>Input
    display a message asking the user to enter the first age
    get the first age from the keyboard
    display a message asking the user to enter the second age
    get the second age from the keyboard

Processing
    calculate the answer by adding the two ages together and dividing by two

Output
    display the answer on the screen
    pause so the user can see the answer</code></pre>
</div>
<p id="id1167338491327">After developing the program design, we use the pseudocode to write code in a language (like C++, Java, Python, etc.) where you must follow the rules of the language (syntax) in order to code the logic or algorithm presented in the pseudocode. Pseudocode usually does not include other items produced during programming design such as identifier lists for variables or test data.</p>
<p id="id1167338491907">There are other methods for planning and documenting the logic for a program. One method is HIPO. It stands for Hierarchy plus Input Process Output and was developed by IBM in the 1960s. It involved using a hierarchy (or structure) chart to show the relationship of the sub-routines (or functions) in a program. Each sub-routine had an IPO piece. Since the above problem/task was simple, we did not need to use multiple sub-routines, thus we did not produce a hierarchy chart. We did incorporate the IPO part of the concept for the pseudocode outline.</p>

<h2>Key Terms</h2>
<dl id="fs-id10942887">
 	<dt>pseudo</dt>
 	<dd id="fs-id7759482">Means false and includes the concepts of fake or imitation.</dd>
</dl>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>108</wp:post_id>
		<wp:post_date><![CDATA[2018-06-14 01:20:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-14 01:20:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[pseudocode]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>3</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Software Testing</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/software-testing/</link>
		<pubDate>Thu, 14 Jun 2018 01:21:03 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=110</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="textbox shaded">

Note to Contributors:

Is the example here more complicated than necessary to introduce software testing? I personally might go with an example with a single input, such as a temperature for temperature conversion.

Also, do we want to get into the idea of unit testing vs. system testing, etc., or is that beyond the scope or current introductory point in the course?

</div>
<h2>Overview</h2>
<b>Software testing</b> involves the execution of a software component or system component to evaluate one or more properties of interest. In general, these properties indicate the extent to which the component or system under test:[footnote]<a href="https://en.wikipedia.org/wiki/Software_testing">Wikipedia: Software testing</a>[/footnote]
<ul>
 	<li>meets the requirements that guided its design and development</li>
 	<li>responds correctly to all kinds of inputs</li>
 	<li>performs its functions within an acceptable time</li>
 	<li>is sufficiently usable</li>
 	<li>can be installed and run in its intended environments</li>
 	<li>achieves the general result its stakeholders desire</li>
</ul>
<h2>Discussion</h2>
<p id="id1167333257185">Test data consists of the user providing some input values and predicting the outputs. This can be quite easy for a simple program and the test data can be used twice.</p>

<ol id="id1167330811410" type="1">
 	<li>to check the model to see if it produces the correct results (<strong>model checking</strong>)</li>
 	<li>to check the coded program to see if it produces the correct results (<strong>code checking</strong>)</li>
</ol>
<p id="id1167333379079">Test data is developed by using the algorithm of the program. This algorithm is usually documented during the program design with either flowcharting or pseudocode. Here is the pseudocode in outline form describing the inputs, processing and outputs for a program used for painting rectangular buildings.</p>

<div id="fs-id1171849350847" class="ui-has-child-title"><header>
<div>Pseudocode using an IPO Outline for Painting a Rectangular Building</div>
</header>
<pre id="fs-id1171853025778"><code>Input
    display a message asking user for the length of the building
    get the length from the keyboard
    display a message asking user for the width of the building
    get the width from the keyboard
    display a message asking user for the height of the building
    get the height from the keyboard
    display a message asking user for the price per gallon of paint
    get the price per gallon of paint from the keyboard
    display a message asking user for the sq ft coverage of a gallon of paint
    get the sq ft coverage of a gallon of paint from the keyboard

Processing
    calculate the total area of the building by:
        multiplying the length by height by 2
        then multiply the width by height by 2
        then add the two results together
    calculate the number of gallons of paint needed by:
        dividing the total area by the coverage per gallon
        then round up to the next whole gallon
    calculate the total cost of the paint by:
        multiplying the total gallons needed by the price of one gallon of paint

Output
    display the number of gallons needed on the monitor
    display the total cost of the paint on the monitor
    pause so the user can see the answer</code></pre>
</div>
<h3>Creating Test Data and Model Checking</h3>
<p id="id1167334260095">Test data is used to verify that the inputs, processing and outputs are working correctly. As test data is initially developed it can verify that the documented algorithm (pseudocode in the example we are doing) is correct. It helps us understand and even visualize the inputs, processing and outputs of the program.</p>
<p id="id1167334344196">Inputs: My building is 100 feet long by 40 feet wide and 10 feet in height and I selected paint costing $28.49 per gallon that will cover 250 square feet per gallon. We should verify that the pseudocode is prompting the user for this data.</p>
<p id="id1167334450153">Processing: Using my solar powered hand held calculator, I can calculate (or predict) the total area would be: (100 x 10 x 2 plus 40 x 10 x 2) or 2,800 sq ft. The total gallons of paint would be: (2800 / 250) or 11.2 gallons. But rounded up, I would need twelve (12) gallons of paint. The total cost would be: (28.49 times 12) or $341.88. We should verify that the pseudocode is performing the correct calculations.</p>
<p id="id1167333359162">Output: Only the significant information (number of gallons to buy and the total cost) are displayed for the user to see. We should verify that the appropriate information is being displayed.</p>

<h3>Testing the Coded Program – Code Checking</h3>
<p id="id1167334091788">The test data can be developed and used to test the algorithm that is documented (in our case our pseudocode) during the program design phase. Once the program is code with compiler and linker errors resolved, the programmer gets to play user and should test the program using the test data developed. When you run your program, how will you know that it is working properly? Did you properly plan your logic to accomplish your purpose? Even if your plan was correct, did it get converted correctly (coded) into the chosen programming language (in our case C++)? The answer (or solution) to all of these questions is our test data.</p>
<p id="id1167337752664">By developing test data we are predicting what the results should be, thus we can verify that our program is working properly. When we run the program we would enter the input values used in our test data. Hopefully the program will output the predicted values. If not then our problem could be any of the following:</p>

<ol id="id1167333434468" type="1">
 	<li>The plan (IPO outline or other item) could be wrong</li>
 	<li>The conversion of the plan to code might be wrong</li>
 	<li>The test data results were calculated wrong</li>
</ol>
<p id="id1167332991017">Resolving problems of this nature can be the most difficult problems a programmer encounters. You must review each of the above to determine where the error is lies. Fix the error and re-test your program.</p>

<h2>Key Terms</h2>
<dl id="fs-id1171850166322">
 	<dt>
<dl id="fs-id1171853616200">
 	<dt>code checking</dt>
 	<dd id="fs-id1171853450515">Using test data to check the coded program in a specific language (like C++).</dd>
</dl>
model checking</dt>
 	<dd id="fs-id1171853009808">Using test data to check the design model (usually done in pseudocode).</dd>
</dl>
<dl id="fs-id1171853616200"></dl>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>110</wp:post_id>
		<wp:post_date><![CDATA[2018-06-14 01:21:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-14 01:21:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[software-testing]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>3</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[test-data]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[testing]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Practice: Introduction to Programming</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/practice-1/</link>
		<pubDate>Thu, 14 Jun 2018 01:21:35 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=112</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Learning Objectives</h2>
<ol id="id1172770882553" type="1">
 	<li>Understand key terms and definitions as listed in the modules associated with this chapter.</li>
 	<li>Create a pseudocode document for a programming problem.</li>
 	<li>Create a flowchart for a programming problem.</li>
 	<li>Perform software testing for a programming problem.</li>
</ol>
<h2>Review Questions</h2>
True / False:
<ol>
 	<li>Beginning programmers participate in all phases of the Systems Development Life Cycle.</li>
 	<li>Coding the program in a language like C++ is the first task of planning. You plan as you code.</li>
 	<li>Pseudocode is the only commonly used planning tool.</li>
 	<li>Test data is developed for testing the program once it is code into a language like C++.</li>
 	<li>The word pseudo means false and includes the concepts of fake or imitation.</li>
 	<li>Many programmers pick up the bad habit of not completing the planning step before starting to code the program.</li>
</ol>
Answers:
<ol>
 	<li>false</li>
 	<li>false</li>
 	<li>false</li>
 	<li>false</li>
 	<li>true</li>
 	<li>true</li>
</ol>
Short Answer:
<ol>
 	<li>List the steps of the Systems Development Life Cycle and indicate which step you are likely to work in as a new computer professional.</li>
</ol>
<h2>Activities</h2>
The following activities focus on software planning and testing using pseudocode and / or flowcharts. Programming language code will be written in future assignments.
<ol id="id1172766076754">
 	<li>Search the Internet for pseudocode for making a peanut butter and jelly sandwich. Based on the examples you find, create pseudocode to make your own favorite sandwich or other prepared meal. Test your pseudocode by reading the pseudocode out loud as someone else follows your instructions.</li>
 	<li>Search the Internet for a flowchart for making a peanut butter and jelly sandwich. Use a free online or downloadable flowchart tool to create a flowchart that describes how to make your favorite sandwich or other prepared meal. Test your flowchart by reading the flowchart out loud while someone else follows your instructions.</li>
 	<li>Create pseudocode or a flowchart for a program that would interact with bank customers and help them determine the value of a bag or jar of coins brought in for deposit. Include counts for pennies, nickels, dimes and quarters and calculate the total value of all of the coins deposited. Test your program by having someone else follow the instructions and guide them as they use your program.</li>
 	<li>Create pseudocode or a flowchart for a program that allows the user to enter gallons of gas and converts it to liters (metric system). NOTE: One US gallon equals 3.7854 liters. Test your program by having someone else follow the instructions and guide them as they use your program.</li>
 	<li>A major restaurant sends a chef to purchase fruits and vegetables every day. Upon returning to the store the chef must enter two pieces of data for each item he purchased. The quantity (Example: 2 cases) and the price he paid (Example: $4.67). The program has a list of 20 items and after the chef enters the information, the program provides a total for the purchases for that day. Prepare test data for five (5) items: apples, oranges, bananas, lettuce and tomatoes.</li>
</ol>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
 	<li><a href="https://en.wikiversity.org/wiki/Computer_Programming">Wikiversity: Computer Programming</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>112</wp:post_id>
		<wp:post_date><![CDATA[2018-06-14 01:21:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-14 01:21:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[practice-1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>3</wp:post_parent>
		<wp:menu_order>6</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="dbraunsc"><![CDATA[Dave Braunschweig]]></category>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[practice-2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Data Types</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/data-types/</link>
		<pubDate>Thu, 14 Jun 2018 01:28:37 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=117</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Overview</h2>
A <strong>data type</strong> is a classification of data which tells the compiler or interpreter how the programmer intends to use the data. Most programming languages support various types of data, including integer, real, character or string, and Boolean.[footnote]<a href="https://en.wikipedia.org/wiki/Data_type">Wikipedia: Data type</a>[/footnote]
<h2>Discussion</h2>
Our interactions (inputs and outputs) with a program are treated in many languages as a stream of bytes. These bytes represent data that can be interpreted as representing values that we understand. Additionally, within a program we process this data in various ways such as adding them up or sorting them. This data comes in different forms. Examples include: your name which is a string of characters; your age which is usually an integer; or the amount of money in your pocket which is usually a value measured in dollars and cents (something with a fractional part). A major part of understanding how to design and code programs is centered in understanding the types of data that we want to manipulate and how to manipulate that data.

Common data types include:
<table>
<tbody>
<tr>
<th>Data Type</th>
<th> Represents</th>
<th>Examples</th>
</tr>
<tr>
<td>integer</td>
<td>whole numbers</td>
<td><code>-5</code>, <code>0</code>, <code>123</code></td>
</tr>
<tr>
<td>floating point (real)</td>
<td>fractional numbers</td>
<td>-<code>87.5</code>, <code>0.0</code>, <code>3.14159</code></td>
</tr>
<tr>
<td>Boolean</td>
<td>logical true or false</td>
<td><code>true</code>, <code>false</code></td>
</tr>
<tr>
<td>string</td>
<td>A sequence of characters</td>
<td><code>"Hello world!"</code></td>
</tr>
<tr>
<td>nothing</td>
<td>no data</td>
<td><code>null</code></td>
</tr>
</tbody>
</table>
The common data types usually exist in most programming languages and act or behave similarly from language to language. Additional complex and/or composite data types may exist and vary from language to language.
<h2>Pseudocode</h2>
<pre>Function Main
    ... This program demonstrates variables, 
    ... literal constants, and data types.

    Declare Integer i
    Declare Real r
    Declare String s
    Declare Boolean b
    
    Assign i = 1234567890
    Assign r = 1.23456789012345
    Assign s = "string"
    Assign b = true

    Output "Integer i = " &amp; i
    Output "Real r = " &amp; r
    Output "String s = " &amp; s
    Output "Boolean b = " &amp; b
End

Output:
Integer i = 1234567890
Real r = 1.23456789012345
String s = string
Boolean b = true
</pre>
<h2>Flowchart</h2>
<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/26/Flowgorithm_Data_Types.svg/484px-Flowgorithm_Data_Types.svg.png" alt="File:Flowgorithm Data Types.svg" />
<h2>Key Terms</h2>
<dl>
 	<dt>Boolean</dt>
 	<dd>A data type representing logical true or false.</dd>
</dl>
<dl>
 	<dt>data type</dt>
 	<dd id="fs-id7636704">Defines a set of values and a set of operations that can be applied on those values.</dd>
</dl>
<dl>
 	<dt>floating point</dt>
 	<dd>A data type representing numbers with fractional parts.</dd>
</dl>
<dl>
 	<dt>integer</dt>
 	<dd>A data type representing whole numbers.</dd>
</dl>
<dl>
 	<dt>string</dt>
 	<dd>A data type representing a sequence of characters.</dd>
</dl>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>117</wp:post_id>
		<wp:post_date><![CDATA[2018-06-14 01:28:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-14 01:28:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[data-types]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="dbraunsc"><![CDATA[Dave Braunschweig]]></category>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[data-types-in-c]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Identifier Names</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/identifier-names/</link>
		<pubDate>Thu, 14 Jun 2018 01:32:30 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=121</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id16449460">
<h2>Overview</h2>
<p id="id23740194">Within programming a variety of items are given descriptive names to make the code more meaningful to us as humans. These names are called "Identifier Names". Constants, variables, type definitions, functions, etc. when declared or defined are identified by a name. These names follow a set of rules that are imposed by:</p>

<ol id="id14904688" type="1">
 	<li>the language's technical limitations</li>
 	<li>good programming practices</li>
 	<li>common industry standards for the language</li>
</ol>
</section><section id="id23389221">
<h2>Discussion</h2>
<h3>Technical to Language</h3>
<ul id="id10306716">
 	<li>Use only allowable characters (in many languages the first character must be alphabetic or underscore, can continue with alphanumeric or underscore)</li>
 	<li>Can't use reserved words</li>
 	<li>Length limit</li>
</ul>
<p id="id20282960">These attributes vary from one programming language to another. The allowable characters and reserved words will be different. The length limit refers to how many characters are allowed in an identifier name and often is compiler dependent and may vary from compiler to compiler for the same language. However, all programming languages have these three technical rules.</p>

</section><section id="id14843517">
<h3>Good Programming Techniques</h3>
<ul id="id16718348">
 	<li>Meaningful</li>
 	<li>Be case consistent</li>
</ul>
<p id="id21851764">Meaningful identifier names make your code easier for another to understand. After all what does "p" mean? Is it pi, price, pennies, etc. Thus do not use cryptic (look it up in the dictionary) identifier names.</p>
<p id="id11198325">Some programming languages treat upper and lower case letters used in identifier names as the same. Thus: pig and Pig are treated as the same identifier name. Unknown to you the programmer, the compiler usually forces all identifier names to upper case. Thus: pig and Pig both get changed to PIG. However not all programming languages act this way. Some will treat upper and lower case letters as being different things. Thus: pig and Pig are two different identifier names. If you declare it as pig and then reference it in your code later as Pig – you get a different variable or perhaps a compiler error. To avoid the problem altogether, we teach students to <strong>be case consistent</strong>. Use an identifier name only once and spell it (upper and lower case) the same way within your program.</p>

</section><section id="id16449305">
<h3>Industry Rules</h3>
Almost all programming languages and most coding shops have a standard code formatting style guide programmers are expected to follow. Among these are three common identifier casing standards:
<ul>
 	<li>camelCase - each word is capitalized except the first word, with no intervening spaces</li>
 	<li>PascalCase - each word is capitalized including the first word, with no intervening spaces</li>
 	<li>snake_case - each word is lowercase with underscores separating words</li>
</ul>
C++, Java, and JavaScript typically use camelCase, with PascalCase reserved for libraries and classes. C# uses primarily PascalCase with camelCase parameters. Python uses snake_case for most identifiers. In addition, the following rules apply:
<ul>
 	<li>Do not start with underscore (used for technical programming)</li>
 	<li>CONSTANTS IN ALL UPPER CASE (often UPPER_SNAKE_CASE).</li>
</ul>
<p id="id15806431">These rules are decided by the industry (those who are using the programming language).</p>

</section><section id="id4945458">
<h2>Key Terms</h2>
<dl id="fs-id1167291138671">
 	<dt><section id="id4945458">
<dl id="fs-id1167291138671">
 	<dt>camel case</dt>
 	<dd id="fs-id1167288180141">The practice of writing compound words or phrases such that each word or abbreviation in the middle of the phrase begins with a capital letter, with no intervening spaces or punctuation.</dd>
</dl>
</section>
<dl id="fs-id1167291138671">
 	<dt>
<dl id="fs-id1167291138671">
 	<dt>Pascal case</dt>
 	<dd id="fs-id1167288180141">The practice of writing compound words or phrases such that each word or abbreviation in the phrase begins with a capital letter, including the first letter, with no intervening spaces or punctuation.</dd>
</dl>
reserved word</dt>
 	<dd id="fs-id1167288180141">Words that cannot be used by the programmer as identifier names because they already have a specific meaning within the programming language.</dd>
</dl>
snake case</dt>
 	<dd id="fs-id1167288180141">The practice of writing compound words or phrases in which the elements are separated with one underscore character (_) and no spaces, with each element's initial letter usually lowercased within the compound and the first letter either upper or lower case.</dd>
</dl>
</section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>121</wp:post_id>
		<wp:post_date><![CDATA[2018-06-14 01:32:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-14 01:32:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[identifier-names]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="dbraunsc"><![CDATA[Dave Braunschweig]]></category>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Constants and Variables</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/constants-and-variables/</link>
		<pubDate>Thu, 14 Jun 2018 01:33:36 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=124</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Overview</h2>
A <strong>constant</strong> is a value that cannot be altered by the program during normal execution, i.e., the value is constant. When associated with an identifier, a constant is said to be "named," although the terms "constant" and "named constant" are often used interchangeably. This is contrasted with a <strong>variable</strong>, which is an identifier with a value that can be changed during normal execution, i.e., the value is variable.[footnote]<a href="https://en.wikipedia.org/wiki/Constant_(computer_programming)">Wikipedia: Constant (computer programming)</a>[/footnote]
<h2>Discussion</h2>
<h3>Understanding Constants</h3>
Various textbooks describe constants using different terminology. Added to the complexity are the explanations from various industry professionals will vary greatly. Let's see if we can clear it up.

A <strong>constant</strong> is a data item whose value cannot change during the program's execution. Thus, as its name implies – the value is constant.

A <strong>variable</strong> is a data item whose value can change during the program's execution. Thus, as its name implies – the value can vary.

Constants are used in two ways. They are:
<ol type="1">
 	<li>literal constant</li>
 	<li>defined constant</li>
</ol>
A literal constant is a <strong>value</strong> you type into your program wherever it is needed. Examples include the constants used for initializing a variable and constants used in lines of code:
<pre style="padding-left: 30px">21
12.34
'A'
"Hello world!"
false
null
</pre>
In addition to literal constants, most textbooks refer to symbolic constants or named constants as a constant represented by a name. Many programming languages use ALL CAPS to define named constants.
<table>
<tbody>
<tr>
<th>Language</th>
<th>Example</th>
</tr>
<tr>
<td>C++</td>
<td><code>#define PI 3.14159</code>
or
<code>const double PI = 3.14159;
</code></td>
</tr>
<tr>
<td>C#</td>
<td><code>const double PI = 3.14159;
</code></td>
</tr>
<tr>
<td>Java</td>
<td><code>const double PI = 3.14159;
</code></td>
</tr>
<tr>
<td>JavaScript</td>
<td><code>const PI = 3.14159;
</code></td>
</tr>
<tr>
<td>Python</td>
<td><code>PI = 3.14159</code></td>
</tr>
</tbody>
</table>
Technically, Python does not support named constants, meaning that it is possible (but never good practice) to change the value of a constant later. There are workarounds, but they are beyond the scope of a first-semester textbook.
<h3>Defining Constants and Variables</h3>
Named constants must be assigned a value when they are defined. Variables do not have to be assigned initial values. Variables once defined may be assigned a value within the instructions of the program.
<table>
<tbody>
<tr>
<th>Language</th>
<th>Example</th>
</tr>
<tr>
<td>C++</td>
<td><code>double value = 3;</code></td>
</tr>
<tr>
<td>C#</td>
<td><code>double value = 3;</code></td>
</tr>
<tr>
<td>Java</td>
<td><code>double value = 3;</code></td>
</tr>
<tr>
<td>JavaScript</td>
<td><code>var value = 3;
let value = 3;</code></td>
</tr>
<tr>
<td>Python</td>
<td><code>value = 3</code></td>
</tr>
</tbody>
</table>
<h2>Key Terms</h2>
<dl>
 	<dt>constant</dt>
 	<dd>A data item whose value cannot change during the program's execution.</dd>
</dl>
<dl>
 	<dt>variable</dt>
 	<dd>A data item whose value can change during the program's execution.</dd>
</dl>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>124</wp:post_id>
		<wp:post_date><![CDATA[2018-06-14 01:33:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-14 01:33:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[constants-and-variables]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="dbraunsc"><![CDATA[Dave Braunschweig]]></category>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Data Processing</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/data-processing/</link>
		<pubDate>Thu, 14 Jun 2018 01:34:59 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=126</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Overview</h2>
<strong>Data processing</strong> is, generally, the collection and manipulation of items of data to produce meaningful information. In this sense it can be considered a subset of information processing, the change (processing) of information in any manner detectable by an observer.[footnote]<a href="https://en.wikipedia.org/wiki/Data_processing">Wikipedia: Data processing</a>[/footnote]

The order of operations (or operator precedence) is a collection of rules that reflect conventions about which procedures to perform first in order to evaluate a given mathematical expression.[footnote]<a href="https://en.wikipedia.org/wiki/Order_of_operations">Wikipedia: Order of operations</a>[/footnote]
<h2>Discussion</h2>
Single values by themselves are important; however we need a method of manipulating values (processing data). Scientists wanted an accurate machine for manipulating values. They wanted a machine to process numbers or calculate answers (that is compute the answer). Prior to 1950, dictionaries listed the definition of computers as " humans that do computations". Thus, all of the terminology for describing data manipulation is math oriented. Additionally, the two fundamental data type families (the integer family and floating-point family) consist entirely of number values.
<h3>An Expression Example with Evaluation</h3>
Let's look at an example: 2 + 3 * 4 + 5 is our expression but what does it equal?
<ol type="1">
 	<li>the symbols of + meaning addition and * meaning multiplication are our operators</li>
 	<li>the values 2, 3, 4 and 5 are our operands</li>
 	<li>precedence says that multiplication is higher than addition</li>
 	<li>thus, we evaluate the 3 * 4 to get 12</li>
 	<li>now we have: 2 + 12 + 5</li>
 	<li>the associativity rules say that addition goes left to right, thus we evaluate the 2 +12 to get 14</li>
 	<li>now we have: 14 + 5</li>
 	<li>finally, we evaluate the 14 + 5 to get 19; which is the value of the expression</li>
</ol>
Parentheses would change the outcome. (2 + 3) * (4 + 5) evaluates to 45.

Parentheses would change the outcome. (2 + 3) * 4 + 5 evaluates to 25.
<h3>Precedence of Operators Chart</h3>
Each computer language has some rules that define precedence and associativity. They often follow rules we may have already learned. Multiplication and division come before addition and subtraction is a rule we learned in grade school. This rule still works.

Order of Operations[footnote]<a href="https://en.wikipedia.org/wiki/Order_of_operations">Wikipedia: Order of operations</a>[/footnote]
<ul>
 	<li>Parentheses</li>
 	<li>Exponents</li>
 	<li>Multiplication / Division</li>
 	<li>Addition / Subtraction</li>
</ul>
A common mnemonic to remember this rule is <em>PEMDAS</em>, or <em>Please Excuse My Dear Aunt Sally</em>. Precedence rules may vary from one programming language to another. You should refer to the reference sheet that summarizes the rules for the language that you are using. It is often called a Precedence of Operators or Order of Operations chart. You should review this chart as needed when evaluating expressions.

A valid expression consists of operand(s) and operator(s) that are put together properly. Why the (s)? Some operators are:
<ol type="1">
 	<li>Unary – that is only have one operand</li>
 	<li>Binary – that is have two operands, one on each side of the operator</li>
 	<li>Trinary – which has two operator symbols that separate three operands</li>
</ol>
Most operators are binary, that is they require two operands. Some precedence charts indicate of which operators are unary and trinary and thus all others are binary.
<h2>Key Terms</h2>
<dl>
 	<dt>associativity</dt>
 	<dd>Determines the order in which the operators of the same precedence are allowed to manipulate the operands.</dd>
</dl>
<dl>
 	<dt>evaluation</dt>
 	<dd>The process of applying the operators to the operands and resulting in a single value.</dd>
</dl>
<dl>
 	<dt>expression</dt>
 	<dd>A valid sequence of operand(s) and operator(s) that reduces (or evaluates) to a single value.</dd>
</dl>
<dl>
 	<dt>operand</dt>
 	<dd>A value that receives the operator's action.</dd>
</dl>
<dl>
 	<dt>operator</dt>
 	<dd>A language-specific syntactical token (usually a symbol) that causes an action to be taken on one or more operands.</dd>
</dl>
<dl>
 	<dt>parentheses</dt>
 	<dd>Change the order of evaluation in an expression. You do what's in the parentheses first.</dd>
</dl>
<dl>
 	<dt>precedence</dt>
 	<dd>Determines the order in which the operators are allowed to manipulate the operands.</dd>
</dl>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>126</wp:post_id>
		<wp:post_date><![CDATA[2018-06-14 01:34:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-14 01:34:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[data-processing]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="dbraunsc"><![CDATA[Dave Braunschweig]]></category>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[data-manipulation]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Assignment</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/assignment/</link>
		<pubDate>Thu, 14 Jun 2018 01:35:52 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=128</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id1164502438256">
<h2>Overview</h2>
An <strong>assignment</strong> statement sets and/or re-sets the value stored in the storage location(s) denoted by a variable name; in other words, it copies a value into the variable.[footnote]<a href="https://en.wikipedia.org/wiki/Assignment_(computer_science)">Wikipedia: Assignment (computer science)</a>[/footnote]
<h2>Discussion</h2>
<p id="id1164502174744">The assignment operator allows us to change the value of a modifiable data object (for beginning programmers this typically means a variable). It is associated with the concept of moving a value into the storage location (again usually a variable). Within most programming languages the symbol used for assignment is the equal symbol. But bite your tongue, when you see the = symbol you need to start thinking: assignment. The assignment operator has two operands. The one to the left of the operator is usually an identifier name for a variable. The one to the right of the operator is a value.</p>

<div id="fs-id6857034" class="ui-has-child-title"><header>
<div>Simple Assignment</div>
</header><section>
<pre id="fs-id3534744"><code>age = 21</code></pre>
</section></div>
<p id="id1164508961138">The value 21 is moved to the memory location for the variable named: age. Another way to say it: age is assigned the value 21.</p>

<div id="fs-id1164502412560" class="ui-has-child-title"><header>
<div>Assignment with an Expression</div>
</header><section>
<pre id="fs-id1164504236487"><code>total_cousins = 4 + 3 + 5 + 2</code></pre>
</section></div>
<p id="id1164504255414">The item to the right of the assignment operator is an expression. The expression will be evaluated and the answer is 14. The value 14 would assigned to the variable named: total_cousins.</p>

<div id="fs-id1164507001180" class="ui-has-child-title"><header>
<div>Assignment with Identifier Names in the Expression</div>
</header><section>
<pre id="fs-id1164500673819"><code>students_period_1 = 25
students_period_2 = 19
total_students = students_period_1 + students_period_2;</code></pre>
</section></div>
<p id="id6283767">The expression to the right of the assignment operator contains some identifier names. The program would fetch the values stored in those variables; add them together and get a value of 44; then assign the 44 to the total_students variable.</p>

</section><section id="id1164508383396">
<h2>Key Terms</h2>
<dl id="fs-id3854083">
 	<dt>assignment</dt>
 	<dd id="fs-id6126093">An operator that changes the value of a modifiable data object.</dd>
</dl>
</section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>128</wp:post_id>
		<wp:post_date><![CDATA[2018-06-14 01:35:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-14 01:35:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[assignment]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>10</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[assignment-operator]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Arithmetic Operators</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/arithmetic-operators/</link>
		<pubDate>Thu, 14 Jun 2018 01:36:49 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=130</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Overview</h2>
The basic <strong>arithmetic operations</strong> are addition, subtraction, multiplication and division. Arithmetic is performed according to an order of operations.[footnote]<a href="https://en.wikipedia.org/wiki/Arithmetic#Arithmetic_operations">Wikipedia: Arithmetic operators</a>[/footnote]
<h2>Discussion</h2>
An operator performs an action on one or more operands. The common arithmetic operators are:
<table>
<tbody>
<tr>
<td><strong>Action</strong></td>
<td><strong>Common Symbol</strong></td>
</tr>
<tr>
<td>Addition</td>
<td><code>+</code></td>
</tr>
<tr>
<td>Subtraction</td>
<td><code>-</code></td>
</tr>
<tr>
<td>Multiplication</td>
<td><code>*</code></td>
</tr>
<tr>
<td>Division</td>
<td><code>/</code></td>
</tr>
<tr>
<td>Modulus (associated with integers)</td>
<td><code>%</code></td>
</tr>
</tbody>
</table>
These arithmetic operators are binary that is they have two operands. The operands may be either constants or variables.

<code>age + 1</code>

This expression consists of one operator (addition) which has two operands. The first is represented by a variable named age and the second is a literal constant. If age had a value of 14 then the expression would evaluate (or be equal to) 15.

These operators work as you have learned them throughout your life with the exception of division and modulus. We normally think of division as resulting in an answer that might have a fractional part (a floating-point data type). However, division when both operands are of the integer data type act differently. Please refer to the supplemental materials on "Integer Division and Modulus".
<h2>Arithmetic Assignment Operators</h2>
Many programming languages support a combination of the assignment (<code>=</code>) and arithmetic operators (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>). Various textbooks call them "compound assignment operators" or "combined assignment operators". Their usage can be explained in terms of the assignment operator and the arithmetic operators. In the table we will use the variable age and you can assume that it is of integer data type.
<table id="id45453363" style="height: 144px" summary="">
<tbody>
<tr style="height: 24px">
<td style="height: 24px;width: 276px">Arithmetic assignment examples:</td>
<td style="height: 24px;width: 158px">Equivalent code:</td>
</tr>
<tr style="height: 24px">
<td style="height: 24px;width: 276px"><code>age += 14;</code></td>
<td style="height: 24px;width: 158px"><code>age = age + 14;</code></td>
</tr>
<tr style="height: 24px">
<td style="height: 24px;width: 276px"><code>age -= 14;</code></td>
<td style="height: 24px;width: 158px"><code>age = age - 14;</code></td>
</tr>
<tr style="height: 24px">
<td style="height: 24px;width: 276px"><code>age *= 14;</code></td>
<td style="height: 24px;width: 158px"><code>age = age * 14;</code></td>
</tr>
<tr style="height: 24px">
<td style="height: 24px;width: 276px"><code>age /= 14;</code></td>
<td style="height: 24px;width: 158px"><code>age = age / 14;</code></td>
</tr>
<tr style="height: 24px">
<td style="height: 24px;width: 276px"><code>age %= 14;</code></td>
<td style="height: 24px;width: 158px"><code>age = age % 14;</code></td>
</tr>
</tbody>
</table>
<h2>Pseudocode</h2>
<pre>Function Main
    ... This program demonstrates 
    ... arithmetic operations.
    Declare Integer a
    Declare Integer b
    
    Assign a = 3
    Assign b = 2
    Output "a = " &amp; a
    Output "b = " &amp; b
    Output "a + b = " &amp; a + b
    Output "a - b = " &amp; a - b
    Output "a * b = " &amp; a * b
    Output "a / b = " &amp; a / b
    Output "a % b = " &amp; a % b
End

Output:
a = 3
b = 2
a + b = 5
a - b = 1
a * b = 6
a / b = 1.5
a % b = 1
</pre>
<h2>Flowchart</h2>
<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/34/Flowgorithm_Arithmetic.svg/333px-Flowgorithm_Arithmetic.svg.png" alt="File:Flowgorithm Arithmetic.svg" />
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>130</wp:post_id>
		<wp:post_date><![CDATA[2018-06-14 01:36:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-14 01:36:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[arithmetic-operators]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>11</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="dbraunsc"><![CDATA[Dave Braunschweig]]></category>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Data Type Conversions</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/data-type-conversions/</link>
		<pubDate>Thu, 14 Jun 2018 01:38:05 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=132</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Overview</h2>
Changing a data type of a value is referred to as "type conversion".  There are two ways to do this:
<ol>
 	<li><strong>Implicit</strong> – the change is implied</li>
 	<li><strong>Explicit</strong> – the change is explicitly done with an operator or function</li>
</ol>
The value being changed may be:
<ol>
 	<li><strong>Promotion</strong> – going from a smaller domain to a larger domain</li>
 	<li><strong>Demotion</strong> – going from a larger domain to a smaller domain</li>
</ol>
<h2>Discussion</h2>
<h3>Implicit Type Conversion</h3>
Automatic conversion of a value from one data type to another by a programming language, without the programmer specifically doing so, is called implicit type conversion.  It happens when ever a binary operator has two operands of different data types. Depending on the operator, one of the operands is going to be converted to the data type of the other. It could be promoted or demoted depending on the operator.

Implicit Promotion
<pre><code>55 + 1.75</code></pre>
In this example the integer value 55 is converted to a floating-point value (most likely double) of 55.0. It was promoted.

Implicit Demotion

In programming languages that have explicit integer data types (C++, C#, Java), care must be taken to avoid implicit demotion. For example:

<code>int money;</code>
<code>money = 23.16;</code><code></code>

In this example the variable money is an integer. We are trying to move a floating-point value 23.16 into an integer storage location. This is demotion and the floating-point value usually gets truncated to 23.
<h3>Promotion</h3>
Promotion is never a problem because the lower data type (smaller range of allowable values) is sub set of the higher data type (larger range of allowable values).  Promotion often occurs with three of the standard data types: character, integer and floating-point. The allowable values (or domains) progress from one type to another.  That is the character data type values are a sub set of integer values and integer values are a sub set of floating-point values; and within the floating-point values: float values are a sub set of double.  Even though character data represent the alphabetic letters, numeral digits (0 to 9) and other symbols (a period, $, comma, etc.) their bit pattern also represent integer values from 0 to 255.  This progression allows us to promote them up the chain from character to integer to float to double.
<h3>Demotion</h3>
Demotion represents a potential problem with truncation or unpredictable results often occurring.  How do you fit an integer value of 456 into a character value?  How do you fit the floating-point value of 45656.453 into an integer value? Most compilers give a warning if it detects demotion happening. A compiler warning does not stop the compilation process. It does warn the programmer to check to see if the demotion is reasonable.

If I calculate the number of cans of soup to buy based on the number of people I am serving (say 8) and the servings per can (say 2.3), I would need 18.4 cans. I might want to demote the 18.4 into an integer. It would truncate the 18.4 into 18 and because the value 18 is within the domain of an integer data type, it should demote with the <strong>truncation</strong> side effect.

If I tried demoting a double that contained the number of stars in the Milky Way galaxy into an integer, I might have a get an <strong>unpredictable result</strong> (assuming the number of stars is larger than allowable values within the integer domain).
<h3>Explicit Type Conversion</h3>
Most languages have a method for the programmer to change or cast a value from one data type to another; called <strong>explicit type conversion</strong>. Some languages support a cast operator. The cast operator is a unary operator; it only has one operand and the operand is to the right of the operator. The operator is a set of parentheses surrounding the new data type. Other languages have functions that perform explicit type conversion. In each of the following examples, the expression value would be 3.
<table>
<tbody>
<tr>
<th>Language</th>
<th>Floating-Point to Integer Type Conversion Example</th>
</tr>
<tr>
<td>C++</td>
<td><code>(int) 3.14</code></td>
</tr>
<tr>
<td>C#</td>
<td><code>Convert.ToInt32(3.14)</code></td>
</tr>
<tr>
<td>Java</td>
<td><code>Math.floor(3.14)</code></td>
</tr>
<tr>
<td>JavaScript</td>
<td><code>Math.floor(3.14)</code></td>
</tr>
<tr>
<td>Python</td>
<td><code>int(3.14)</code></td>
</tr>
</tbody>
</table>
In each of the following examples, the expression value would be 3.14.
<table>
<tbody>
<tr>
<th>Language</th>
<th>String to Floating-Point Type Conversion Example</th>
</tr>
<tr>
<td>C++</td>
<td><code>#include &lt;string.h&gt;
std::stod("3.14")</code></td>
</tr>
<tr>
<td>C#</td>
<td><code>Convert.ToDouble("3.14")</code></td>
</tr>
<tr>
<td>Java</td>
<td><code>Double.parseDouble("3.14")</code></td>
</tr>
<tr>
<td>JavaScript</td>
<td><code>parseFloat("3.14")</code></td>
</tr>
<tr>
<td>Python</td>
<td><code>float("3.14")</code></td>
</tr>
</tbody>
</table>
<h2>Key Terms</h2>
<dl>
 	<dt>demotion</dt>
 	<dd>Going from a larger domain to a smaller domain.</dd>
</dl>
<dl>
 	<dt>explicit</dt>
 	<dd>Changing a value's data type with the cast operator.</dd>
</dl>
<dl>
 	<dt>implicit</dt>
 	<dd>A value that has its data type changed automatically.</dd>
</dl>
<dl>
 	<dt>promotion</dt>
 	<dd>Going from a smaller domain to a larger domain.</dd>
</dl>
<dl>
 	<dt>truncation</dt>
 	<dd>The fractional part of a floating-point data type that is dropped when converted to an integer.</dd>
</dl>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>132</wp:post_id>
		<wp:post_date><![CDATA[2018-06-14 01:38:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-14 01:38:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[data-type-conversions]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>14</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="dbraunsc"><![CDATA[Dave Braunschweig]]></category>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Puzzle pieces</title>
		<link>https://press.rebus.community/programmingfundamentals/puzzle-pieces/</link>
		<pubDate>Sat, 16 Jun 2018 16:42:16 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/app/uploads/sites/136/2018/06/puzzle-pieces.png</guid>
		<description></description>
		<content:encoded><![CDATA[Puzzle pieces - CC0 by MsReadIt, downloaded from https://openclipart.org/detail/231093/puzzle-pieces]]></content:encoded>
		<excerpt:encoded><![CDATA[Puzzle pieces]]></excerpt:encoded>
		<wp:post_id>138</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 16:42:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 16:42:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[puzzle-pieces]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://press.rebus.community/app/uploads/sites/136/2018/06/puzzle-pieces.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/06/puzzle-pieces.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1688;s:6:"height";i:2625;s:4:"file";s:25:"2018/06/puzzle-pieces.png";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"puzzle-pieces-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:25:"puzzle-pieces-193x300.png";s:5:"width";i:193;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:26:"puzzle-pieces-768x1194.png";s:5:"width";i:768;s:6:"height";i:1194;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:26:"puzzle-pieces-658x1024.png";s:5:"width";i:658;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";}s:14:"pb_cover_small";a:4:{s:4:"file";s:24:"puzzle-pieces-65x101.png";s:5:"width";i:65;s:6:"height";i:101;s:9:"mime-type";s:9:"image/png";}s:15:"pb_cover_medium";a:4:{s:4:"file";s:25:"puzzle-pieces-225x350.png";s:5:"width";i:225;s:6:"height";i:350;s:9:"mime-type";s:9:"image/png";}s:14:"pb_cover_large";a:4:{s:4:"file";s:25:"puzzle-pieces-350x544.png";s:5:"width";i:350;s:6:"height";i:544;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_image_alt]]></wp:meta_key>
			<wp:meta_value><![CDATA[puzzle pieces]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cover</title>
		<link>https://press.rebus.community/programmingfundamentals/cover-2/</link>
		<pubDate>Sat, 16 Jun 2018 18:04:09 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/app/uploads/sites/136/2018/06/cover.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>282</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:04:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:04:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cover-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[https://press.rebus.community/app/uploads/sites/136/2018/06/cover.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/06/cover.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:2500;s:6:"height";i:3750;s:4:"file";s:17:"2018/06/cover.jpg";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"cover-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:17:"cover-200x300.jpg";s:5:"width";i:200;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:18:"cover-768x1152.jpg";s:5:"width";i:768;s:6:"height";i:1152;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:18:"cover-683x1024.jpg";s:5:"width";i:683;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";}s:14:"pb_cover_small";a:4:{s:4:"file";s:15:"cover-65x98.jpg";s:5:"width";i:65;s:6:"height";i:98;s:9:"mime-type";s:10:"image/jpeg";}s:15:"pb_cover_medium";a:4:{s:4:"file";s:17:"cover-225x338.jpg";s:5:"width";i:225;s:6:"height";i:338;s:9:"mime-type";s:10:"image/jpeg";}s:14:"pb_cover_large";a:4:{s:4:"file";s:17:"cover-350x525.jpg";s:5:"width";i:350;s:6:"height";i:525;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Abbreviated Precedence Chart for C++ Operators</title>
		<link>https://press.rebus.community/programmingfundamentals/back-matter/abbreviated-precedence-chart-for-c-operators__trashed/</link>
		<pubDate>Sat, 16 Jun 2018 18:24:06 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=back-matter&#038;p=325</guid>
		<description></description>
		<content:encoded><![CDATA[<p id="id1166980153528">An <span>operator</span> is a language-specific syntactical token (one or more symbols) that causes an action to be taken on one or more operands. The following item provides an abbreviated list of those C++ operators that are typically taught in a programming fundamentals course that teaches modular structured programming concepts.</p>
<p id="id4144077">The first column shows the precedence (the higher precedence is 1 or it goes first) and operators that have the same precedence also have the same associativity (the associativity is only listed once for the group of operators). Decrement is two minus signs, but some word processing software programs might have problems printing two minus signs and convert it to a double dash. Insertion (two &lt; signs) and extraction (two &gt; signs) might also have printing problems. These printing problems are noted in the comments with <strong>emphasized</strong> text.</p>

<table id="id1166982036752" summary="">
<tbody>
<tr>
<td><strong>PR</strong></td>
<td><strong>OPERATOR NAME</strong></td>
<td><strong>SYMBOL(S)</strong></td>
<td><strong>COMMENTS</strong></td>
<td><strong>ASSOICIATIVITY</strong></td>
<td><strong>CONNEXIONS</strong><strong>MODULE</strong></td>
</tr>
<tr>
<td>1</td>
<td>function call</td>
<td>()</td>
<td></td>
<td>Left to Right</td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:614f8ea8-b14e-4271-89c5-ddcab0183675@10">m19145</a></td>
</tr>
<tr>
<td>1</td>
<td>index</td>
<td>[]</td>
<td>aka array index</td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:f9cadf7b-bbc5-43d1-8869-d3f5a0720316">m21316</a></td>
</tr>
<tr>
<td>2</td>
<td>class member</td>
<td>.</td>
<td>a period</td>
<td>Right to Left</td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:4235cdfa-7320-4bfd-be4e-89b2b352e160">m20796</a></td>
</tr>
<tr>
<td>2</td>
<td>postfix increment</td>
<td>++</td>
<td>unary</td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:e6cbde34-8f6d-46c1-a8ed-1f9b26721252">m20499</a></td>
</tr>
<tr>
<td>2</td>
<td>postfix decrement</td>
<td>--</td>
<td>unary, <strong>two minus signs</strong></td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:e6cbde34-8f6d-46c1-a8ed-1f9b26721252">m20499</a></td>
</tr>
<tr>
<td>3</td>
<td>indirection</td>
<td>*</td>
<td>unary, aka dereference</td>
<td>Right to Left</td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:8324224c-3582-410e-bc88-cf382eab3af1">m22152</a></td>
</tr>
<tr>
<td>3</td>
<td>address</td>
<td>&amp;</td>
<td>unary</td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:8d6d0d4f-2098-4959-9739-484dc60af8f3">m22148</a></td>
</tr>
<tr>
<td>3</td>
<td>unary positive</td>
<td>+</td>
<td>unary, aka plus</td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:d3a6d075-aecd-4776-b139-e608620ecc4f">m20501</a></td>
</tr>
<tr>
<td>3</td>
<td>unary negative</td>
<td>-</td>
<td>unary, aka minus</td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:d3a6d075-aecd-4776-b139-e608620ecc4f">m20501</a></td>
</tr>
<tr>
<td>3</td>
<td>prefix increment</td>
<td>++</td>
<td>unary</td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:e6cbde34-8f6d-46c1-a8ed-1f9b26721252">m20499</a></td>
</tr>
<tr>
<td>3</td>
<td>prefix decrement</td>
<td>--</td>
<td>unary, <strong>two minus signs</strong></td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:e6cbde34-8f6d-46c1-a8ed-1f9b26721252">m20499</a></td>
</tr>
<tr>
<td>3</td>
<td>cast</td>
<td>(type)</td>
<td>unary</td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:35ea5e0a-ff9a-48b0-8740-588edb0e2f40@7">m18744</a></td>
</tr>
<tr>
<td>3</td>
<td>sizeof</td>
<td>sizeof (type)</td>
<td>unary</td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:b8dd0f6d-c7d8-460e-b693-7ab0931bc4fb">m18736</a></td>
</tr>
<tr>
<td>3</td>
<td>logical NOT</td>
<td>!</td>
<td>unary</td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:262f60cd-62b3-43de-9ee6-e0d589f7714a">m19847</a></td>
</tr>
<tr>
<td>4</td>
<td>multiply</td>
<td>*</td>
<td></td>
<td>Left to Right</td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:b95afa19-1f40-496a-8010-daf7ca6b7191@4">m18706</a></td>
</tr>
<tr>
<td>4</td>
<td>divide</td>
<td>/</td>
<td></td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:b95afa19-1f40-496a-8010-daf7ca6b7191@4">m18706</a></td>
</tr>
<tr>
<td>4</td>
<td>modulus</td>
<td>%</td>
<td>remainder</td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:b95afa19-1f40-496a-8010-daf7ca6b7191@4">m18706</a></td>
</tr>
<tr>
<td>5</td>
<td>add</td>
<td>+</td>
<td></td>
<td>Left to Right</td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:b95afa19-1f40-496a-8010-daf7ca6b7191@4">m18706</a></td>
</tr>
<tr>
<td>5</td>
<td>subtract</td>
<td>-</td>
<td></td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:b95afa19-1f40-496a-8010-daf7ca6b7191@4">m18706</a></td>
</tr>
<tr>
<td>6</td>
<td>insertion</td>
<td>&lt;&lt;</td>
<td>writing, <strong>two less than signs</strong></td>
<td>Left to Right</td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:0a7d9df6-a818-4672-b671-bacff92c3eb8@5">m18835</a></td>
</tr>
<tr>
<td>6</td>
<td>extraction</td>
<td>&gt;&gt;</td>
<td>reading, <strong>two greater than signs</strong></td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:0a7d9df6-a818-4672-b671-bacff92c3eb8@5">m18835</a></td>
</tr>
<tr>
<td>7</td>
<td>less than</td>
<td>&lt;</td>
<td></td>
<td>Left to Right</td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:27dee7f9-5b89-49f2-8c93-c8e3583b22e5">m19549</a></td>
</tr>
<tr>
<td>7</td>
<td>greater than</td>
<td>&gt;</td>
<td></td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:27dee7f9-5b89-49f2-8c93-c8e3583b22e5">m19549</a></td>
</tr>
<tr>
<td>7</td>
<td>less than or equal to</td>
<td>&lt;=</td>
<td></td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:27dee7f9-5b89-49f2-8c93-c8e3583b22e5">m19549</a></td>
</tr>
<tr>
<td>7</td>
<td>greater than or equal to</td>
<td>&gt;=</td>
<td></td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:27dee7f9-5b89-49f2-8c93-c8e3583b22e5">m19549</a></td>
</tr>
<tr>
<td>8</td>
<td>equality</td>
<td>==</td>
<td>equal to</td>
<td>Left to Right</td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:27dee7f9-5b89-49f2-8c93-c8e3583b22e5">m19549</a></td>
</tr>
<tr>
<td>8</td>
<td>inequality</td>
<td>!=</td>
<td>not equal to</td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:27dee7f9-5b89-49f2-8c93-c8e3583b22e5">m19549</a></td>
</tr>
<tr>
<td>9</td>
<td>logical AND</td>
<td>&amp;&amp;</td>
<td></td>
<td>Left to Right</td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:262f60cd-62b3-43de-9ee6-e0d589f7714a">m19847</a></td>
</tr>
<tr>
<td>10</td>
<td>logical OR</td>
<td>||</td>
<td></td>
<td>Left to Right</td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:262f60cd-62b3-43de-9ee6-e0d589f7714a">m19847</a></td>
</tr>
<tr>
<td>11</td>
<td>conditional</td>
<td>? :</td>
<td>trinary</td>
<td>Left to Right</td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:bc1d4e2f-db31-47ff-b243-449495fa6dfc">m20811</a></td>
</tr>
<tr>
<td>12</td>
<td>assignment</td>
<td>=</td>
<td></td>
<td>Right to Left</td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:21c64adb-cce1-45cd-8608-d89572cfa1e3@4">m18725</a></td>
</tr>
<tr>
<td>12</td>
<td>addition assignment</td>
<td>+=</td>
<td></td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:45274e9b-7adf-4589-b427-17e31c90b576@7">m18743</a></td>
</tr>
<tr>
<td>12</td>
<td>subtraction assignment</td>
<td>-=</td>
<td></td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:45274e9b-7adf-4589-b427-17e31c90b576@7">m18743</a></td>
</tr>
<tr>
<td>12</td>
<td>multiplication assignment</td>
<td>*=</td>
<td></td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:45274e9b-7adf-4589-b427-17e31c90b576@7">m18743</a></td>
</tr>
<tr>
<td>12</td>
<td>division assignment</td>
<td>/=</td>
<td></td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:45274e9b-7adf-4589-b427-17e31c90b576@7">m18743</a></td>
</tr>
<tr>
<td>12</td>
<td>modulus assignment</td>
<td>%=</td>
<td></td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:45274e9b-7adf-4589-b427-17e31c90b576@7">m18743</a></td>
</tr>
<tr>
<td>13</td>
<td>sequence or comma</td>
<td>,</td>
<td></td>
<td>Left to Right</td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:daea26a9-29f8-4388-85d2-8a8c3dac44b9">m18690</a></td>
</tr>
</tbody>
</table>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>325</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:24:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:24:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[abbreviated-precedence-chart-for-c-operators__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[back-matter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="back-matter-type" nicename="appendix"><![CDATA[Appendix]]></category>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1529173625]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[abbreviated-precedence-chart-for-c-operators]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>C++ Reserved Keywords</title>
		<link>https://press.rebus.community/programmingfundamentals/back-matter/__trashed/</link>
		<pubDate>Sat, 16 Jun 2018 18:26:07 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=back-matter&#038;p=326</guid>
		<description></description>
		<content:encoded><![CDATA[<p id="id3551034">All programming languages have "reserved words". There are usually less than 50 of these reserved words in any given programming language. They are reserved because they have been pre-assigned a specific meaning within that programming language, thus the compiler recognizes those words to mean a specific thing or action. Within C++ the reserved words are also known as "keywords".</p>
<p id="id14609578">Programmers use identifier names for a variety of items, to include: functions, variables, named constants, alias names, etc. But, they can't use as identifier names the words that are "reserved to the language".</p>
<p id="id18990018">For the C++ language all "reserved keywords" are typed in lower case. The list that follows includes the American National Standards Institute (ANSI) and the International Organization for Standardization (ISO) lists of reserved words for the C++ programming language. The ISO reserved words may not be implemented in the compiler that you are using, however they may be adopted in future releases of C++ compilers. Wisdom dictates to avoid using them at this point so that there will not be a problem compiling your source code in future releases of compilers. There has been no distinction made in the ANSI or ISO reserved word lists. A search of the Internet for C++ reserved words will reveal several different lists. Some are more unique to a specific compiler. Some will be incomplete because the list has been enlarged. The talbe that follows should work for any beginning programming course using C++. The reserved keywords are:</p>

<table id="id18556217" summary="">
<tbody>
<tr>
<td>and</td>
<td>double</td>
<td>not_eq</td>
<td>throw</td>
</tr>
<tr>
<td>and_eq</td>
<td>dynamic_cast</td>
<td>operator</td>
<td>true</td>
</tr>
<tr>
<td>asm</td>
<td>else</td>
<td>or</td>
<td>try</td>
</tr>
<tr>
<td>auto</td>
<td>enum</td>
<td>or_eq</td>
<td>typedef</td>
</tr>
<tr>
<td>bitand</td>
<td>explicit</td>
<td>private</td>
<td>typeid</td>
</tr>
<tr>
<td>bitor</td>
<td>extern</td>
<td>protected</td>
<td>typename</td>
</tr>
<tr>
<td>bool</td>
<td>false</td>
<td>public</td>
<td>union</td>
</tr>
<tr>
<td>break</td>
<td>float</td>
<td>register</td>
<td>unsigned</td>
</tr>
<tr>
<td>case</td>
<td>fro</td>
<td>reinterpret-cast</td>
<td>using</td>
</tr>
<tr>
<td>catch</td>
<td>friend</td>
<td>return</td>
<td>virtual</td>
</tr>
<tr>
<td>char</td>
<td>goto</td>
<td>short</td>
<td>void</td>
</tr>
<tr>
<td>class</td>
<td>if</td>
<td>signed</td>
<td>volatile</td>
</tr>
<tr>
<td>compl</td>
<td>inline</td>
<td>sizeof</td>
<td>wchar_t</td>
</tr>
<tr>
<td>const</td>
<td>int</td>
<td>static</td>
<td>while</td>
</tr>
<tr>
<td>const-cast</td>
<td>long</td>
<td>static_cast</td>
<td>xor</td>
</tr>
<tr>
<td>continue</td>
<td>mutable</td>
<td>struct</td>
<td>xor_eq</td>
</tr>
<tr>
<td>default</td>
<td>namespace</td>
<td>switch</td>
<td></td>
</tr>
<tr>
<td>delete</td>
<td>new</td>
<td>template</td>
<td></td>
</tr>
<tr>
<td>do</td>
<td>not</td>
<td>this</td>
</tr>
</tbody>
</table>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>326</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:26:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:26:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[back-matter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[draft]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1529173567]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Practice: Data and Operators</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/practice-3/</link>
		<pubDate>Thu, 14 Jun 2018 01:39:02 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=134</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="textbox shaded">

Note to Contributors:

2nd Edition revision progress ends here.

</div>
<h2>Learning Objectives</h2>
<ol type="1">
 	<li>Understand key terms and definitions as listed in the modules associated with this chapter.</li>
 	<li>Understand basic data types and how operators manipulate data.</li>
 	<li>Given pseudocode and test data documents, write the C++ code for a program</li>
</ol>
<h2>Review Questions</h2>
True or false:
<ol>
 	<li>A data type defines a set of values and the set of operations that can be applied on those values.</li>
 	<li>Reserved or key words can be used as identifier names.</li>
 	<li>The concept of precedence says that some operators (like multiplication and division) are to be executed before other operators (like addition and subtraction).</li>
 	<li>An operator that needs two operands, will promote one of the operands as needed to make both operands be of the same data type.</li>
 	<li>Parentheses change the precedence of operators.</li>
</ol>
Answers:
<ol>
 	<li>true</li>
 	<li>false</li>
 	<li>true</li>
 	<li>true</li>
 	<li>false – Parentheses change the order of evaluation in an expression.</li>
</ol>
<h2>Activities</h2>
<h4>Creating a Folder or Sub-Folder for Chapter 03 Files</h4>
Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:
<ul>
 	<li>Chapter_03 within the folder named: Cpp_Source_Code_Files</li>
</ul>
If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.
<h4>Download the Lab File(s)</h4>
Download and store the following file(s) to your storage device in the appropriate folder(s). You may need to right click on the link and select "Save Target As" in order to download the file.

Download from Connexions: <a href="https://cnx.org/resources/a253c50868568ef09290c279bb50801defac88fa/Solution_Lab_03_Pseudocode.txt">Solution_Lab_03_Pseudocode.txt</a>

Download from Connexions: <a href="https://cnx.org/resources/a8a9beb0d6ef69e034d755a827a79b30c1e5688d/Solution_Lab_03_Test_Data.txt">Solution_Lab_03_Test_Data.txt</a>
<h4>Detailed Lab Instructions</h4>
Read and follow the directions below carefully, and perform the steps in the order listed.
<ul>
 	<li>Navigate to your sub-folder: Chapter_03 and open and study the two files.</li>
 	<li>We have learned that a fundamental concept of interaction with computers is to divide the problem/task into three parts – input, processing and output.  This problem is simple and we will use the IPO (input – processing – output) approach again.  <strong>However this time we are going to think about it backwards.</strong></li>
</ul>
<ul>
 	<li><strong>What output do I want displayed? </strong></li>
 	<li>Number of gallons of paint</li>
 	<li>Total cost of the paint</li>
</ul>
<ul>
 	<li><strong>Thus, what calculations do I need to make?</strong></li>
 	<li>Total cost of the paint is the Number of gallons needed times price per gallon</li>
 	<li>Number of gallons needed is the Total area to be covered (let’s use square feet) divided by the coverage per gallon of paint (Note: you must round up to the next full gallon of paint.)</li>
 	<li>Total area to be covered is the Length times height times 2 added to the width times height times 2</li>
</ul>
<ul>
 	<li><strong>Which leads us to, what data do I need as input?</strong></li>
 	<li>Price of a gallon of paint</li>
 	<li>Number of square feet that a gallon will cover</li>
 	<li>Length of the house</li>
 	<li>Width of the house</li>
 	<li>Height of the house</li>
</ul>
<ul>
 	<li>You can see that by working the logic backwards, we can start to completely see what the program must do.  We need to enter some data (input), do some calculations (process) and display the results (output).</li>
 	<li>Copy into your sub-folder: Chapter_03 one of the source code listings that we have used (we suggest the Lab 01 source code) and rename the copy to: <strong>Lab_03.cpp</strong></li>
 	<li>Modify the code to follow the Solution_Lab_03_Pseudocode.txt file.</li>
 	<li>I am just going to give you the line of code for rounding up to the next whole gallon of paint (See the “Data Type Conversions” module within Chapter 3 of the Connexions materials. Do you understand why it works?).</li>
 	<li><strong>total_gal_paint = total_area / coverage_gal_paint + 0.9999;</strong></li>
 	<li>Build (compile and run) your program. You have successfully written this program when it runs with your test data and gives the predicted results.</li>
</ul>
<ul>
 	<li>After you have successfully written this program, if you are taking this course for college credit, follow the instructions from your professor/instructor for submitting it for grading.</li>
</ul>
<h3>Problems</h3>
<h4>Problem 03a – Instructions</h4>
Write the C++ code to do the following pseudocode example.
<div class="ui-has-child-title"><header>
<div>pseudocode</div>
</header>
<pre><code>
Prompt the user for his monthly income.
Get the users monthly income.
Multiply the monthly income by 12.
Display the annual income.
Pause the program so the user can see the answer. (HINT: You may call a function.)</code></pre>
</div>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>134</wp:post_id>
		<wp:post_date><![CDATA[2018-06-14 01:39:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-14 01:39:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[practice-3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>21</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Integer Data Type</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/integer-data-type/</link>
		<pubDate>Sat, 16 Jun 2018 16:49:15 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=140</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id1163998494795">
<h2>Overview</h2>
An <strong>integer data type</strong> represents some range of mathematical integers. Integral data types may be of different sizes and may or may not be allowed to contain negative values. Integers are commonly represented in a computer as a group of binary digits (bits). The size of the grouping varies so the set of integer sizes available varies between different types of computers and different programming languages.[footnote]<a href="https://en.wikipedia.org/wiki/Integer_(computer_science)">Wikipedia: Integer (computer science)</a>[/footnote]
<h2>Discussion</h2>
<p id="id1164000708518">The integer data type basically represents whole numbers (no fractional parts). The integer values jump from one value to another. There is nothing between 6 and 7. It could be asked why not make all your numbers floating point which allow for fractional parts. The reason is twofold. First, some things in the real world are not fractional. A dog, even with only 3 legs, is still one (1) dog not ¾ of a dog. Second, integer data type is often used to control program flow by counting, thus the need for a data type that jumps from one value to another.</p>
<p id="id1164002820760">The integer data type has similar attributes and acts or behaves similarly in all programming languages that support it.</p>

<table>
<tbody>
<tr>
<th>Language</th>
<th>Reserved Word</th>
<th>Size</th>
<th>Range</th>
</tr>
<tr>
<td>C++</td>
<td><code>short</code></td>
<td>16 bits / 2 bytes</td>
<td>-32,768 to32,767</td>
</tr>
<tr>
<td>C++</td>
<td><code>int</code></td>
<td>varies</td>
<td>depends on compiler</td>
</tr>
<tr>
<td>C++</td>
<td><code>long</code></td>
<td>32 bits / 4 bytes</td>
<td>-2,147,483,648 to 2, 147,483,647</td>
</tr>
<tr>
<td>C++</td>
<td><code>long long</code></td>
<td>64 bits / 8 bytes</td>
<td>−9,223,372,036,854,775,808 to 9,223,372,036,854,775,807</td>
</tr>
<tr>
<td>C#</td>
<td><code>short</code></td>
<td>16 bits / 2 bytes</td>
<td>-32,768 to32,767</td>
</tr>
<tr>
<td>C#</td>
<td><code>int</code></td>
<td>32 bits / 4 bytes</td>
<td>-2,147,483,648 to 2, 147,483,647</td>
</tr>
<tr>
<td>C#</td>
<td><code>long</code></td>
<td>64 bits / 8 bytes</td>
<td>−9,223,372,036,854,775,808 to 9,223,372,036,854,775,807</td>
</tr>
<tr>
<td>Java</td>
<td><code>short</code></td>
<td>16 bits / 2 bytes</td>
<td>-32,768 to32,767</td>
</tr>
<tr>
<td>Java</td>
<td><code>int</code></td>
<td>32 bits / 4 bytes</td>
<td>-2,147,483,648 to 2, 147,483,647</td>
</tr>
<tr>
<td>Java</td>
<td><code>long</code></td>
<td>64 bits / 8 bytes</td>
<td>−9,223,372,036,854,775,808 to 9,223,372,036,854,775,807</td>
</tr>
<tr>
<td>JavaScript</td>
<td>N/A</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Python</td>
<td><code>int()</code></td>
<td></td>
<td>no limit</td>
</tr>
</tbody>
</table>
For C++ the size of a default integer varies with the complier being used and the computer. This effect is known as being <strong>machine dependent</strong>. These variations of the integer data type are an annoyance in C++ for a beginning programmer. For a beginning programmer it is more important to understand the general attributes of the integer data type that apply to most programming languages.

JavaScript does not support an integer data type, but the <code>Math.round()</code> function may be used to return the value of a number rounded to the nearest integer.[footnote]<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round">Mozilla: Math.round()</a>[/footnote]

Python 3 integers are not limited, however <code>sys.maxsize</code> may be used to determine the maximum practical size of a list or string index.[footnote]<a href="https://docs.python.org/3.1/whatsnew/3.0.html#integers">Python.org: Integers</a>[/footnote]

</section><section id="id1163998678445">
<h2>Key Terms</h2>
<dl id="fs-id1167337804148">
 	<dt>machine dependent</dt>
 	<dd id="fs-id1167339988253">An attribute of a programming language that changes depending on the computer's CPU.</dd>
</dl>
</section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>140</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 16:49:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 16:49:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[integer-data-type]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="dbraunsc"><![CDATA[Dave Braunschweig]]></category>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Floating-Point Data Type</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/floating-point-data-type/</link>
		<pubDate>Sat, 16 Jun 2018 16:50:22 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=142</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Overview</h2>
<strong>A floating-point data type</strong> uses a formulaic representation of real numbers as an approximation so as to support a trade-off between range and precision. For this reason, floating-point computation is often found in systems which include very small and very large real numbers, which require fast processing times. A number is, in general, represented approximately to a fixed number of significant digits and scaled using an exponent in some fixed base.[footnote]<a href="https://en.wikipedia.org/wiki/Floating-point_arithmetic">Wikipedia: Floating-point arithmetic</a>[/footnote]
<h2>Discussion</h2>
The floating-point data type is a family of data types that act alike and differ only in the size of their domains (the allowable values). The floating-point family of data types represent number values with fractional parts. They are technically stored as two integer values: a <strong>mantissa</strong> and an <strong>exponent</strong>. The floating-point family has the same attributes and acts or behaves similarly in all programming languages. They can always store negative or positive values thus they always are signed; unlike the integer data type that could be unsigned. The <strong>domain</strong> for floating-point data types varies because they could represent very large numbers or very small numbers. Rather than talk about the actual values, we mention the <strong>precision</strong>. The more bytes of storage the larger the mantissa and exponent, thus more precision.
<table>
<tbody>
<tr>
<th>Language</th>
<th>Reserved Word</th>
<th>Size</th>
<th>Precision</th>
<th>Range</th>
</tr>
<tr>
<td>C++</td>
<td><code>float</code></td>
<td>32 bits / 4 bytes</td>
<td>7 decimal digits</td>
<td>±3.40282347E+38</td>
</tr>
<tr>
<td>C++</td>
<td><code>double</code></td>
<td>64 bits / 8 bytes</td>
<td>15 decimal digits</td>
<td>±1.79769313486231570E+308</td>
</tr>
<tr>
<td>C#</td>
<td><code>float</code></td>
<td>32 bits / 4 bytes</td>
<td>7 decimal digits</td>
<td>±3.40282347E+38</td>
</tr>
<tr>
<td>C#</td>
<td><code>double</code></td>
<td>32 bits / 4 bytes</td>
<td>15 decimal digits</td>
<td>±1.79769313486231570E+308</td>
</tr>
<tr>
<td>Java</td>
<td><code>float</code></td>
<td>32 bits / 4 bytes</td>
<td>7 decimal digits</td>
<td>±3.40282347E+38</td>
</tr>
<tr>
<td>Java</td>
<td><code>double</code></td>
<td>32 bits / 4 bytes</td>
<td>15 decimal digits</td>
<td>±1.79769313486231570E+308</td>
</tr>
<tr>
<td>JavaScript</td>
<td><code>Number</code></td>
<td>64 bits / 8 bytes</td>
<td>15 decimal digits</td>
<td>±1.79769313486231570E+308</td>
</tr>
<tr>
<td>Python</td>
<td><code>float()</code></td>
<td>64 bits / 8 bytes</td>
<td>15 decimal digits</td>
<td>±1.79769313486231570E+308</td>
</tr>
</tbody>
</table>
<h2>Key Terms</h2>
<dl>
 	<dt>double</dt>
 	<dd>The most often used floating-point family data type used in C++.</dd>
</dl>
<dl>
 	<dt>mantissa exponent</dt>
 	<dd>The two integer parts of a floating-point value.</dd>
</dl>
<dl>
 	<dt>precision</dt>
 	<dd>The effect on the domain of floating-point values given a larger or smaller storage area in bytes.</dd>
</dl>
<dl></dl>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>142</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 16:50:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 16:50:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[floating-point-data-type]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="dbraunsc"><![CDATA[Dave Braunschweig]]></category>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>String Data Type</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/string-data-type/</link>
		<pubDate>Sat, 16 Jun 2018 16:51:18 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=144</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id9735783">
<h2>Overview</h2>
A <strong>string data type</strong> is traditionally a sequence of characters, either as a literal constant or as some kind of variable. The latter may allow its elements to be mutated and the length changed, or it may be fixed (after creation). A string is generally considered a data type and is often implemented as an array data structure of bytes (or words) that stores a sequence of elements, typically characters, using some character encoding.[footnote]<a href="https://en.wikipedia.org/wiki/String_(computer_science)">Wikipedia: String (computer science)</a>[/footnote]
<h2>Discussion</h2>
Depending on programming language and precise data type used, a variable declared to be a string may either cause storage in memory to be statically allocated for a predetermined maximum length or employ dynamic allocation to allow it to hold a variable number of elements. When a string appears literally in source code, it is known as a string literal or an anonymous string.[footnote]<a href="https://en.wikipedia.org/wiki/String_(computer_science)">Wikipedia: String (computer science)</a>[/footnote]
<table>
<tbody>
<tr>
<th>Language</th>
<th>Reserved Word</th>
<th>Example</th>
</tr>
<tr>
<td>C++</td>
<td><code>char</code></td>
<td><code>'A'</code></td>
</tr>
<tr>
<td>C++</td>
<td><code>string</code></td>
<td><code>"Hello world!"</code></td>
</tr>
<tr>
<td>C#</td>
<td><code>char</code></td>
<td><code>'A'</code></td>
</tr>
<tr>
<td>C#</td>
<td><code>String</code></td>
<td><code>"Hello world!"</code></td>
</tr>
<tr>
<td>Java</td>
<td><code>char</code></td>
<td><code>'A'</code></td>
</tr>
<tr>
<td>Java</td>
<td><code>String</code></td>
<td><code>"Hello world!"</code></td>
</tr>
<tr>
<td>JavaScript</td>
<td><code>String</code></td>
<td><code>'Hello world!'</code>, <code>"Hello world!"</code></td>
</tr>
<tr>
<td>Python</td>
<td><code>str()</code></td>
<td><code>'Hello world!'</code>, <code>"Hello world!"</code></td>
</tr>
</tbody>
</table>
C++, C#, and Java differentiate between single characters and strings using single quotes and double quotes, respectively. JavaScript and Python use both single quotes and double quotes to define string literals.
<p id="id9736002">For now, we will address only the use of strings as constants. Most modern compliers that are part of an Integrated Development Environment (IDE) will color the source code to help the programmer see different features more readily. Beginning programmers will use string constants to send messages to standard output.</p>

</section><section id="id9736048">
<h2>Key Terms</h2>
<dl id="fs-id8720672">
 	<dt>string</dt>
 	<dd id="fs-id8001870">A series or array of characters as a single piece of data.</dd>
</dl>
</section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>144</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 16:51:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 16:51:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[string-data-type]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>6</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="dbraunsc"><![CDATA[Dave Braunschweig]]></category>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Lvalue and Rvalue</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/lvalue-and-rvalue/</link>
		<pubDate>Sat, 16 Jun 2018 16:54:15 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=148</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Overview</h2>
Some programming languages use the idea of <strong>l-values</strong> and <strong>r-values</strong>, deriving from the typical mode of evaluation on the left and right hand side of an assignment statement. An lvalue refers to an object that persists beyond a single expression. An rvalue is a temporary value that does not persist beyond the expression that uses it.[footnote]<a href="http://en.wikipedia.org/wiki/Value_(computer_science)">Wikipedia: Value (computer science)</a>[/footnote].
<h2>Discussion</h2>
Lvalue and Rvalue refer to the left and right side of the assignment operator. The <strong>Lvalue</strong> (pronounced: L value) concept refers to the requirement that the operand on the left side of the assignment operator is modifiable, usually a variable. <strong>Rvalue</strong> concept pulls or fetches the value of the expression or operand on the right side of the assignment operator. Some examples:
<pre><code>age = 39</code></pre>
The value 39 is pulled or fetched (Rvalue) and stored into the variable named age (Lvalue); destroying the value previously stored in that variable.
<pre><code>voting_age = 18
age = voting_age</code></pre>
If the expression has a variable or named constant on the right side of the assignment operator, it would pull or fetch the value stored in the variable or constant. The value 18 is pulled or fetched from the variable named voting_age and stored into the variable named age.
<pre><code>age &lt; 17</code></pre>
If the expression is a test expression or Boolean expression, the concept is still an Rvalue one. The value in the identifier named age is pulled or fetched and used in the relational comparison of less than.
<pre><code>JACK_BENNYS_AGE = 39
JACK_BENNYS_AGE = 65;</code></pre>
This is illegal because the identifier JACK_BENNYS_AGE does not have Lvalue properties. It is not a modifiable data object, because it is a constant.

Some uses of the Lvalue and Rvalue can be confusing in languages that support increment and decrement operators. Consider:
<pre><code>oldest = 55
age = oldest++</code></pre>
Postfix increment says to use my existing value then when you are done with the other operators; increment me. Thus, the first use of the oldest variable is an Rvalue context where the existing value of 55 is pulled or fetched and then assigned to the variable age; an Lvalue context. The second use of the oldest variable is an Lvalue context where in the value of oldest is incremented from 55 to 56.
<h2>Key Terms</h2>
<dl>
 	<dt>Lvalue</dt>
 	<dd>The requirement that the operand on the left side of the assignment operator is modifiable, usually a variable.</dd>
</dl>
<dl>
 	<dt>Rvalue</dt>
 	<dd>Pulls or fetches the value stored in a variable or constant.</dd>
</dl>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>148</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 16:54:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 16:54:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[lvalue-and-rvalue]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>13</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Integer Division and Modulus</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/integer-division-and-modulus/</link>
		<pubDate>Sat, 16 Jun 2018 16:55:44 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=150</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Overview</h2>
In <strong>integer division </strong>and<strong> modulus</strong> the dividend is divided by the divisor into an integer quotient and a remainder. The integer quotient operation is referred to as integer division, and the the integer remainder operation is the modulus.[footnote]<a href="http://en.wikipedia.org/wiki/Division_(mathematics)">Wikipedia: Division (mathematics)</a>[/footnote][footnote]<a href="https://en.wikipedia.org/wiki/Modulo_operation">Wikipedia: Modulo operation</a>[/footnote]
<h2>Discussion</h2>
By the time we reach adulthood, we normally think of division as resulting in an answer that might have a fractional part (a floating-point data type). This type of division is known as floating-point division. However, division when both operands are of the integer data type acts differently on most computers and is called: <strong>integer division</strong>. Consider:

<code>11 / 4</code>

Because both operands are of the integer data type the evaluation of the expression (or answer) would be 2 with no fractional part (it gets thrown away). Again, this type of division is call <strong>integer division</strong> and it is what you learned in grade school the first time you learned about division.
<figure class="ui-has-child-figcaption"><img src="https://cnx.org/resources/38c7fdb3978bbcb5e46dc4b715d4332e89979068/graphics1.jpg" alt="" width="200" height="200" /><figcaption>Integer division as learned in grade school.</figcaption></figure>
In the real world of data manipulation there are some things that are always handled in whole units or numbers (integer data type).  <strong>Fractions just don’t exist.</strong>  To illustrate our example: I have 11 dollar coins to distribute equally to my 4 children.  How many do they each get?  Answer is 2 with me still having 3 left over (or with 3 still remaining in my hand).  The answer is not 2 ¾ each or 2.75 for each child.  The dollar coins are not divisible into fractional pieces. Don’t try thinking out of the box and pretend you’re a pirate. Using an axe and chopping the 3 remaining coins into pieces of eight. Then, giving each child 2 coins and 6 pieces of eight or 2 6/8 or 2 ¾ or 2.75. If you do think this way, I will change my example to cans of tomato soup. I dare you to try and chop up three cans of soup and give each kid ¾ of a can. Better yet, living things like puppy dogs. After you divide them up with an axe, most children will not want the ¾ of a dog.

What is <strong>modulus</strong>?  It's the other part of the answer for integer division.  It’s the remainder.  Remember in grade school you would say, "Eleven divided by four is two remainder three." In many programming languages the symbol for the modulus operator is the percent sign (%).

<code>11 % 4</code>

Thus, the answer or value of this expression is 3 or the remainder part of integer division.

Many compilers require that you have integer operands on both sides of the modulus operator or you will get a compiler error. In other words, it does not make sense to use the modulus operator with floating-point operands.

Don’t let the following items confuse you.

<code>6 / 24 which is different from 6 % 24</code>

How many times can you divide 24 into 6? Six divided by 24 is zero. This is different from: What is the remainder of 6 divided by 24? Six, the remainder part given by modulus.

Evaluate the following division expressions:
<ol>
 	<li>14 / 4</li>
 	<li>5 / 13</li>
 	<li>7 / 2.0</li>
</ol>
Evaluate the following modulus expressions:
<ol>
 	<li>14 % 4</li>
 	<li>5 % 13</li>
 	<li>7 % 2.0</li>
</ol>
<h2>Key Terms</h2>
<dl>
 	<dt>integer division</dt>
 	<dd>Division with no fractional parts.</dd>
</dl>
<dl>
 	<dt>modulus</dt>
 	<dd>The remainder part of integer division.</dd>
</dl>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>150</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 16:55:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 16:55:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[integer-division-and-modulus]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>12</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Practice 2</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/practice-4/</link>
		<pubDate>Sat, 16 Jun 2018 16:56:31 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=152</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id1170658495604">
<h2>Learning Objectives</h2>
<ol id="id1170656842427" type="1">
 	<li>Understand key terms and definitions as listed in the modules associated with this chapter.</li>
 	<li>Design a program, to include: understanding the problem, completing Internet research as appropriate, create a pseudocode document and create a test data document.</li>
 	<li>Write the C++ code for a program using appropriate planning documentation that you or another has designed.</li>
</ol>
</section><section id="id1170668651866"></section><section id="id1170660058622">
<h2>Review Questions</h2>
<div id="fs-id5125888"><section>
<div id="fs-id1168843492079">
<div id="fs-id1168844179138">
<div>Answer the following statements as either true or false:</div>
<ol>
 	<li>Integer data types are stored with a mantissa and an exponent.</li>
 	<li>Strings are identified by single quote marks.</li>
 	<li>An operand is a value that receives the operator’s action.</li>
 	<li>Arithmetic assignment is a shorter way to write some expressions.</li>
 	<li>Integer division is rarely used in computer programming.</li>
</ol>
</div>
</div>
<div id="fs-id8215220">
<div class="ui-toggle-wrapper">
<div>Answers:</div>
<ol>
 	<li>false</li>
 	<li>false</li>
 	<li>true</li>
 	<li>true</li>
 	<li>false</li>
</ol>
</div>
</div>
</section></div>
</section><section id="id1170657049592"></section><section id="id1170660691239">
<h2>Activities</h2>
<section id="id1170660211133">
<h4>Creating a Folder or Sub-Folder for Chapter 04 Files</h4>
<p id="id1170665862712">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id1170665753274">
 	<li>Chapter_04 within the folder named: Cpp_Source_Code_Files</li>
</ul>
<p id="id1170656785886">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id1170664000028">
<h4>Detailed Lab Instructions</h4>
<p id="id2956991">Read and follow the directions below carefully, and perform the steps in the order listed.</p>

<ul id="id6031335">
 	<li>The Problem/Task – I have a friend who is visiting from Europe and he does not understand Fahrenheit temperatures.  We need to write a program that allows him to enter the temperature in Fahrenheit (as announced on TV or radio) and convert it to Celsius.  Clue 1:  Fahrenheit water freezes at 32 degrees and boils at 212 degrees.  Celsius water freezes a zero (0) degrees and boils at 100 degrees.  Google the internet (how to convert Fahrenheit to Celsius) if you need more help.  Clue 2: You can also use Internet sites to do a conversion and thus create your test data.</li>
 	<li>You only need two variables in this program: Fahrenheit and Celsius both of which should be the integer data type. When you convert the Fahrenheit to Celsius you will need to use a floating-point expression doing floating-point calculations for precision. Additionally we want to round up or down the Celsius answer by adding 0.5 to the calculation expression.</li>
</ul>
<ul id="id1170664578625">
 	<li>Within your sub-folder: Chapter_04 you will need to create three files: <strong>Lab_04_Pseudocode.txt</strong> and <strong>Lab_04_Test_Data.txt</strong>and <strong>Lab_04.cpp</strong> NOTE: It will be easier to copy some previous files from another assignment and use those copies by renaming them and modifying them as appropriate. The professor is expecting the items you create to have a similar format to those we have been using in the course.</li>
 	<li>Create your pseudocode, test data and source code files.</li>
 	<li>Build (compile and run) your program. You have successfully written this program when it runs with your test data and gives the predicted results.</li>
 	<li>After you have successfully written this program, if you are taking this course for college credit, follow the instructions from your professor/instructor for submitting it for grading.</li>
</ul>
</section></section><section id="id1170663319830">
<h3>Problems</h3>
<section id="id1170661928690">
<h4>Problem 04a – Instructions</h4>
<p id="id7222028">Decide on the data type and identifier names for the following:</p>
<p id="id1930023">Problem: A men's clothing store that caters to the very rich wants to create a data base for its customers that records clothing measurements. They need to record information for shoes, socks, pants, dress shirts and casual shirts. HINT: You may need more than 5 data items.</p>

</section></section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>152</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 16:56:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 16:56:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[practice-4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>22</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Integrated Development Environment</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/integrated-development-environment/</link>
		<pubDate>Sat, 16 Jun 2018 16:58:02 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=154</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Overview</h2>
An <strong>integrated development environment (IDE)</strong> is a software application that provides comprehensive facilities to computer programmers for software development. An IDE normally consists of a source code editor, build automation tools, and a debugger. Most modern IDEs have intelligent code completion. Some IDEs contain a compiler, interpreter, or both. The boundary between an integrated development environment and other parts of the broader software development environment is not well-defined. Sometimes a version control system, or various tools to simplify the construction of a graphical user interface (GUI), are integrated. Many modern IDEs also have a class browser, an object browser, and a class hierarchy diagram, for use in object-oriented software development.[footnote]<a href="https://en.wikipedia.org/wiki/Integrated_development_environment">Wikipedia: Integrated development environment</a>[/footnote]
<h2>Discussion</h2>
<p id="id17689398">High-level language programs are usually written (coded) as ASCII text into a source code file. A unique file extension (Examples: .asm .c .cpp .java .js .py) is used to identify it as a source code file. As you might guess for our examples – Assembly, "C", "C++", Java, JavaScript, and Python however, they are just ASCII text files (other text files usually use the extension of .txt). The source code produced by the programmer must be converted to an executable machine code file specifically for the computer’s CPU (usually an Intel or Intel compatible CPU within today’s world of micro computers). There are several steps in getting a program from its source code stage to running the program on your computer. Historically, we had to use several software programs (a text editor, a compiler, a linker and operating system commands) to make the conversion and run our program. However, today all those software programs with their associated tasks have been <strong>integrated</strong> into one program. However, this one program is really many software items that create an <strong>environment</strong> used by programmers to <strong>develop</strong> software. Thus the name: Integrated Development Environment or IDE.</p>
Programs written in a high level language are either directly executed by some kind of interpreter, or converted into machine code by a compiler (and assembler and linker) for the CPU to execute. JavaScript, Perl, Python, and Ruby are examples of interpreted programming languages. C, C++, C#, and Java are examples of compiled programming languages.[footnote]<a href="https://en.wikipedia.org/wiki/Interpreter_(computing)">Wikipedia: Interpreter (computing)</a>[/footnote] The following figure shows the progression of activity in an IDE as a programmer enters the source code and then directs the IDE to compile and run the program.
<figure id="id4921881" class="ui-has-child-figcaption"><span id="id1167531678943"><img src="https://cnx.org/resources/5bb011d6a48e031372ecc081bfad476a5c36e404/graphics1.jpg" alt="" width="600" height="450" /></span><figcaption>Integrated Development Environment or IDE</figcaption></figure>
<p id="id20655177">Upon starting the IDE software the programmer usually indicates he wants to open a file for editing as source code. As they make changes they might either do a "save as" or "save". When they have finished entering the source code, they usually direct the IDE to "compile &amp; run" the program. The IDE does the following steps:</p>

<ol id="id24121068">
 	<li>If there are any unsaved changes to the source code file it has the <strong>test editor</strong> save the changes.</li>
 	<li>The <strong>compiler</strong> opens the source code file and does its <strong>first step</strong> which is executing the <strong>pre-processor</strong> compiler directives and other steps needed to get the file ready for the second step. The #include will insert header files into the code at this point. If it encounters an error, it stops the process and returns the user to the source code file within the text editor with an error message. If no problems encountered it saves the source code to a temporary file called a translation unit.</li>
 	<li>The <strong>compiler</strong> opens the translation unit file and does its <strong>second step</strong> which is <strong>converting</strong> the programming language code to machine instructions for the CPU, a data area and a list of items to be resolved by the linker. Any problems encounted (usually a syntax or violation of the programming language rules) stops the process and returns the user to the source code file within the text editor with an error message. If no problems encountered it saves the machine instructions, data area and linker resolution list as an object file.</li>
 	<li>The <strong>linker</strong> opens the program object file and links it with the library object files as needed. Unless all linker items are resolved, the process stops and returns the user to the source code file within the text editor with an error message. If no problems encountered it saves the linked objects as an executable file.</li>
 	<li>The IDE directs the operating system’s program called the <strong>loader</strong> to load the executable file into the computer's memory and have the Central Processing Unit (CPU) start processing the instructions. As the user interacts with the program, entering his test data, he might discover that the outputs are not correct. These types of errors are called logic errors and would require him to return to the source code to change the algorithm.</li>
</ol>
<h3>Resolving Errors</h3>
<p id="id19769031">Despite our best efforts at becoming perfect programmers, we will create errors. Solving these errors is known as <strong>debugging</strong> your program. The three types of errors in the order that they occur are:</p>

<ol id="id3486688">
 	<li>Compiler</li>
 	<li>Linker</li>
 	<li>Logic</li>
</ol>
<p id="id7167443">There are two types of compiler errors; pre-processor (1st step) and conversion (2nd step). A review of Figure 1 above shows the four arrows returning to the source code so that the programmer can correct the mistake.</p>
<p id="id20232803">During the conversion (2nd step) the complier might give a <strong>warning</strong> message which in some cases may not be a problem to worry about. For example: Data type demotion may be exactly what you want your program to do, but most compilers give a warning message. Warnings don't stop the compiling process but as their name implies, they should be reviewed.</p>
<p id="id22128853">The next three figures show IDE monitor interaction for the <strong>Bloodshed Dev-C++ 5 compiler/IDE</strong>.</p>

<figure id="id21675976" class="ui-has-child-figcaption"><span id="id1167533422396"><img src="https://cnx.org/resources/ef0d6aa067a528baadff7c2a790cbc961fe8e89f/graphics2.png" alt="" width="599" height="405" /></span><figcaption>Compiler Error (the red line is where the complier stopped)</figcaption></figure>
<figure id="id23040524" class="ui-has-child-figcaption"><span id="id1167526764585"><img src="https://cnx.org/resources/0d906ec36258f8a38316ccd99e80d3755aacdbe5/graphics3.png" alt="" width="599" height="405" /></span><figcaption>Linker Error (no red line with an error message describing linking problem)</figcaption></figure>
<figure id="id15300073" class="ui-has-child-figcaption"><span id="id1167528427328"><img src="https://cnx.org/resources/b76261aecae7e306c7a94e2e266eb921896e68c9/graphics4.png" alt="" width="600" height="375" /></span><figcaption>Logic Error (from the output within the "Black Box" area)</figcaption></figure>
<h2>Key Terms</h2>
<dl id="fs-id2012031"></dl>
<dl id="fs-id7787494">
 	<dt>compiler</dt>
 	<dd id="fs-id4225646">Converts source code to object code.</dd>
</dl>
<dl id="fs-id5762828">
 	<dt>
<dl id="fs-id8562848">
 	<dt>debugging</dt>
 	<dd id="fs-id2038842">The process of removing errors from a program. 1) compiler 2) linker 3) logic</dd>
</dl>
<dl id="fs-id8482026">
 	<dt>
<dl id="fs-id2012031">
 	<dt></dt>
</dl>
</dt>
</dl>
linker</dt>
</dl>
<dl id="fs-id8454497">
 	<dd id="fs-id8160822">Connects or links object files into an executable file.</dd>
</dl>
<dl id="fs-id8113381">
 	<dt>loader</dt>
 	<dd id="fs-id8124137">Part of the operating system that loads executable files into memory and direct the CPU to start running the program.</dd>
</dl>
<dl id="fs-id8562848"></dl>
<dl id="fs-id8482026">
 	<dt>
<dl id="fs-id2012031">
 	<dt>
<dl id="fs-id5762828">
 	<dt>pre-processor</dt>
 	<dd id="fs-id2170384">The first step the compiler does in converting source code to object code.</dd>
</dl>
<dl id="fs-id8454497">
 	<dt></dt>
</dl>
text editor</dt>
 	<dd id="fs-id6293525">A software program for creating and editing ASCII text files.</dd>
</dl>
<dl id="fs-id7787494">
 	<dt></dt>
</dl>
warning</dt>
 	<dd id="fs-id7084915">A compiler alert that there might be a problem.</dd>
</dl>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>154</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 16:58:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 16:58:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[integrated-development-environment]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>40</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Standard Input and Output</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/standard-input-and-output/</link>
		<pubDate>Sat, 16 Jun 2018 16:59:05 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=156</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id1812494">
<h2>Overview</h2>
<strong>Input and output</strong>, or I/O is the communication between an information processing system, such as a computer, and the outside world, possibly a human or another information processing system. Inputs are the signals or data received by the system and outputs are the signals or data sent from it.[footnote]<a href="https://en.wikipedia.org/wiki/Input/output">Wikipedia: Input/output</a>[/footnote]
<h2>General Discussion</h2>
<p id="id1812502">Every task we have the computer do happens inside the central processing unit (CPU) and the associated memory. Once our program is loaded into memory and the operating system directs the CPU to start executing our programming statements the computer looks like this:</p>

<figure id="id1812518" class="ui-has-child-figcaption"><span id="id1812518_media"><img id="id1812518__onlineimage" src="https://cnx.org/resources/4dc38ee5d77b5ad943f6326135da198f1a926a72/graphics1.jpg" alt="" width="600" height="450" /></span><figcaption>CPU – Memory – Input/Output Devices</figcaption></figure>
<p id="id1812546">Our program now located in the memory has basically two areas:</p>

<ul id="id1812553">
 	<li>Machine instructions – our instructions for what we want done</li>
 	<li>Data storage – our variables that we using in our program</li>
</ul>
<p id="id1812572">Often our program contains instructions to interact with the input/output devices. We need to move data into (read) and/or out of (write) the memory data area. A <strong>device</strong> is a piece of equipment that is electronically connected to the memory so that data can be transferred between the memory and the device. Historically this was done with punched cards and printouts. Tape drives were used for electronic storage. With time we migrated to using disk drives for storage with keyboards and monitors (with monitor output called soft copy) replacing punch cards and printouts (called hard copy).</p>
<p id="id4794570">Most computer operating systems and by extension programming languages have identified the keyboard as the <strong>standard input device</strong> and the monitor as the <strong>standard output device</strong>. Often the keyboard and monitor are treated as the default device when no other specific device is indicated.</p>

</section><section id="id1807741">
<h2>Key Terms</h2>
<dl id="fs-id1166431942873">
 	<dt>device</dt>
 	<dd id="fs-id1166432730756">A piece of equipment that is electronically connected to the memory so that data can be transferred between the memory and the device.</dd>
</dl>
<dl id="fs-id1166432700182">
 	<dt><section id="id1807741">
<dl id="fs-id1166433427719"></dl>
<dl id="fs-id1166432693679">
 	<dt>
<dl id="fs-id1166432700182">
 	<dt><section id="id1807741">
<dl id="fs-id1166432763539">
 	<dt>escape code</dt>
 	<dd id="fs-id1166434736007">A code directing an output device to do something.</dd>
</dl>
</section></dt>
</dl>
extraction</dt>
 	<dd id="fs-id1166432440722">Aka reading or getting data from an input device.</dd>
</dl>
</section>
<dl id="fs-id1166433427719">
 	<dt>insertion</dt>
 	<dd id="fs-id1166432411544">Aka writing or sending data to an output device.</dd>
</dl>
<dl id="fs-id1166432693679">
 	<dt>
<dl id="fs-id1166432700182">
 	<dt><section id="id1807741">
<dl id="fs-id1166432763539">
 	<dt></dt>
</dl>
</section></dt>
</dl>
</dt>
</dl>
standard input</dt>
 	<dd id="fs-id1166432603500">The keyboard.</dd>
</dl>
<dl id="fs-id1166433286283">
 	<dt>standard output</dt>
 	<dd id="fs-id1166432799186">The monitor.</dd>
</dl>
<dl id="fs-id1166433427719"></dl>
</section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>156</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 16:59:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 16:59:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[standard-input-and-output]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>40</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Practice: Integrated Development Environment</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/practice-2/</link>
		<pubDate>Sat, 16 Jun 2018 17:00:41 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=160</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id1172641171756">
<h2>Learning Objectives</h2>
<ol id="id1172638651458" type="1">
 	<li>Understand key terms and definitions as listed in the modules associated with this chapter.</li>
 	<li>Be able to list the categories and give examples of errors encountered when using an Integrated Development Environment (IDE).</li>
 	<li>Test an Integrated Development Environment using a Hello World program.</li>
 	<li>Modify an existing program to meet given requirements.</li>
</ol>
</section><section id="id1172638120297"></section><section id="id1172636263545">
<h2>Review Questions</h2>
<div id="fs-id1172638365747"><section>
<div id="fs-id1172643326728">
<div id="fs-id1172636237828">
<div>True / False:</div>
<ol>
 	<li>IDE means Integer Division Expression.</li>
 	<li>Most modern compilers are really an IDE type of software, not just a compiler.</li>
 	<li>Programming errors are extremely easy to understand and fix.</li>
</ol>
</div>
</div>
<div id="fs-id1172640026732">
<div class="ui-toggle-wrapper">
<div>Answers:</div>
<ol>
 	<li>false</li>
 	<li>true</li>
 	<li>false</li>
</ol>
Short Answer:

<section id="id1172637763580">
<ol>
 	<li id="id1172637881407">List and describe what might cause the four (4) types of errors encountered in a program using a compiler and an Integrated Development Environment software product.</li>
</ol>
</section></div>
</div>
</section></div>
</section><section id="id1172635535909"></section><section id="id1172636729909">
<h2>Activities</h2>
<ol>
 	<li>Research different programming languages and select a programming language to use with this textbook. Copy the Hello World example code for your selected programming language and use one of the free cloud-based IDEs to try running the Hello World program.</li>
 	<li>Modify the example Hello World program to instead display <code>Hello &lt;name&gt;!</code>, where <code>&lt;name&gt;</code> is your name. Include comments at the top of the program and test the program to verify that it works correctly.</li>
 	<li>Research free downloadable tools for your selected programming language (interpreter/compiler, IDE, etc.). Consider downloading and installing a development environment on your system. If you set up your own development environment, test the environment using your Hello Name program written above.</li>
</ol>
</section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
 	<li><a href="https://en.wikiversity.org/wiki/Computer_Programming">Wikiversity: Computer Programming</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>160</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:00:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:00:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[practice-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>40</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="dbraunsc"><![CDATA[Dave Braunschweig]]></category>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[practice-5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Pseudocode Examples for Functions</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/pseudocode-examples-for-functions/</link>
		<pubDate>Sat, 16 Jun 2018 17:01:51 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=162</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id12412450">
<h3>Concept</h3>
<p id="id13623000">No standard for pseudocode syntax exists. However, there are some commonly followed conventions to help make pseudocode written by one programmer easily understood by another programmer. The following describes a method for using pseudocode for functions that would be understood by programmers. Five concepts are:</p>

<ul id="id8889141">
 	<li>Use a <strong>beginning phrase word</strong> to start the function</li>
 	<li>Use a <strong>communication phrase word</strong> to identify the items being passed into the function</li>
 	<li>Use indentation to show the action part of the function</li>
 	<li>Use a <strong>communication phrase word</strong> to identify the items being passed out of the function</li>
 	<li>Use an <strong>ending phrase word</strong> to end the function</li>
 	<li>Use a <strong>calling phrase word</strong> to direct your program to use a fucntion</li>
</ul>
<p id="id14529317">The following is a suggested outline of function phrase words:</p>

<table id="id4608755" summary="">
<tbody>
<tr>
<td>Item/Purpose</td>
<td>Starting Phrase Word</td>
<td>Ending Phrase Word</td>
</tr>
<tr>
<td>Beginning</td>
<td>Function</td>
<td>N/A</td>
</tr>
<tr>
<td>Communication In</td>
<td>Pass In:</td>
<td>none</td>
</tr>
<tr>
<td>Action</td>
<td>N/A</td>
<td>N/A</td>
</tr>
<tr>
<td>Communication Out</td>
<td>Pass Out:</td>
<td>none</td>
</tr>
<tr>
<td>Ending</td>
<td>N/A</td>
<td>Endfunction</td>
</tr>
<tr>
<td>Calling a Function</td>
<td>Call:</td>
<td>none</td>
</tr>
</tbody>
</table>
</section><section id="id4667187">
<h3>Examples</h3>
<p id="id9558149">Here are some examples showing functions defined in pseudocode using our conventions as described above.</p>

<div id="fs-id1165006046954" class="ui-has-child-title"><header>
<div>pseudocode: Function with no parameter passing</div>
</header><section>
<pre id="fs-id1165006120310"><code>
Function clear monitor
  Pass In: nothing
  Direct the operating system to clear the monitor
  Pass Out: nothing
Endfunction </code></pre>
</section></div>
<div id="fs-id1165006809992" class="ui-has-child-title"><header>
<div>pseudocode: Function with parameter passing</div>
</header><section>
<pre id="fs-id1165006677260"><code>
Function delay program so you can see the monitor
  Pass In: integer representing tenths of a second
  Using the operating system delay the program 
  Pass Out: nothing
Endfunction </code></pre>
</section></div>
<div id="fs-id1165005528188" class="ui-has-child-title"><header>
<div>pseudocode: Function main calling the clear monitor function</div>
</header><section>
<pre id="fs-id1165017758657"><code>
Function main
  Pass In: nothing
  Doing some lines of code
  Call: clear monitor
  Doing some lines of code
  Pass Out: value zero to the operating system
Endfunction </code></pre>
</section></div>
</section><section id="id10605979">
<h2>Key Terms</h2>
<dl id="fs-id6917482">
 	<dt>phrase word</dt>
 	<dd id="fs-id8367018">Words used to make pseudocode logic clear to any reader.</dd>
</dl>
</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>162</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:01:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:01:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[pseudocode-examples-for-functions]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>42</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hierarchy or Structure Chart</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/hierarchy-or-structure-chart/</link>
		<pubDate>Sat, 16 Jun 2018 17:03:22 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=164</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id1166494765975">
<h3>Overview</h3>
<p id="id1166494775516">The <strong>hierarchy chart</strong> (also known as a <strong>structure chart</strong>) shows the relationship of various units. Its name comes from its general use in showing the organization (or structure) of a business. The President at the top, then vice presidents on the next level, etc. Within the context of a computer program it shows the relationship between modules (or functions). Detail logic of the program is not presented. It does represent the organization of the functions used within the program showing which functions are calling on a subordinate function. Those above are calling those on the next level down.</p>
<p id="id1166494792800">Hierarchy charts are created by the programmer to help document a program. They convey the big picture of the modules (or functions) used in a program.</p>

<figure id="id1166494825081" class="ui-has-child-figcaption"><span id="id1166494825081_media"><img id="id1166494825081__onlineimage" src="https://cnx.org/resources/85a5d280d305ba52eeaaff55b63176fc1f407bf9/graphics1.jpg" alt="" width="600" height="450" /></span><figcaption>Hierarchy or Structure chart for a program that has five functions.</figcaption></figure>
</section><section id="id1166494743582">
<h2>Key Terms</h2>
<dl id="fs-id1166501229220">
 	<dt>hierarchy chart</dt>
 	<dd id="fs-id1166499902777">Convey the relationship or big picture of the various functions in a program.</dd>
</dl>
<dl id="fs-id8878391">
 	<dt>structure chart</dt>
 	<dd id="fs-id7146744">Another name for a hierarchy chart.</dd>
</dl>
</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>164</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:03:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:03:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[hierarchy-or-structure-chart]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>42</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Program Control Functions</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/program-control-functions/</link>
		<pubDate>Sat, 16 Jun 2018 17:04:49 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=166</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id45510286">
<h3>Prerequisite Material</h3>
<p id="id45652290">Critical to this module is the review of several Connexions modules:</p>

<ol id="id46208449">
 	<li>Modularization and C++ Program Layout</li>
 	<li>Pseudocode Examples for Functions</li>
 	<li>Hierarchy or Structure Chart</li>
</ol>
<p id="id45997154">You should review these materials before proceeding. If you are viewing this module on-line, links to these items are in the "Links" box to your right.</p>

</section><section id="id46210196">
<h3>Concept of Modularization</h3>
<p id="id45911048">The concept is everywhere present in the real world about us. Simply put it is to <strong>take a large complicated problem and to divide it into smaller manageable pieces</strong>. The hierarchy chart of any large organization (government unit, company, university, hospital, etc.) will show levels of people with job titles that indicate a different area of responsibility. Each person is a small piece of the overall workings of the organization. Each person can concentrate on their unique talent or task to make sure it works properly. Collectively they accomplish the goals of the organization.</p>
<p id="id45718552">Additionally, the concept has been around for a long time. A village of 300 years ago had farmers, tailors, butchers, blacksmiths, etc. Manufacturing is a prime example of not just work being modularized but the product itself is viewed in terms of modules or systems (Example of a automobile: engine, steering, brakes, etc.).</p>
<p id="id45593293">The world of computers, both hardware (equipment) and software (computer programs), also uses this modular concept. Thus, the concept migrates to a single computer program; allowing us to modularize the program into manageable tasks called functions.</p>

</section><section id="id46167413">
<h3>Program Control Functions</h3>
<p id="id45975240">Program Control functions normally do not communicate information to each other but use a <strong>common area</strong> for variable storage. The rules for how data is communicated in and out of a function vary greatly by programming language, but the concept is the same. The data items passed (or communicated) are called parameters. Thus the wording: <span>parameter passing</span>. However, with program control functions we use the data communication option of <span>no communication in – with no communication out</span>. Our data variables and constants are placed in a common area available to all functions (called global scope).</p>
<p id="id45980115">The identifier names for program control functions usually imply a task to be accomplished, such as get-data, process-data or show-results. As you learn to write more complicated programs the number of lines of code will increase. Prudence dictates that it would be beneficial to divide the program into functions that perform unique tasks. The larger the program the more need for modularization or creating of program control functions.</p>
<p id="id45522981">Depending on the programming language, there is a formal way to:</p>

<ol id="id45244959">
 	<li>define a function (it’s <span>definition</span> or the code it will execute))</li>
 	<li><span>call</span> a function</li>
 	<li>declare a function (a <span>prototype</span> is a declaration to a complier)</li>
</ol>
<p id="id45963100">One of the easier ways to understand program control function is to view an example. Even if you don’t know the C++ programming language, you can study the materials to help understand the modularization process.</p>

</section><section id="id45985393">
<h3>Demonstration Program in C++</h3>
<section id="id45221220">
<h4>Creating a Folder or Sub-Folder for Source Code Files</h4>
<p id="id45540812">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the <span>Bloodshed Dev-C++ 5 compiler/IDE</span> might be named:</p>

<ul id="id45750027">
 	<li>Demo_Programs</li>
</ul>
<p id="id45500369">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id46181450">
<h4>Download the Demo Program</h4>
<p id="id45267503">Download and store the following file(s) to your storage device in the appropriate folder(s). You may need to right click on some of the links and select "Save Target As" in order to download some of the files. Following the methods of your compiler/IDE, compile and run the program(s). Study the source code file(s) in conjunction with other learning materials.</p>
<p id="id45540654">Download from Connexions: <a href="https://cnx.org/resources/8aaeb276391ed55fcb95ab09498f54e07e4c5d80/Demo_Program_Control_Functions_before_Compiler_Test.cpp">Demo_Program_Control_Functions_before_Compiler_Test.cpp</a></p>
<p id="id47609850">Download from Connexions: <a href="https://cnx.org/resources/803eea8d2db62ae4e70bb98ada660811a1097680/Demo_Program_Control_Functions_Pseudocode.txt">Demo_Program_Control_Functions_Pseudocode.txt</a></p>
<p id="id45965200">Download from Connexions: <a href="https://cnx.org/resources/6e086a44f03de189e47649df8dbb3040a7695285/Demo_Program_Control_Functions_Hierarchy_Chart.jpg">Demo_Program_Control_Functions_Hierarchy_Chart.jpg</a></p>
<p id="id46666132">Download from Connexions: <a href="https://cnx.org/resources/91e8a6d2fed14e76bb7519dd7a1f8c1605279663/Demo_Program_Control_Functions.cpp">Demo_Program_Control_Functions.cpp</a></p>

</section><section id="id45989592">
<h4>Study the Materials Collectively to Understand Modularization</h4>
<p id="id45282797">The four items represent a progression from no modularization to modularization:</p>

<ol id="id46014556">
 	<li>Program code before it is modularized</li>
 	<li>Modularized pseudocode and a hierarchy chart for the program</li>
 	<li>Program code that has been modularized</li>
</ol>
<p id="id46213897">The simplicity of the program should not be considered during this review. It is obvious that the program does not need modularization. The example is to show or demonstrate how to modularize a program for program control.</p>

</section></section><section id="fs-id3314381">
<h2>Key Terms</h2>
<dl id="fs-id7895315">
 	<dt>common area</dt>
 	<dd id="fs-id7932666">An area of the program where variables and constants are defined so that they are available to all functions.</dd>
</dl>
</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>166</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:04:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:04:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[program-control-functions]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>42</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Void Data Type</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/void-data-type/</link>
		<pubDate>Sat, 16 Jun 2018 17:05:41 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=168</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id47409480">
<h3>General Discussion</h3>
<p id="id47409486">The <strong>void data type</strong> has no values and no operations. It's a data type that represents the lack of a data type.</p>

<table id="id47409515" summary="">
<tbody>
<tr>
<td>C++ Reserved Word</td>
<td>void</td>
</tr>
<tr>
<td>Represent</td>
<td>Nothing</td>
</tr>
<tr>
<td>Size</td>
<td>N/A or None</td>
</tr>
<tr>
<td>Normal Signage</td>
<td>N/A</td>
</tr>
<tr>
<td>Domain (Values Allowed)</td>
<td>None</td>
</tr>
</tbody>
</table>
<p id="id47409643">This data type was added in the transition from "C" to "C++". In "C" by default a function returned an integer data type. Some functions don't return a value of any kind. Thus, the need to have a data type that indicates <strong>nothing</strong> is being returned. The void data type is mainly used in the definition and prototyping of functions to indicate that either nothing is being passed in and/or nothing is being passed out.</p>

</section><section id="id47409730">
<h2>Key Terms</h2>
<dl id="fs-id4264322">
 	<dt>void data type</dt>
 	<dd id="fs-id3559570">A data type that has no values or operators and is used to represent nothing.</dd>
</dl>
</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>168</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:05:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:05:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[void-data-type]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>42</wp:post_parent>
		<wp:menu_order>8</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Documentation and Making Source Code Readable</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/documentation-and-making-source-code-readable/</link>
		<pubDate>Sat, 16 Jun 2018 17:07:06 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=170</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id1167489812913">
<h3>General Discussion</h3>
<p id="id1167495755715">We are going to consider a simple program that might be used for testing a compiler to make sure that it is installed correctly.</p>

<div id="fs-id10324711" class="ui-has-child-title"><header>
<div>Compiler_Test.cpp source code</div>
</header><section>
<pre id="fs-id8123681"><code>
//******************************************************
// Filename: Compiler_Test.cpp
// Purpose:  Average the ages of two people
// Author:   Ken Busbee; © Kenneth Leroy Busbee
// Date:     Jan 5, 2009
// Comment:  Main idea is to be able to 
//           debug and run a program on your compiler.
//******************************************************

// Headers and Other Technical Items

#include &lt;iostream&gt;  
using namespace std;

// Function Prototypes

void pause(void);

// Variables

int     age1;
int     age2;
double  answer;

//******************************************************
// main
//******************************************************

int main(void)
  {
  // Input	
  cout &lt;&lt; "\nEnter the age of the first person ---&gt;: ";
  cin &gt;&gt; age1;
  cout &lt;&lt; "\nEnter the age of the second person --&gt;: ";
  cin &gt;&gt; age2;

  // Process
  answer = (age1 + age2) / 2.0;

  // Output
  cout &lt;&lt; "\nThe average of their ages is --------&gt;: ";
  cout &lt;&lt; answer;

  pause();
  return 0;
  }

//******************************************************
// pause
//******************************************************

void pause(void)
  {
  cout &lt;&lt; "\n\n";
  system("PAUSE");
  cout &lt;&lt; "\n\n";
  return;
  }

//******************************************************
// End of Program
//******************************************************</code></pre>
</section></div>
<p id="id1167493632249">Within the programming industry there is a desire to make software programs easy to maintain. The desire centers in money. Simply put, it costs less money to maintain a well written program. One important aspect of program maintenance is making source code listings clear and as easy to read as possible. To that end we will consider the following:</p>

<ol id="id1167493965172" type="1">
 	<li>Documentation</li>
 	<li>Vertical Alignment</li>
 	<li>Appropriate use of Comments</li>
 	<li>Banners for Functions</li>
 	<li>Block Markers on Lines by Themselves</li>
 	<li>Indent Block Markers</li>
 	<li>Meaningful Identifier Names Consistently Typed</li>
 	<li>Appropriate use of Typedef</li>
</ol>
<p id="id1167493670743">The above items are not needed in order for the source code to compile. Technically the compiler does not read the source code the way humans read the source code. But that is exactly the point; the desire is to make the source code easier for humans to read. You should not be confused between what is possible (technically will compile) and what is ok (acceptable good programming practice that leads to readable code). Let's cover each item in more detail.</p>

<section id="id1167493597547">
<h4>Documentation</h4>
<p id="id1167488571290">Documentation is usually placed at the top of the program using several comment lines. The amount of information would vary based on the requirements or standards of the company who is paying its employees or independent contractors to write the code. Notice the indication of revision dates.</p>

</section><section id="id1167489751925">
<h4>Vertical Alignment</h4>
<p id="id1167487938848">You see this within the documentation area. All of the items are aligned up within the same column. This vertical alignment occurs again when the variables are defined. When declaring variable or constants many textbooks put several items on one line; like this:</p>

<div id="fs-id17324418" class="ui-has-child-title"><header>
<div>Common Textbook Defining of Variables</div>
</header><section>
<pre id="fs-id6525914"><code>
float  length, width, height, price_gal_paint, total_area, total_cost;
int  coverage_gal_paint, total_gal_paint;</code></pre>
</section></div>
<p id="id1167489360257">However common this is in textbooks, it would generally not be acceptable to standards used in most companies. You should declare each item on its own line; like this:</p>

<div id="fs-id4282094" class="ui-has-child-title"><header>
<div>Proper Defining of Variables with Vertical Alignment</div>
</header><section>
<pre id="fs-id7691732"><code>
float  length;
float  width;
float  height;
float  price_gal_paint;
int    coverage_gal_paint;
float  total_area;
int    total_gal_paint;
float  total_cost;</code></pre>
</section></div>
<p id="id1167489645987">This method of using one item per line is more readable by humans. It is quicker to find an identifier name, because you can read the list vertically faster than searching horizontally. Some programmers list them in alphabetic order, especially when the number of variables exceeds about twenty.</p>
<p id="id1167496204033">The lines of code inside either function are also aligned vertically and indented two spaces from the left. The indentation helps set the block off visually.</p>

</section><section id="id1167489723001">
<h4>Appropriate use of Comments</h4>
<p id="id1167491776550">You can see through the source code short little comments that describe an area or section. Note the use of input, processing and output which are part of the IPO concept within the program design.</p>

</section><section id="id1167497276388">
<h4>Banners for Functions</h4>
<p id="id1167496153467">Note the use of comments in the form of a banner before each function.</p>

<div id="fs-id13186790" class="ui-has-child-title"><header>
<div>Comments as a Banner</div>
</header><section>
<pre id="fs-id7599769"><code>
//******************************************************
// main
//******************************************************</code></pre>
</section></div>
<p id="id1167489549971">The function name is placed with two lines of asterisks. It makes it extremely easy to find each function definition because you don’t have to read the functions to see where the one ends and the next one begins. You can quickly read the function names within the banners.</p>

</section><section id="id1167488957852">
<h4>Block Markers on Lines by Themselves</h4>
<p id="id1167488114366">Within many languages there is a method to identify a group of programming statements as a unit. With C++ the functions use a set of symbols, the braces {}, to identify a block of code, sometimes referred to as a compound statement. Braces are used in other aspects of programs, but for now we will look at this simple example. These braces have a tendency to cause problems, especially when they don’t have a proper opening brace associated with a proper closing brace. To solve that problem many programmers simply put a brace on a line by itself and make sure the opening brace and closing brace are in the same vertical column.</p>

</section><section id="id1167489842144">
<h4>Indent Block Markers</h4>
<p id="id1167494793562">A block of code associated with a function or with a control structure is indented two or three spaces. When blocks of code are nested each nesting is indented two or three spaces. In our example above the blocks of code for the function definitions are indented two spaces.</p>

</section><section id="id1167489247083">
<h4>Meaningful Identifier Names Consistently Typed</h4>
<p id="id1167495019015">As the name implies "identifier names" should clearly identify who (or what) you are talking about. Calling you spouse "Snooky" may be meaningful to only you. Others might need to see her full name (Jane Mary Smith) to appropriately identify who you are talking about. The same concept in programming is true. Variables, constants, functions, typedefs and other items should use meaningful identifier names. Additionally, those names should be typed consistently in terms of upper and lower case as they are used in the program. Don't define a variable as: Pig and then type it later on in your program as: pig.</p>

</section><section id="id1167488817103">
<h4>Appropriate use of Typedef</h4>
<p id="id1167490025556">Many programming languages have a command that allows for the creation of an identifier name that represents a data type. The new identifier name is described or connected to a real data type. This feature is not demonstrated in the code above and is often a confusing concept. It is a powerful way to help document a program so that it is meaningful, but is often used by more experienced programmers.</p>

</section></section><section id="id1167493684916">
<h2>Key Terms</h2>
<dl id="fs-id6230093">
 	<dt>
<dl id="fs-id4779951">
 	<dt>banners</dt>
 	<dd id="fs-id8202323">A set of comment lines used to help separate the functions and other sections of a program.</dd>
</dl>
<dl id="fs-id17372806">
 	<dt>braces</dt>
 	<dd id="fs-id17269694">Used to identify a block of code in C++.</dd>
</dl>
<dl id="fs-id22745550">
 	<dt></dt>
</dl>
consistent</dt>
</dl>
<dl id="fs-id22744550">
 	<dt>
<dl id="fs-id11386736">
 	<dd id="fs-id17382767">A rule that says to type identifier names in upper and lower case consistently throughout your source code.</dd>
</dl>
<dl id="fs-id10717513">
 	<dt></dt>
</dl>
comments</dt>
 	<dd id="fs-id13402165">Information inserted into a source code file for documentation of the program.</dd>
</dl>
<dl id="fs-id4779951"></dl>
<dl id="fs-id22745550">
 	<dt>
<dl id="fs-id6230093">
 	<dt>documentation</dt>
 	<dd id="fs-id16624341">A method of preserving information useful to others in understanding an information system or part thereof.</dd>
</dl>
<dl id="fs-id10717513"></dl>
<dl id="fs-id22744550">
 	<dt>
<dl id="fs-id11386736">
 	<dt></dt>
</dl>
</dt>
</dl>
indention</dt>
 	<dd id="fs-id13458251">A method used to make sections of source code more visible.</dd>
</dl>
<dl id="fs-id10858625">
 	<dt>meaningful</dt>
 	<dd id="fs-id22479666">A rule that says identifier names must be easily understood by another reading the source code.</dd>
</dl>
<dl id="fs-id11386736"></dl>
<dl id="fs-id10717513">
 	<dt>vertical alignment</dt>
 	<dd id="fs-id8230088">A method of listing items vertically so that they are easier to read quickly.</dd>
</dl>
</section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>170</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:07:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:07:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[documentation-and-making-source-code-readable]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>42</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Practice 1</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/practice-6/</link>
		<pubDate>Sat, 16 Jun 2018 17:08:06 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=172</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id8694104">
<h2>Learning Objectives</h2>
<ol id="id3823436" type="1">
 	<li>Understand key terms and definitions as listed in the modules associated with this chapter.</li>
 	<li>Given pseudocode, test data and source code of an existing program, modify the pseudocode and source code to create "program control" functions.</li>
</ol>
</section><section id="id8362851"></section><section id="id5850176">
<h2>Review Questions</h2>
<div id="fs-id4997731"><section>
<div id="fs-id7357631">
<div id="fs-id7389233">
<div>Answer the following statements as either true or false:</div>
<ol>
 	<li>Pseudocode has a strict set of rules and is the same everywhere in the computer programming industry.</li>
 	<li>Hierarchy Charts and Structure Charts are basically the same thing.</li>
 	<li>Program Control functions are used to simply sub divide and control the program.</li>
 	<li>The void data type is rarely used in C++.</li>
 	<li>Making source code readable is only used by beginning programmers.</li>
</ol>
</div>
</div>
<div id="fs-id2729554">
<div class="ui-toggle-wrapper">
<div>Answers:</div>
<ol>
 	<li>false</li>
 	<li>true</li>
 	<li>true</li>
 	<li>false</li>
 	<li>false</li>
</ol>
</div>
</div>
</section></div>
</section><section id="id8588362"></section><section id="id7848696">
<h2>Activities</h2>
<section id="id8387835">
<h4>Creating a Folder or Sub-Folder for Chapter 06 Files</h4>
<p id="id8194104">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id8633349">
 	<li>Chapter_06 within the folder named: Cpp_Source_Code_Files</li>
</ul>
<p id="id7974611">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id6993965">
<h4>Download the Lab File(s)</h4>
<p id="id8801073">Download and store the following file(s) to your storage device in the appropriate folder(s). You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id7594205">Download from Connexions: <a href="https://cnx.org/resources/5272b0ebcae4cf046f18515332978bd28173b9db/Solution_Lab_01.cpp">Solution_Lab_01.cpp</a></p>
<p id="id8693680">Download from Connexions: <a href="https://cnx.org/resources/9cc9698364a00307138fcc41a5043b8e705e829b/Solution_Lab_01_Pseudocode.txt">Solution_Lab_01_Pseudocode.txt</a></p>
<p id="id7966114">Download from Connexions: <a href="https://cnx.org/resources/eecfaabb108bcc4e9230e52515dd11a9ff12d482/Solution_Lab_01_Test_Data.txt">Solution_Lab_01_Test_Data.txt</a></p>
<p id="id8403102">Download from Connexions: <a href="https://cnx.org/resources/c37d099a60f6817d69362abae1469c6cea5bd5a6/Solution_Lab_01m_with_Program_Control.cpp">Solution_Lab_01m_with_Program_Control.cpp</a></p>
<p id="id6639355">Download from Connexions: <a href="https://cnx.org/resources/b316e3c76e5365db147e3960371b496b8edb0592/Solution_Lab_01m_Pseudocode_with_Program_Control.txt">Solution_Lab_01m_Pseudocode_with_Program_Control.txt</a></p>
<p id="id8599182">Download from Connexions: <a href="https://cnx.org/resources/08120894e8b39547a11d4e2bf57e161a086d37bb/Solution_Lab_01m_Hierarchy_Chart.jpg">Solution_Lab_01m_Hierarchy_Chart.jpg</a></p>
<p id="id8645678">Download from Connexions: <a href="https://cnx.org/resources/e252959e42fe886e7ac221033938acdab4a8154e/Solution_Lab_03.cpp">Solution_Lab_03.cpp</a></p>
<p id="id8749166">Download from Connexions: <a href="https://cnx.org/resources/a253c50868568ef09290c279bb50801defac88fa/Solution_Lab_03_Pseudocode.txt">Solution_Lab_03_Pseudocode.txt</a></p>
<p id="id8257547">Download from Connexions: <a href="https://cnx.org/resources/a8a9beb0d6ef69e034d755a827a79b30c1e5688d/Solution_Lab_03_Test_Data.txt">Solution_Lab_03_Test_Data.txt</a></p>

</section><section id="id8554476">
<h4>Detailed Lab Instructions</h4>
<p id="id8519232">Read and follow the directions below carefully, and perform the steps in the order listed.</p>

<ul id="id8549447">
 	<li>Navigate to your sub-folder: Chapter_06. Review the original Lab 01 materials. Compile and run the Lab 01 source code. Then review and compare the original Lab 01 materials to modularized Lab 01 materials taking note of the conversion to "program control" functions. Compile and run the Lab 01m source code. Review as needed the course materials. Email your professor if you have any questions.</li>
 	<li>We have supplied the solution to the Lab 03 assignment. Review the Lab 03 assignment by compiling and running the Lab 03 source code.</li>
 	<li>You need to copy the Lab 03 source code file and pseudocode file to make the following new files: <strong>Lab_06.cpp</strong> and <strong>Lab_06_Pseudocode.txt</strong></li>
 	<li>Modify the Lab 06 pseudocode file to implement “program control” functions as shown in the demonstration materials.</li>
 	<li>Modify the Lab 06 source code file to implement “program control” functions as shown in the demonstration materials.</li>
 	<li>Build (compile and run) your program. You have successfully written this program if when it runs and you use the test data [use the same test data as used in Lab 03] it gives the same results as Lab 03.</li>
 	<li>After you have successfully written this program, if you are taking this course for college credit, follow the instructions from your professor/instructor for submitting it for grading.</li>
</ul>
</section></section><section id="id8819060">
<h3>Problems</h3>
<section id="fs-id7545774">
<h4>Problem 06a – Instructions</h4>
<p id="fs-id7539150">Create a hierarchy chart for the following pseudocode example.</p>

<div id="fs-id5123296" class="ui-has-child-title"><header>
<div>pseudocode</div>
</header><section>
<pre id="fs-id2686045"><code>
******************************************************
Filename:  Average_IQ.txt
Purpose:   Average the IQs of two people
Author:    Ken Busbee; © Kenneth Leroy Busbee
Date:      Jan 17, 2009
******************************************************

Function main
  Pass In: nothing
  Call: get_iqs
  Call: process_iqs
  Call: show_average
  Pass Out: zero to the OS
Endfunction

********************

Function get_iqs
  Pass In: nothing
  display a message asking user for the IQ of the first person
  get the IQ of the first person from the keyboard
  display a message asking user for the IQ of the second person
  get the IQ of the second person from the keyboard
  Pass Out: nothing
Endfunction

********************

Function process_iqs
  Pass In: nothing
  calculate the answer by adding the two IQs and 
  dividing by 2.0
  Pass Out: nothing
Endfunction

********************

Function show_average
  Pass In: nothing
  display the answer with an appropriate message
  Call: pause 
  Pass Out: nothing
Endfunction

********************

Function pause
  Pass In: nothing
  direct the operating system to pause the program
  Pass Out: nothing
Endfunction

******************************************************

Potential Variables

Data Type	Identifier Name
*********	***************
integer	iq1
integer	iq2
double	answer

******************************************************
End of file</code></pre>
</section></div>
</section><section id="fs-id7313517">
<h4>Problem 06b – Instructions</h4>
<p id="fs-id4909890">Identify some problems that make this code "undocumented", "unreadable" or wrong in some other way.</p>

<div id="fs-id2728236" class="ui-has-child-title"><header>
<div>C++ source code</div>
</header><section>
<pre id="fs-id7278279"><code>
//******************************************************
// Author:  Ken Busbee; © 2009 Kenneth Leroy Busbee
// Date:    Jan 17, 2009
//******************************************************

#include &lt;iostream&gt; 
using namespace std;

void pause(void);

int	 age1, age2;
double	 xx;

//******************************************************
// main
//******************************************************

int main(void)
  {
  // Input	
cout &lt;&lt; "\nEnter the age of the first person ---&gt;: ";
  cin &gt;&gt; age1;
    cout &lt;&lt; "\nEnter the age of the second person --&gt;: ";
  cin &gt;&gt; age2;

  // Process
  xx = (age1 + age2) / 2.0;

  // Output
  cout &lt;&lt; "\nThe average of their ages is --------&gt;: ";
  cout &lt;&lt; xx;

  pause();
  return 0;
  }

void pause(void)
  { cout &lt;&lt; "\n\n";
  system("PAUSE");
  cout &lt;&lt; "\n\n";
  return; }

//******************************************************
// End of Program
//******************************************************</code></pre>
</section></div>
</section></section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>172</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:08:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:08:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[practice-6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>42</wp:post_parent>
		<wp:menu_order>12</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Specific Task Functions</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/specific-task-functions/</link>
		<pubDate>Sat, 16 Jun 2018 17:09:56 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=174</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id1172793868466">
<h3>Prerequisite Material</h3>
<p id="id1172788029277">Critical to this module is the review of two Connexions modules:</p>

<ol id="id1172788259279" type="1">
 	<li>Modularization and C++ Program Layout</li>
 	<li>Program Control Functions</li>
</ol>
<p id="id1172787236172">You should review these materials before proceeding. If you are viewing this module on-line, links to these items are in the "Links" box to your right.</p>

</section><section id="id1172787054082">
<h3>General Concept</h3>
<p id="id1172788263883">Program Control functions which might have similar identifier names usually perform slightly different tasks in one program to another. Looking at the organizational chart or hierarchy chart for two companies, both might have a vice president of production, but producing automobiles is different than producing ice cream. Similar but different. As you go down deeper into an organization you might find the job title of security guard. Notice that the security guard at the automobile plant and the security guard at the ice cream plant have exactly the same job. In fact, they are most likely interchangeable. Within programming when a task gets specific it might be useable in several programs. The calculation of leap year is a good example. Needed for the verification of dates, is there or is there not a 29<sup>th</sup> of February for this year. Needed in thousands of programs.</p>

</section><section id="id1172781953365">
<h3>Specific Task Functions</h3>
<p id="id1172781771819">To create good Specific Task functions you need to do all communication needed via parameter passing. Thus all programs that will use the function will communicate in precisely the same way. In our leap year example, you would communicate into the function the year and the function would return the communication of true or false; meaning it is a leap year and there is a 29<sup>th</sup> of February (true) or it is not a leap year (false).</p>
<p id="id1172792794858">The ability to modularize our program into specific task functions means that we can write the specific task function once making sure it works correctly, then reuse it over and over in many programs. As you can guess there is a balance. Most programs will have some program control functions and some specific task functions. The key to deciding if the function should be a specific task function is usually rooted in the uniqueness of the task so that it can be used in many programs. Specific task functions once created are usually placed into a <strong>user defined library</strong> then shared with others for use in many programs.</p>

</section><section id="id1172789033255">
<h2>Key Terms</h2>
<dl id="fs-id1166493803127">
 	<dt>user defined library</dt>
 	<dd id="fs-id1166491390336">A file containing specific task functions created by individuals to be used in many programs.</dd>
</dl>
</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>174</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:09:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:09:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[specific-task-functions]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>42</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Global vs Local Data Storage</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/global-vs-local-data-storage/</link>
		<pubDate>Sat, 16 Jun 2018 17:10:45 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=176</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id5874125">
<h3>General Discussion</h3>
<p id="id5869825">The concept of global and local data storage is usually tied to the concept of scope. Scope is the area of the program where an item (be it variable, constant, function, etc.) that has an identifier name is recognized. In our discussion we will use a variable and the place within a program where the variable is defined determines its scope.</p>
<p id="id8896559"><strong>Global scope</strong> (and by extension global data storage) occurs when a variable is defined "outside of a function". When compiling the program it creates the storage area for the variable within the program's <strong>data area as part of the object code</strong>. The object code has a machine code piece, a data area and linker resolution instructions. Because the variable has global scope it is available to all of the functions within your source code. It can even be made available to functions in other object modules that will be linked to your code; however we will forgo that explanation now. A key wording change should be learned at this point. Although the variable has global scope, technically it is available only from <strong>the point of definition to the end of the program source code</strong>. That is why most variable with global scope are placed near the top of the source code before any functions. This way they are available to all of the functions.</p>
<p id="id11589735"><strong>Local scope</strong> (and by extension local data storage) occurs when a variable is defined "inside of a function". When compiling, the compiler creates machine instructions that will direct the creation of storage locations on an area known as the <strong>stack which is part of the computer's memory</strong>. These memory locations exist until the function completes its task and returns to its calling function. In assembly language we talk about items being pushed onto the stack and popped off the stack when the function terminates. Thus, the stack is a reusable area of memory being used by all functions and released as functions terminate. Although the variable has local scope, technically it is available only from <strong>the point of definition to the end of the function</strong>. The parameter passing of data items into a function establishes them as local variables. Additionally, any other variables or constants needed by the function usually occur near the top of the function definition so that they are available during the entire execution of the function's code.</p>
<p id="id11612431">Scope is an important concept to modularization. Program Control functions usually use global scope for variables and constants placing them near the top of the program before any functions. Specific Task functions use only local scope variables by passing data as needed into the function with parameter passing and creating local variables and constants as needed. Any information that needs to be communicated back to the calling function is again done via parameter passing. This <strong>closed communications model</strong> that passes all data into and out of a function creates an important predecessor concept for <strong>encapsulation</strong> which is used in object oriented programming.</p>

</section><section id="id5758891">
<h2>Key Terms</h2>
<dl id="fs-id6747372">
 	<dt>
<dl id="fs-id6392269">
 	<dt>data area</dt>
 	<dd id="fs-id4089671">A part of an object code file used for storage of data.</dd>
</dl>
<dl id="fs-id1166223140337">
 	<dt></dt>
</dl>
global scope</dt>
 	<dd id="fs-id6317206">Data storage defined outside of a function.</dd>
</dl>
<dl id="fs-id846066">
 	<dt>local scope</dt>
 	<dd id="fs-id1166223141873">Data storage defined inside of a function.</dd>
</dl>
<dl id="fs-id6392269"></dl>
<dl id="fs-id1166223140337">
 	<dt><section id="id5758891">
<dl id="fs-id6758225">
 	<dt>scope</dt>
 	<dd id="fs-id2483258">The area of a source code file where an identifier name is recognized.</dd>
</dl>
</section>stack</dt>
 	<dd id="fs-id1166224405773">A part of the computer's memory used for storage of data.</dd>
</dl>
<dl id="fs-id6758225"></dl>
</section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>176</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:10:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:10:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[global-vs-local-data-storage]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>42</wp:post_parent>
		<wp:menu_order>7</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Using a Header File for User Defined Specific Task Functions</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/using-a-header-file-for-user-defined-specific-task-functions/</link>
		<pubDate>Sat, 16 Jun 2018 17:11:59 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=178</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id4176021">
<h3>Concept: User Defined Specific Task Functions</h3>
<p id="id16731466">Most companies have certain tasks that are unique to their company. Collectively the programming staff may decide to build several functions and organize them into one or more user libraries. Specific task functions are often built using a testing shell program. The sole purpose of the testing shell program is to create the specific task functions and to test them to insure that they are working properly. Think of a clam, its shell surrounds the important part, the pearl. A testing shell program surrounds the specific task function (the important part). Usually the testing shell program will be used to create several functions that will be placed into a user defined library. The process flows as follows:</p>

<ol id="id4975279">
 	<li>The <strong>testing shell</strong> program with the specific task functions is built and thoroughly tested.</li>
 	<li>A copy of the <strong>testing shell</strong> source code is saved as the <strong>header file</strong> that once modified will be placed in the user library. You delete the main part of the program leaving a comments area, any needed include file references and the specific task functions.
<figure id="header_fig" class="ui-has-child-figcaption">
<div>Header File Creation</div>
<span id="headerpic"><img src="https://cnx.org/resources/489e23b878712891fa1f40df2571181bcb039772/header_Figure.jpg" alt="Shows header file creation" /></span>

<figcaption>Creating a header file from a copy of the testing shell.</figcaption></figure>
</li>
 	<li>Another copy of the <strong>testing shell</strong> source code is saved as the prototypes file. This is a text file that retains only the prototypes for the functions that were placed into the <strong>header file</strong>. The functions should be using meaningful identifier names, thus the prototypes should provide adequate information to others on how to call the function with appropriate parameter passing.
<figure id="prototypes_fig" class="ui-has-child-figcaption">
<div>Prototypes File Creation</div>
<span id="prototypespic"><img src="https://cnx.org/resources/f27298b4c04b70c70155a7fece8be12f6b91e507/prototypes_Figure.jpg" alt="Shows prototypes file creation" /></span>

<figcaption>Creating a prototypes file from a copy of the testing shell.</figcaption></figure>
</li>
 	<li>Another copy of the <strong>testing shell</strong> source code is saved as the verify header program. You delete the functions prototypes and definitions then provide an include that points to the header file. This program is compiled and run to make sure the <strong>header file</strong> is working properly.
<figure id="verify_fig" class="ui-has-child-figcaption">
<div>Verify Header File Creation</div>
<span id="verifypic"><img src="https://cnx.org/resources/2a13f511b8d17f1bc3a74569e140f6a51f571dfb/verify_header_Figure.jpg" alt="Shows verify header file creation" /></span>

<figcaption>Creating a verify header file from a copy of the testing shell.</figcaption></figure>
</li>
</ol>
<p id="id7000802">A good way to understand the concept is to review the four files described above that have been created by a programmer. We will be using the C++ programming language, however the code is easy to understand and will serve our needs well at explaining the concepts; even if you are not familiar with C++.</p>

</section><section id="id14692770">
<h3>Demonstration Using C++</h3>
<section id="id13093652">
<h4>Creating a Folder or Sub-Folder for the Four Files</h4>
<p id="id17597355">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id13429178">
 	<li>Monitor_Header</li>
</ul>
<p id="id13424509">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id17227453">
<h4>Download the Four Files</h4>
<p id="id3998360">Download and store the following files to your storage device in the appropriate folder. You may need to right click on some of the links and select "Save Target As" in order to download some of the files.</p>
<p id="id7043706">Download from Connexions: <a href="https://cnx.org/resources/f1fc684abbfb45092cce172657d35c5eaf54152e/Monitor_Testing_Shell.cpp">Monitor_Testing_Shell.cpp</a></p>
<p id="id13679381">Download from Connexions: <a href="https://cnx.org/resources/23a31d2ac39440b4ae1d17b29372bc7c73dcb19c/udst_monitor.h">udst_monitor.h</a></p>
<p id="id15636973">Download from Connexions: <a href="https://cnx.org/resources/e9665806f616f0f32da524c7ac6cb03ab367d008/udst_monitor_prototypes.txt">udst_monitor_prototypes.txt</a></p>
<p id="id16994127">Download from Connexions: <a href="https://cnx.org/resources/20dce63a1ce97f31ed16d75b5c53f2aad81a6230/Monitor_Verify_Header.cpp">Monitor_Verify_Header.cpp</a></p>

</section><section id="id15597682">
<h4>Study the Files Collectively to Understand the Concepts</h4>
<p id="id6552553">Take a few moments to review the files in conjunction with the concept discussion above. You should compile and run the <strong>Monitor_Testing_Shell.cpp</strong> program.</p>

</section><section id="id17699565">
<h4>Creating a Folder or Sub-Folder for your User Library</h4>
<p id="id4311207">Depending on your compiler/IDE, you should decide where to create a folder that will hold the header files you create. We suggest that you create the folder in conjunction with the compiler/IDE software. If you were using the Bloodshed Dev-C++ 5 compiler/IDE you most likely installed the compiler/IDE software at: <strong>C:\Dev-Cpp\</strong> if you installed it on your machine or at: <strong>DriveLetter:\Dev-Cpp\</strong> (where the <strong>DriveLetter</strong> is the drive that represents your flash drive) if you installed it on a flash drive. We suggest that you create a sub-folder at that location named:</p>

<ul id="id6529436">
 	<li>user_library</li>
</ul>
<p id="id4587230">The path of: <strong>C:\Dev-Cpp\user_library</strong> would be created as the location for your user library if using your machine installation. You can literally place it anywhere and name the library any name, but once you decide on a place and name; you do not want to move or rename the folders.</p>

</section><section id="id16223909">
<h4>Placing the Header File into the User Library</h4>
<p id="id17438327">You need to copy the <strong>udst_monitor.h</strong> file placing it into the user_library folder just created. As you can guess the udst stands for user defined specific task. The functions within this header file would be used to control the interaction a user has with the monitor. The .h is a convention of the C++ programming language and indicates a header file. Thus the identifier name for the header file is very meaningful and descriptive.</p>

</section><section id="id14440088">
<h4>Verify that the Header File Works Properly</h4>
<p id="id3187418">Review the <strong>Monitor_Verify_Header.cpp</strong> source code file and note the two include commands are different.</p>

<ol id="id16334335">
 	<li>The Standard Library uses a less than and a greater than to bracket the Standard Library name of: iostream</li>
 	<li>The user library uses quote marks to bracket the location of the header file. This identifies to the complier that we are specifying the exact file we want. We provide a complete file specification (drive, path information, filename and extension).</li>
 	<li>Because this item is technically a string within C++, we must use two back slashes between the drive, path(s) and filename. This is because the first back slash assumes that the next character is an escape code and if we really don't want an escape code but a back slash, the second back slash says no I wanted a back slash.This string: "C:\\Dev-Cpp\\user_library\\udst_monitor.h" will be interpreted to mean: <strong>C:\Dev-Cpp\user_library\udst_monitor.h</strong></li>
</ol>
<p id="id7030585">Depending on what drive you are using, what path folder structure you are using and what you called your folder; you may need to correct the include reference within the source code so that it properly references the header file.</p>
<p id="id5863677">Compile and run the Monitor_Verify_Header.cpp program. Note: It should work exactly as the Monitor_Testing_Shell.cpp program.</p>

</section></section><section id="fs-id2348110">
<h2>Key Terms</h2>
<dl id="fs-id4647324">
 	<dt><section id="fs-id2348110">
<dl id="fs-id4468338">
 	<dt>header file</dt>
 	<dd id="fs-id6011542">A file that contains items we want to have included toward the top of our source code.</dd>
</dl>
</section>testing shell</dt>
</dl>
<dl id="fs-id8508995">
 	<dd id="fs-id8264482">A program used to create specific task functions.</dd>
</dl>
<dl id="fs-id4647324">
 	<dt>udst</dt>
 	<dd id="fs-id8499489">User Defined Specific Task</dd>
</dl>
<dl id="fs-id4468338"></dl>
</section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>178</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:11:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:11:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[using-a-header-file-for-user-defined-specific-task-functions]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>42</wp:post_parent>
		<wp:menu_order>10</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Practice 2</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/practice-7/</link>
		<pubDate>Sat, 16 Jun 2018 17:13:16 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=180</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div class="media-body">
<div id="content"><section id="id4562334">
<h2>Learning Objectives</h2>
<ol id="id12700176" type="1">
 	<li>Understand key terms and definitions as listed in the modules associated with this chapter.</li>
 	<li>Given a testing shell program already coded and tested, create a user defined specific task header file, a user defined specific task prototypes document and a source code program to verify that the header file works properly.</li>
</ol>
</section><section id="id12470850"></section><section id="id9009156">
<h2>Review Questions</h2>
<div id="fs-id3098045"><section>
<div id="fs-id5328234">
<div id="fs-id6584187">
<div>Answer the following statements as either true or false:</div>
<ol>
 	<li>Scope refers to a brand of mouth wash.</li>
 	<li>User defined specific task functions are usually placed into a user defined library.</li>
 	<li>Local and global data storage is associated with the concept of scope.</li>
 	<li>Creating a header file for user defined specific task functions is a difficult task.</li>
 	<li>The stack is part of the computer’s memory used for storage of data.</li>
</ol>
</div>
</div>
<div id="fs-id7207734">
<div class="ui-toggle-wrapper"><section id="id9009156">
<div id="fs-id3098045"><section>
<div id="fs-id7207734" class="ui-solution-visible"><section class="ui-body">
<div id="fs-id7382712">
<div>Answers:</div>
<ol>
 	<li>false – Although Scope is a brand of mouth wash; we are looking for the computer related definition.</li>
 	<li>true</li>
 	<li>true</li>
 	<li>false – It may seem difficult at first, but with a little practice it is really quite easy.</li>
 	<li>true</li>
</ol>
</div>
</section></div>
</section></div>
</section></div>
</div>
</section></div>
</section><section id="id12307943"></section><section id="id7954082">
<h2>Activities</h2>
<section id="id10148662">
<h4>Creating a Folder or Sub-Folder for Chapter 07 Files</h4>
<p id="id8020777">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id9257446">
 	<li>Chapter_07 within the folder named: Cpp_Source_Code_Files</li>
</ul>
<p id="id3935441">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id12445433">
<h4>Download the Lab File(s)</h4>
<p id="id9579918">Download and store the following file(s) to your storage device in the appropriate folder(s). You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id10394050">Download from Connexions: <a href="https://cnx.org/resources/1134847fc1ff105251f639740311fc9e1a461bb3/Lab_07_Testing_Shell.cpp">Lab_07_Testing_Shell.cpp</a></p>

</section><section id="id9099488">
<h4>Detailed Lab Instructions</h4>
<p id="id5605357">Read and follow the directions below carefully, and perform the steps in the order listed.</p>

<ul id="id4678717">
 	<li>Navigate to your sub-folder: Chapter_07. Compile and run the Lab 07 Testing Shell source code. Note: This program uses an include file that points to the "udst_monitor.h" file as explained in Connexions Chapter 7 materials.</li>
</ul>
<ul id="id8035425">
 	<li>Following same process as shown in the Connexions module "Using a Header File for User Defined Specific Task Functions" that is within the Chapter 7 materials; make the following files: <strong>udst_us_to_metric.h</strong> and <strong>udst_us_to_metric_prototypes.txt</strong> and <strong>Lab_07_Verify_Header.cpp</strong></li>
 	<li>Copy the header file to your user library, then build (compile and run) your verify header program.</li>
 	<li>After you have successfully written this program, if you are taking this course for college credit, follow the instructions from your professor/instructor for submitting it for grading.</li>
</ul>
</section></section><section id="id12711368">
<h3>Problems</h3>
<section id="id12689607">
<h4>Problem 07a – Instructions</h4>
<p id="id7921122">Create the pseudocode to solve the following specific task function:</p>
<p id="id7594712">Problem: An interior designer always needs to calculate the area of a room to determine the amount of floor covering needed (usually carpet). The rooms are rectangular with the dimensions measured in feet (with decimal fractions). The function however needs to return square yards. Hint: There are 3 lineal feet to a yard.</p>

</section><section id="id7387526">
<h4>Problem 07b – Instructions</h4>
<p id="id5857593">Create test data for the following specific task function:</p>
<p id="id8573091">Problem: An interior designer always needs to calculate the area of a room to determine the amount of floor covering needed (usually carpet). The rooms are rectangular with the dimensions measured in feet (with decimal fractions). The function however needs to return square yards. Hint: There are 3 lineal feet to a yard.</p>

</section></section></div>
</div>
</div>
<div>
<div class="media-footer"></div>
</div>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>180</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:13:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:13:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[practice-7]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>42</wp:post_parent>
		<wp:menu_order>13</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Standard Libraries</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/standard-libraries/</link>
		<pubDate>Sat, 16 Jun 2018 17:14:10 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=182</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id15263658">
<h3>Overview of Standard Libraries</h3>
<p id="id13411247">Many common or standard functions, whose definitions have been written, are ready to be used in any program. They are organized into a group of functions (think of them as several books) and are collectively called a <strong>Standard Library</strong> There are many function organized into several libraries For example, within C++ many math functions exist and have been coded (and placed into libraries). These functions were written by programmers and tested to insure that they work properly. In most cases the functions were reviewed by several people to double and triple check to insure that they did what was expected. We have the advantage of using these functions with <strong>confidence</strong> that they will work properly in our programs, thus saving us time and money.</p>
<p id="id20184428">A main program must establish the existence of functions used in that program. Depending on the programming language, there is a formal way to:</p>

<ol id="id18398786">
 	<li>define a function</li>
 	<li>declare a function (a prototype is a declaration to a compiler)</li>
 	<li>call a function</li>
</ol>
<p id="id20500298"> When we create functions in our program, we usually see them in the following order in our source code listing:</p>

<ol id="id18242591">
 	<li>declare the function (prototype)</li>
 	<li>call the function</li>
 	<li>define the function</li>
</ol>
<p id="id20249843">When we use functions created by others that have been organized into library, we include a header file in our program which contains the prototypes for the functions. Just like functions that we create, we see them in the following order in our source code listing:</p>

<ol id="id18209192">
 	<li>declaring the function (prototype provided in the include file)</li>
 	<li>call the function (with parameter passing of values)</li>
 	<li>define the function (it is either defined in the header file or the linker program provides the actual object code from a Standard Library object area)</li>
</ol>
<p id="id20162270">In most cases, the user can look at the prototype and understand exactly how the communications (parameter passing) into and out of the function will occur when the function is called. Let's look at the math example of absolute value. The prototype is:</p>
<p id="id15984838"> <code>int abs(int number);</code></p>
<p id="id14643384">Not wanting to have a long function name the designers named it: <strong>abs</strong> instead of "absolute". This might seem to violate the identifier naming rule of using meaningful names, however when identifier names are established for standard libraries they are often shortened to a name that is easily understood by all who would be using them. The function is of data type int, meaning that the function will return an integer value. It is obvious that the integer value returned is the answer to the question, "What is the absolute value of the integer that is being passed into the function". This function is passed only one value; an int number. If I had two integer variables named apple and banana; and I wanted to store the absolute value of banana into apple; then a line of code to call this function would be:</p>
<p id="id19752508"> <code>apple = abs(banana);</code></p>
<p id="id20242036">Let's say it in English, pass the function absolute the value stored in variable banana and assign the returning value from the function to the variable apple. Thus, if you know the prototype you can usually properly call the function and use its returning value (if it has one) without ever seeing the definition of the code (i.e. the source code that tells the function how to get the answer; that is written by someone else; and either included in the header file or compiled and placed into an object library; and linked during the linking step of the Integrated Development Environment (IDE).</p>

</section><section id="id16481103">
<h3>Demonstration Program in C++</h3>
<section id="id19950664">
<h4>Creating a Folder or Sub-Folder for Source Code Files</h4>
<p id="id4075401">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id3977297">
 	<li>Demo_Programs</li>
</ul>
<p id="id9944188">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id19800150">
<h4>Download the Demo Program</h4>
<p id="id6512483">Download and store the following file(s) to your storage device in the appropriate folder(s). You may need to right click on some of the links and select "Save Target As" in order to download some of the files. Following the methods of your compiler/IDE, compile and run the program(s). Study the source code and/or other file(s) in conjunction with other learning materials.</p>
<p id="id19996814">Download from Connexions: <a href="https://cnx.org/resources/b5ae31acbbcd1b33ceb5cefa3044690c94d9400e/Demo_Standard_Libraries.cpp">Demo_Standard_Libraries.cpp</a></p>
<p id="id21045918">Download from Connexions: <a href="https://cnx.org/resources/0b0acf483035fbf7c5e57a206320f6bafa77b958/Demo_Standard_Libraries_Listing.txt">Demo_Standard_Libraries_Listing.txt</a></p>

</section></section><section id="fs-id1172374599160">
<h2>Key Terms</h2>
<dl id="fs-id1172373872725">
 	<dt><section id="fs-id1172374599160">
<dl id="fs-id1172374034905">
 	<dt>abs</dt>
 	<dd id="fs-id1172374125911">A function within the cmath standard library in C++ which stands for absolute.</dd>
</dl>
</section><section id="fs-id1172374599160">
<dl id="fs-id1172373989047">
 	<dt>confidence</dt>
 	<dd id="fs-id1172374148507">The reliance that Standard Library functions work properly.</dd>
</dl>
</section>Standard Library</dt>
 	<dd id="fs-id1172373939794">A set of specific task functions that have been added to the programming language for universal use.</dd>
</dl>
<dl id="fs-id1172373989047"></dl>
</section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>182</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:14:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:14:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[standard-libraries]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>42</wp:post_parent>
		<wp:menu_order>6</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Practice 3</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/practice-8/</link>
		<pubDate>Sat, 16 Jun 2018 17:15:28 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=184</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div class="media-body">
<div id="content"><section id="id1170668562035">
<h2>Learning Objectives</h2>
<ol id="id1170664594624" type="1">
 	<li>Understand key terms and definitions as listed in the modules associated with this chapter.</li>
 	<li>Given a testing shell program already coded and tested, add another specific task function, and test it, then create a user defined specific task header file, a user defined specific task prototypes document and a source code program to verify that the header file works properly.</li>
</ol>
</section><section id="id1170655406550"></section><section id="id1170660609333">
<h2>Review Questions</h2>
<div id="fs-id1172776679633"><section>
<div id="fs-id1172768087714">
<div id="fs-id1172762115796">
<div>Answer the following statements as either true or false:</div>
<ol>
 	<li>The standard library is a set of specific task functions that have been added to the programming language for universal use.</li>
 	<li>Programmers should not have confidence that standard library functions work properly.</li>
 	<li>It would be easier to write programs without using specific task functions.</li>
</ol>
</div>
</div>
<div id="fs-id1172762226531">
<div class="ui-toggle-wrapper">
<div>Answers:</div>
<ol>
 	<li>true</li>
 	<li>false</li>
 	<li>false</li>
</ol>
</div>
</div>
</section></div>
</section><section id="id1170657787084"></section><section id="id1170663806378">
<h2>Activities</h2>
<section id="id1170660421258">
<h4>Creating a Folder or Sub-Folder for Chapter 08 Files</h4>
<p id="id1170656907276">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id1170658638382">
 	<li>Chapter_08 within the folder named: Cpp_Source_Code_Files</li>
</ul>
<p id="id1170663862738">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id1170656679569">
<h4>Download the Lab File(s)</h4>
<p id="id3522394">Download and store the following file(s) to your storage device in the appropriate folder(s). You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id1170659496615">Download from Connexions: <a href="https://cnx.org/resources/d91f0893f2c10069259e63fbf28a2017cf526bd5/Lab_08_Testing_Shell.cpp">Lab_08_Testing_Shell.cpp</a></p>

</section><section id="id1170656951541">
<h4>Detailed Lab Instructions</h4>
<p id="id1170656797690">Read and follow the directions below carefully, and perform the steps in the order listed.</p>

<ul id="id1170668566782">
 	<li>Navigate to your sub-folder: Chapter_08. Compile and run the Lab 08 Testing Shell source code. Note: This program uses an include file that points to the "udst_monitor.h" file as explained in Connexions Chapter 7 materials.</li>
 	<li>You need to add another function to this testing shell titled: area_triangle that is to calculate the area of a triangle. Define the function, prototype it, and within the function main add an area for calling the function (similar to the existing functions with test data). Be confident that it is working properly.</li>
 	<li>Following same process as shown in the Connexions module "Using a Header File for User Defined Specific Task Functions" that is within the Chapter 7 materials; make the following files: <strong>udst_geo_area.h</strong> and <strong>udst_geo_area_prototypes.txt</strong> and <strong>Lab_08_Verify_Header.cpp</strong></li>
 	<li>Copy the header file to your user library, then build (compile and run) your verify header program.</li>
 	<li>After you have successfully written this program, if you are taking this course for college credit, follow the instructions from your professor/instructor for submitting it for grading.</li>
</ul>
</section></section><section id="id1170656949933">
<h3>Problems</h3>
<section id="fs-id1172772825917">
<h4>Problem 08a – Instructions</h4>
<p id="fs-id1172768349200">Write the C++ code to do the following specific task function.</p>

<div id="fs-id1172773578154" class="ui-has-child-title"><header>
<div>pseudocode</div>
</header><section>
<pre id="fs-id1172771897166"><code>
Function area_regular_hexagon
  Pass In: side
  Calculate: side times side times 3 times the square root of 0.75
  Pass Out: the calculation
Endfunction</code></pre>
</section></div>
</section></section></div>
</div>
</div>
<div>
<div class="media-footer"></div>
</div>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>184</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:15:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:15:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[practice-8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>42</wp:post_parent>
		<wp:menu_order>14</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Character Data Type</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/character-data-type/</link>
		<pubDate>Sat, 16 Jun 2018 17:16:39 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=186</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id18951292">
<h3>Overview of the Character Data Type</h3>
<p id="id19911182">The <strong>character</strong> data type basically represents individual or single characters. Characters comprise a variety of symbols such as the alphabet (both upper and lower case) the numeral digits (0 to 9), punctuation, etc. All computers store character data in a one byte field as an integer value. Because a byte consists of 8 bits, this one byte field has 28 or 256 possibilities using the positive values of 0 to 255.</p>
<p id="id23615786">Most microcomputers use the <strong>ASCII</strong> (stands for American Standard Code for Information Interchange and is pronounced "ask-key") Character Set which has established values for 0 to 127. For the values of 128 to 255 they usually use the Extended ASCII Character Set. When we hit the capital A on the keyboard, the keyboard sends a byte with the bit pattern equal to an integer 65. When the byte is sent from the memory to the monitor, the monitor converts the integer value of 65 to into the symbol of the capital A to display on the monitor.</p>
<p id="id21758697">The character data type attributes include:</p>

<table id="id20763270" summary="Table with data about the character data type.">
<tbody>
<tr>
<td>C++ Reserved Word</td>
<td>char</td>
</tr>
<tr>
<td>Represent</td>
<td>Single characters</td>
</tr>
<tr>
<td>Size</td>
<td>1 byte</td>
</tr>
<tr>
<td>Normal Signage</td>
<td>Unsigned (positive values only)</td>
</tr>
<tr>
<td>Domain (Values Allowed)</td>
<td>Values from 0 to 127 as shown in the standard ASCII Character Set, plus values 128 to 255 from the Extended ASCII Character Set</td>
</tr>
<tr>
<td>C++ syntax rule</td>
<td>Single quote marks – Example: 'A'</td>
</tr>
</tbody>
</table>
</section><section id="id23727868">
<h3>Demonstration Program in C++</h3>
<section id="id7564769">
<h4>Creating a Folder or Sub-Folder for Source Code Files</h4>
<p id="id22608300">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id21264198">
 	<li>Demo_Programs</li>
</ul>
<p id="id24071977">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id24238291">
<h4>Download the Demo Program</h4>
<p id="id23542825">Download and store the following file(s) to your storage device in the appropriate folder(s). Following the methods of your compiler/IDE, compile and run the program(s). Study the soruce code file(s) in conjunction with other learning materials.</p>
<p id="id24241581">Download from Connexions: <a href="https://cnx.org/resources/37143adf4840fbbadd983ea68f854691f40176f8/Demo_Character_Data_Type.cpp">Demo_Character_Data_Type.cpp</a></p>

</section></section><section id="fs-id3947541">
<h2>Key Terms</h2>
<dl id="fs-id1169802879840">
 	<dt>
<dl id="fs-id1169791251328">
 	<dt>ASCII</dt>
 	<dd id="fs-id7209912">American Standard Code for Information Interchange</dd>
</dl>
<dl id="fs-id1169799275212">
 	<dt></dt>
</dl>
character</dt>
 	<dd id="fs-id7665000">A data type representing single text characters like the alphabet, numeral digits, punctuation, etc.</dd>
</dl>
<dl id="fs-id1169791251328"></dl>
<dl id="fs-id1169799275212">
 	<dt>single quote marks</dt>
 	<dd id="fs-id3591394">Used to create character type data within the C++ programming language.</dd>
</dl>
</section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>186</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:16:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:16:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[character-data-type]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>62</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sizeof Operator</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/sizeof-operator/</link>
		<pubDate>Sat, 16 Jun 2018 17:17:27 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=187</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="fs-id7362161">
<h3>Overview</h3>
<p id="id5505312">Every data item, constants and variables, not only have a data type, but the data type determines how many bytes the item will use in the memory of the computer. The size of each data type varies with the complier being used and the computer. This effect is known as being <span>machine dependent</span>. Additionally, there have been some size changes with upgrades to the language. In "C" the int data type was allocated 2 bytes of memory storage on an Intel compatible central processing unit (cpu) machine. In "C++" an int is allocated 4 bytes.</p>
<p id="id3913215">There is an operator named "sizeof (… )" that is a unary operator, that is it has only one operand. The operand is to the right of the operator and is placed within the parentheses if it is a data type. The operand may be any data type (including those created by typedef). If the operand is an identifier name it does not need to go inside a set of parentheses. It works for both variable and memory constant identifier names. This operator is unique in that it performs its calculation at compile time for global scoped items and at run time for local scoped items. Examples:</p>
<p id="id5487721"><code>cout &lt;&lt; "The size of an integer is: " &lt;&lt; sizeof (int);</code></p>
<p id="id4800066">The compiler would determine the byte size of an integer on the specific machine and in essence replaces the sizeof operator with a value. Integers are usually 4 bytes long, thus the line of code would be changed to:</p>
<p id="id5568708"><code>cout &lt;&lt; "The size of an integer is: " &lt;&lt; 4;</code></p>
<p id="id5482530">If you place an identifier name that represents a data storage area (variable or memory constant), it looks at the definition for the identifier name. NOTE: the parentheses are not needed and often not included for an identifier name.</p>

<div id="fs-id6071388" class="ui-has-child-title"><header>
<div>sizeof with a Variable</div>
</header><section>
<pre id="fs-id6102840"><code>
double money;     // variable set up with initialization
    then later on in the program
cout &lt;&lt; "The size of money is: " &lt;&lt; sizeof money;</code></pre>
</section></div>
<p id="id5554180">The compiler would determine the byte size of money by looking at the definition where it indicates that the data type is double. The double data type on the specific machine (usually 8 bytes) would replace the code and it would become:</p>
<p id="id4430435"><code>cout &lt;&lt; "The size of money is: " &lt;&lt; 8;</code></p>

</section><section id="fs-id6093708">
<h2>Key Terms</h2>
<dl id="fs-id6091948">
 	<dt>sizeof</dt>
 	<dd id="fs-id5976903">An operator that tells you how many bytes a data type occupies in storage.</dd>
</dl>
</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>187</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:17:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:17:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[sizeof-operator]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>66</wp:post_parent>
		<wp:menu_order>6</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Typedef - An Alias</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/typedef-an-alias/</link>
		<pubDate>Sat, 16 Jun 2018 17:18:04 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=188</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id2351864">
<h3>General Discussion</h3>
<p id="id3849791">The typedef statement allows the programmer to create an alias, or synonym, for an existing data type. This can be useful in documenting a program. The C++ programming language syntax is:</p>
<p id="id6276172"><code>typedef &lt;the real data type&gt; &lt;the alias identifier name&gt;;</code></p>
<p id="id7986150">Let's say a programmer is using a double data type to store the amount of money that is being used for various purposes in a program. He might define the variables as follows:</p>

<div id="fs-id1165749348920" class="ui-has-child-title"><header>
<div>Regular Definition of Variables</div>
</header><section>
<pre id="fs-id1165749355713"><code>
double  income;
double  rent;
double  vacation;</code></pre>
</section></div>
<p id="id7405816">However, he might use the typedef statement and define the variables as follows:</p>

<div id="fs-id1165740462991" class="ui-has-child-title"><header>
<div>Using typedef when Defining Variables</div>
</header><section>
<pre id="fs-id1165740438180"><code>
typedef double cash;
    the typedef must be defined before its use
cash  income;
cash  rent;
cash  vacation;</code></pre>
</section></div>
<p id="id3181440">The typedef statement is not used very often by beginning programmers. It usually creates more confusion than needed, thus stick to using the normal data types at first.</p>

</section><section id="id3052674">
<h2>Key Terms</h2>
<dl id="fs-id1165740724406">
 	<dt>typedef</dt>
 	<dd id="fs-id1165740697848">Allows the programmer to create an alias, or synonym, for an existing data type.</dd>
</dl>
</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>188</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:18:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:18:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[typedef-an-alias]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>62</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sequence Operator</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/sequence-operator/</link>
		<pubDate>Sat, 16 Jun 2018 17:18:55 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=189</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id1169801858525">
<h3>General Discussion</h3>
<p id="id5661549">The <strong>sequence</strong> (or comma) operator is used to separate items. It has several uses, four of which are listed then demonstrated:</p>

<ol id="id7219672" type="1">
 	<li>To separate identifier names when declaring variables or constants</li>
 	<li>To separate several parameters being passed into a function</li>
 	<li>To separate several initialization items or update items in a for loop</li>
 	<li>Separate values during the initialization of an array</li>
</ol>
<p id="id4501712">This first example is often seen in textbooks, but this method of declaring variables is not preferred. It is difficult to quickly read the identifier names.</p>
<p id="id5881380"><code>int pig, dog, cat, rat;</code></p>
<p id="id7145894">The following vertical method of declaring variables or constants is preferred.</p>

<div id="fs-id15737950" class="ui-has-child-title"><header>
<div>Preferred Vertical Method of Defining Variables</div>
</header><section>
<pre id="fs-id14869884"><code>
int  pig;
int  dog;
int  cat;
int  rat;</code></pre>
</section></div>
<p id="id1169802536837">The data types and identifier names (known as parameters) are separated from each other. This example is a function prototype.</p>
<p id="id5805048"><code>double area_trapezoid(double base, double height, double top);</code></p>
<p id="id1169794958382">In the syntax of a for loop you have three parts each separated by a semi-colon. The first is the initialization area which could have more than one initialization. The last is the update area which could have more than one update. Mutiple initializations or updates use the comma to separate them. This example is only the first line of a for loop.</p>
<p id="id1169795238116"><code>for(x = 1, y = 5; x &lt; 15; x++, y++)</code></p>
<p id="id6447886">The variable ages is an array of integers. Initial values are assigned using block markers with the values separated from each other using a comma.</p>
<p id="id5714914"><code>int ages[] = {2,4,6,29,32};</code></p>

</section><section id="id6515358">
<h2>Key Terms</h2>
<dl id="fs-id15548265">
 	<dt>sequence</dt>
 	<dd id="fs-id15820152">An operator used to separate multiple occurrences of an item.</dd>
</dl>
</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>189</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:18:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:18:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[sequence-operator]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>66</wp:post_parent>
		<wp:menu_order>7</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Practice</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/practice-9/</link>
		<pubDate>Sat, 16 Jun 2018 17:19:35 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=190</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id1170467902543">
<h2>Learning Objectives</h2>
<ol id="id8621475" type="1">
 	<li>Understand key terms and definitions as listed in the modules associated with this chapter.</li>
 	<li>Given appropriate documents produced by a System Analyst, create planning documents (pseudocode and test data), then a source code program that accomplishes the goals of the program.</li>
</ol>
</section><section id="id1170475610320"></section><section id="id4600057">
<h2>Review Questions</h2>
<div id="fs-id4225551"><section>
<div id="fs-id9849741">
<div id="fs-id6154915">
<div>Answer the following statements as either true or false:</div>
<ol>
 	<li>The character data type in C++ uses the double quote marks, like: char grade = "A";</li>
 	<li>Sizeof is an operator that tells you how many bytes a data type occupies in storage.</li>
 	<li>Typedef helps people who can't hear and is one of the standard accommodation features of a programming language for people with a learning disability.</li>
 	<li>The sequence operator should be used when defining variables in order to save space.</li>
 	<li>Programming can be both enjoyable and frustrating.</li>
</ol>
</div>
</div>
<div id="fs-id5905947">
<div class="ui-toggle-wrapper">
<div>Answers:</div>
<ol>
 	<li>false</li>
 	<li>true</li>
 	<li>false</li>
 	<li>false</li>
 	<li>true</li>
</ol>
</div>
</div>
</section></div>
</section><section id="id1170472216883"></section><section id="id1170473650360">
<h2>Activities</h2>
<section id="id1170465898590">
<h4>Creating a Folder or Sub-Folder for Chapter 09 Files</h4>
<p id="id7793357">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id1170475596646">
 	<li>Chapter_09 within the folder named: Cpp_Source_Code_Files</li>
</ul>
<p id="id3469025">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id1170466611269">
<h4>Download the Lab File(s)</h4>
<p id="id1170471416033">Download and store the following file(s) to your storage device in the appropriate folder(s). You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id1170472047223">Download from Connexions: <a href="https://cnx.org/resources/8b2bc4fb689b110a74d6df38481e96d09a9aec9e/Lab_09_Narrative_Description.txt">Lab_09_Narrative_Description.txt</a></p>
<p id="id1170472232924">Download from Connexions: <a href="https://cnx.org/resources/500f85d2a7623a36008b68b08f7bbeb3e3ca7a79/Lab_09_Aerial_View_Center_Pivot_Irrigation.jpg">Lab_09_Aerial_View_Center_Pivot_Irrigation.jpg</a></p>
<p id="id8667352">Download from Connexions: <a href="https://cnx.org/resources/7f1f7492bbef4668931180c9098e5fc226f48922/Lab_09_Hierarchy_Chart.jpg">Lab_09_Hierarchy_Chart.jpg</a></p>

</section><section id="id6541009">
<h4>Detailed Lab Instructions</h4>
<p id="id1170473488696">Read and follow the directions below carefully, and perform the steps in the order listed.</p>

<ul id="id1170472043911">
 	<li>Review the Connexions module "Systems Development Life Cycle" within the Chapter 1 materials. Think of yourself as a programmer assigned to a project during the Implementation phase with your professor as the System Analyst.</li>
 	<li>Navigate to your sub-folder: Chapter_09. Review the first two items provided by the system analyst which he produced during the Design phase of the Systems Development Life Cycle. These two documents historically would have been printed and be placed into a program documentation folder. The items you produce in creating the program would be added to the folder. However, shifting to our paperless view of the world, today these items might be created and stored electronically in electronic folders (which is basically what we are doing by using our sub-folder titled: Chapter_09). The third item, the hierarchy chart, would normally be produced by the programmer. However, given your inexperience, the system analyst has created it for you. Make sure you understand what the program is to do. Any questions ask the system analyst (aka your professor).</li>
</ul>
<div id="eip-290"><section>The narrative description for this lab assignment describes how farmers in the mid-west part of the United States irrigate a piece of land using a circular irrigation system. This practice also known to as center pivot irrigation is not unique to the United States. Google "map Qatar", click on the map and switch to the "Satellite" view, zoom in and notice that there are several spots in this small middle eastern country where this type of irrigation is being used. "These systems are found and used in all parts of the world..." which supports the appropriateness of this programming problem to all students.</section></div>
<ul id="id1170468853824">
 	<li>Design the program and create your test data by building a <strong>Lab_09_Pseudocode.txt</strong> file and a <strong>Lab_09_Test_Data.txt</strong> file. WARNING: Don't touch the compiler/IDE. Don't start by creating the source code file. Creating the source code then producing the planning documentation afterwards is a bad habit that beginning programmers often acquire. NOTE: In your pseudocode document you do not need to create any pseudocode for the Standard Library or User Library functions. Just indicate that you call them from the Program Control functions. If needed, review the Connexions module "Pseudocode Examples for Functions" within the Chapter 6 materials. HINT: Copying the pseudocode and test data files from the Chapter 06 folder might be a good way to start building these items.</li>
 	<li>After you have successfully planned the document and created your test data; create the source code file naming it: <strong>Lab_09.cpp </strong>HINTS: Using a previous source code file as your starting file makes sense. The file in the Chapter 06 folder might be a good start. You might want to copy some of the include information from the Verify Header code in Chapter 08 into your Lab 09 source code file.</li>
 	<li>Build (compile and run) your program.</li>
 	<li>After you have successfully written this program, if you are taking this course for college credit, follow the instructions from your professor/instructor for submitting it for grading.</li>
</ul>
</section></section><section id="id1170472013426">
<h3>Problems</h3>
<section id="id1170473606704">
<h4>Problem 09a – Instructions</h4>
<p id="id1170468860720">The sequence operator can be used when declaring multiple identifier names for variables or constants of the same data type. Is this a good or bad programming habit and why?</p>

</section></section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>190</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:19:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:19:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[practice-9]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>62</wp:post_parent>
		<wp:menu_order>8</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Structured Programming</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/structured-programming/</link>
		<pubDate>Sat, 16 Jun 2018 17:21:10 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=196</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id2726508">
<h3>Introduction</h3>
<p id="id5955950">One of the most important concepts of programming is the ability to control a program so that different lines of code are executed or that some lines of code are executed many times. The mechanisms that allow us to control the flow of execution are called <strong>control structures</strong>. Flowcharting is a method of documenting (charting) the flow (or paths) that a program would execute. There are four main categories of control structures:</p>

<ul id="id6230852">
 	<li><strong>Sequence</strong> – Very boring. Simply do one instruction then the next and the next. Just do them in a given sequence or in order listed. Most lines of code are this.</li>
</ul>
<ul id="id3619866">
 	<li><strong>Selection</strong> – This is where you select or choose between two or more flows. The choice is decided by asking some sort of question. The answer determines the path (or which lines of code) will be executed.</li>
</ul>
<ul id="id9271072">
 	<li><strong>Iteration</strong> – Also known as repetition, it allows some code (one to many lines) to be executed (or repeated) several times. The code might not be executed at all (repeat it zero times), executed a fixed number of times or executed indefinitely until some condition has been met. Also known as looping because the flowcharting shows the flow looping back to repeat the task.</li>
</ul>
<ul id="id10557831">
 	<li><strong>Branching</strong> – A control structure that allows the flow of execution to jump to a different part of the program. This category is rarely used in modular structured programming.</li>
</ul>
<p id="id3690454">All high-level programming languages have control structures. All languages have the first three categories of control structures (sequence, selection, and iteration). Most have the if then else structure (which belongs to the selection category) and the whilestructure (which belongs to the iteration category). After these two basic structures there are usually language variations.</p>
<p id="id6284899">The concept of <strong>structured programming</strong> started in the late 1960's with an article by Edsger Dijkstra. He proposed a "go to less" method of planning programming logic that eliminated the need for the branching category of control structures. The topic was debated for about 20 years. But ultimately – "By the end of the 20th century nearly all computer scientists were convinced that it is useful to learn and apply the concepts of structured programming. "<sup id="footnote-ref1"><a href="https://cnx.org/contents/MDgA8wfz@22.2:PqAbUYve@9/Structured-Programming#footnote1">1</a></sup></p>

<section id="id10606099">
<h4>Introduction to Selection Control Structures</h4>
<p id="id6702463">The basic attribute of a selection control structure is to be able to select between two or more alternate paths. This is described as either two-way selection or multiway selection. A question using Boolean concepts usually controls which path is selected. All of the paths from a selection control structure join back up at the end of the control structure, before moving on to the next lines of code in a program.</p>
<p id="id8887108">We have mentioned that the <strong>if then else</strong> control structure belongs to the selection category and is a two-way selection.</p>

<div id="fs-id1170629942332" class="ui-has-child-title"><header>
<div>if then else control structure</div>
</header><section>
<pre id="fs-id4822027"><code>
if (age &gt; 17)
  {
  cout &lt;&lt; "You can vote.";
  }
else
  {
  cout &lt;&lt; "You can't vote.";
  } </code></pre>
</section></div>
</section><section id="id3809427">
<h4>Introduction to Iteration Control Structures</h4>
<p id="id9514669">The basic attribute of an iteration control structure is to be able to repeat some lines of code. The visual display of iteration creates a circular loop pattern when flowcharted, thus the word "loop" is associated with iteration control structures. Iteration can be accomplished with test before loops, counting loops, and test after loops. A question using Boolean concepts usually controls how long the loop will execute.</p>
<p id="id9119014">We have mentioned that the <strong>while</strong> control structure belongs to the iteration category and is a test before loop.</p>

<div id="fs-id6922097" class="ui-has-child-title"><header>
<div>while control structure</div>
</header><section>
<pre id="fs-id1170632372471"><code>
counter = 0;
while (counter &lt; 5)
  {
  cout &lt;&lt; "\nI love computers!";
  counter ++;
  } </code></pre>
</section></div>
</section></section><section id="id17853016">
<h2>Key Terms</h2>
<dl id="ControlStructuresdef">
 	<dt>
<dl id="branchingdef">
 	<dt>branching</dt>
 	<dd id="fs-id23714312">A control structure that allows the flow of execution to jump to a different part of the program.</dd>
</dl>
<dl id="StructuredProgrammingdef">
 	<dt></dt>
</dl>
control structures</dt>
 	<dd id="fs-id23933897">Mechanisms that allow us to control the flow of execution within a program.</dd>
</dl>
<dl id="sequencedef">
 	<dt>
<dl id="selectiondef">
 	<dt>
<dl id="iterationdef">
 	<dt>iteration</dt>
 	<dd id="fs-id24309757">A control structure that allows some lines of code to be executed many times.</dd>
</dl>
<dl id="branchingdef">
 	<dt></dt>
</dl>
selection</dt>
 	<dd id="fs-id22774698">A control structure where you select between two or more choices.</dd>
</dl>
<dl id="iterationdef">
 	<dt></dt>
</dl>
sequence</dt>
 	<dd id="fs-id10560710">A control structure where you do the items in the sequence listed.</dd>
</dl>
<dl id="selectiondef"></dl>
<dl id="iterationdef"></dl>
<dl id="branchingdef"></dl>
<dl id="StructuredProgrammingdef">
 	<dt>structured programming</dt>
 	<dd id="fs-id2371431x">A method of planning programs that avoids the branching category of control structures.</dd>
</dl>
</section>
<div>
<h3>Footnotes</h3>
<ul>
 	<li id="footnote1"><a href="https://cnx.org/contents/MDgA8wfz@22.2:PqAbUYve@9/Structured-Programming#footnote-ref1">1</a> Structured programming from Wikipedia</li>
</ul>
</div>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>196</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:21:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:21:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[structured-programming]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>50</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Pseudocode Examples for Control Structures</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/pseudocode-examples-for-control-structures/</link>
		<pubDate>Sat, 16 Jun 2018 17:22:10 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=197</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id12274657">
<h3>Overview</h3>
<p id="id10138816">No standard for pseudocode syntax exists. However, there are some commonly followed conventions to help make pseudocode written by one programmer easily understood by another programmer. Most of these conventions follow two concepts:</p>

<ul id="id12556130">
 	<li>Use indentation to show the action part of a control structure</li>
 	<li>Use an ending <span>phrase word</span> to end a control structure</li>
</ul>
<p id="id10357506">The sequence control structure simply lists the lines of pseudocode. The concern is not with the sequence category but with selection and two of the iteration control structures. The following are commonly used ending phrase-words:</p>

<table id="id17756368" summary="">
<tbody>
<tr>
<td>Control Structure</td>
<td>Ending Phrase Word</td>
</tr>
<tr>
<td>If then Else</td>
<td>Endif</td>
</tr>
<tr>
<td>Case</td>
<td>Endcase</td>
</tr>
<tr>
<td>While</td>
<td>Endwhile</td>
</tr>
<tr>
<td>For</td>
<td>Endfor</td>
</tr>
</tbody>
</table>
<p id="id7151894">The <strong>Do While</strong> and <strong>Repeat Until</strong> iteration control structures don't need an ending phrase-word. We simply use the first word, then the action part, followed by the second word with the test expression. Here are some examples:</p>

</section><section id="fs-id9267538">
<h3>Selection Control Structures</h3>
<div id="fs-id9500456" class="ui-has-child-title"><header>
<div>pseudocode: If then Else</div>
</header><section>
<pre id="fs-id6307540"><code>
If age &gt; 17
  Display a message indicating you can vote.
Else
  Display a message indicating you can't vote.
Endif </code></pre>
</section></div>
<div id="fs-id5094556" class="ui-has-child-title"><header>
<div>pseudocode: Case</div>
</header><section>
<pre id="fs-id5312864"><code>
Case of age
  0 to 17   Display "You can't vote."
  18 to 64  Display "You're in your working years."
  65 +      Display "You should be retired."
Endcase </code></pre>
</section></div>
</section><section id="id9357488">
<h3>Iteration (Repetition) Control Structures</h3>
<div id="fs-id3580722" class="ui-has-child-title"><header>
<div>pseudocode: While</div>
</header><section>
<pre id="fs-id8629443"><code>
count assigned zero
While count &lt; 5
  Display "I love computers!"
  Increment count
Endwhile </code></pre>
</section></div>
<div id="fs-id1170864218945" class="ui-has-child-title"><header>
<div>pseudocode: For</div>
</header><section>
<pre id="fs-id3388116"><code>
For x starts at 0, x &lt; 5, increment x
  Display "Are we having fun?"
Endfor </code></pre>
</section></div>
<div id="fs-id1170864419479" class="ui-has-child-title"><header>
<div>pseudocode: Do While</div>
</header><section>
<pre id="fs-id8465216"><code>
count assigned five
Do
  Display "Blast off is soon!"
  Decrement count
While count &gt; zero </code></pre>
</section></div>
<div id="fs-id1170864209121" class="ui-has-child-title"><header>
<div>pseudocode: Repeat Until</div>
</header><section>
<pre id="fs-id4466955"><code>
count assigned five
Repeat
  Display "Blast off is soon!"
  Decrement count
Until count &lt; one </code></pre>
</section></div>
</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>197</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:22:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:22:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[pseudocode-examples-for-control-structures]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>50</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Flowcharts</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/flowcharts/</link>
		<pubDate>Sat, 16 Jun 2018 17:22:54 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=198</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Overview</h2>
A <strong>flowchart</strong> is a type of diagram that represents an algorithm, workflow or process. The flowchart shows the steps as boxes of various kinds, and their order by connecting the boxes with arrows. This diagrammatic representation illustrates a solution model to a given problem. Flowcharts are used in analyzing, designing, documenting or managing a process or program in various fields.[footnote]<a href="https://en.wikipedia.org/wiki/Flowchart">Wikipedia: Flowchart</a>[/footnote]
<h2>Discussion</h2>
Common flowcharting symbols and examples follow. When first reading this section, focus on the symbols and a few examples. Return to this section in later chapters to review the advanced examples.
<h3>Flowcharting Symbols</h3>
<h4>Terminal</h4>
<p id="id10157688">The rounded rectangles, or terminal points, indicate the flowchart's starting and ending points.</p>

<figure id="id11662638"><span id="id11662638_media"><img id="id11662638__onlineimage" src="https://cnx.org/resources/4d060a6d3ffe8bbaccd577871706e380517d721b/graphics1.jpg" alt="" width="199" height="149" /></span></figure>
<h4>Process</h4>
<p id="id10926322">The rectangle depicts a process such as a mathematical computation, or a variable assignment.</p>

<figure id="id10849251"><span id="id10849251_media"><img id="id10849251__onlineimage" src="https://cnx.org/resources/33bfa211c179dc84c92d59195d442191e7fa719a/graphics2.jpg" alt="" width="204" height="153" /></span></figure>
<h4>Input/Output</h4>
<p id="id11372620">The parallelograms designate input or output operations.</p>

<figure id="id10954704"><span id="id10954704_media"><img id="id10954704__onlineimage" src="https://cnx.org/resources/4710371ccc2c36d934cdf89ef37e1ff68130ac53/graphics3.jpg" alt="" width="200" height="150" /></span></figure>
<h4>Connectors</h4>
<p id="id11495772">Sometimes a flowchart is broken into two or more smaller flowcharts. This is usually done when a flowchart does not fit on a single page, or must be divided into sections. A connector symbol, which is a small circle with a letter or number inside it, allows you to connect two flowcharts on the same page. A connector symbol that looks like a pocket on a shirt, allows you to connect to a flowchart on a different page.</p>
<p id="id11068608">On-Page Connector</p>

<figure id="id5528203"><span id="id5528203_media"><img id="id5528203__onlineimage" src="https://cnx.org/resources/9c7e99db74be2cf7b857411888902f02b96d3baa/graphics4.jpg" alt="" width="197" height="148" /></span></figure>
<p id="id10685037">Off-Page Connector</p>

<figure id="id7578010"><span id="id7578010_media"><img id="id7578010__onlineimage" src="https://cnx.org/resources/62f741f8061f7cc8bc5c7768c9c920148f8fb31e/graphics5.jpg" alt="" width="197" height="148" /></span></figure>
<h4>Decision</h4>
<p id="id8826387">The diamond is used to represent the true/false statement being tested in a decision symbol.</p>

<figure id="id10680628"><span id="id10680628_media"><img id="id10680628__onlineimage" src="https://cnx.org/resources/50248fde8a1b5c63b98227c5a9e45697d01c5e94/graphics6.jpg" alt="" width="203" height="152" /></span></figure>
<h4>Module Call</h4>
<p id="id10673737">A program module is represented in a flowchart by rectangle with some lines to distinguish it from process symbol. Often programmers will make a distinction between program control and specific task modules as shown below.</p>
<p id="id10815340">Local module: usually a program control function.</p>

<figure id="id10777617"><span id="id10777617_media"><img id="id10777617__onlineimage" src="https://cnx.org/resources/40b487c7dd66d5d869d00cfd74a931b67bd6ebcb/graphics7.jpg" alt="" width="199" height="149" /></span></figure>
<p id="id11696999">Library module: usually a specific task function.</p>

<figure id="id11594425"><span id="id11594425_media"><img id="id11594425__onlineimage" src="https://cnx.org/resources/4da061e2b498531657360cd395ad4d06d2fdcc7a/graphics8.jpg" alt="" width="199" height="149" /></span></figure>
<h4>Flow Lines</h4>
<p id="id11384588">Note: The default flow is left to right and top to bottom (the same way you read English). To save time arrowheads are often only drawn when the flow lines go contrary the normal.</p>

<figure id="id9735069"><span id="id9735069_media"><img id="id9735069__onlineimage" src="https://cnx.org/resources/ba3b4a3d6fe809bd190ccc14bf6d0934183b0f00/graphics9.jpg" alt="" width="199" height="149" /></span></figure>
<h3>Examples</h3>
<p id="id10719940">We will demonstrate various flowcharting items by showing the flowchart for some pseudocode.</p>

<h4>Functions</h4>
<div id="fs-id12170330" class="ui-has-child-title"><header>
<div>pseudocode: Function with no parameter passing</div>
</header>
<pre id="fs-id13001103"><code>Function clear monitor
    Pass In: nothing
    Direct the operating system to clear the monitor
    Pass Out: nothing
Endfunction </code></pre>
</div>
<figure id="id11429984" class="ui-has-child-figcaption"><span id="id11429984_media"><img id="id11429984__onlineimage" src="https://cnx.org/resources/9ff9a8e3d52bacd9c2f564135b9ca1a773a5b592/graphics10.jpg" alt="" width="300" height="225" /></span><figcaption>Function clear monitor</figcaption></figure>
<div id="fs-id1170639604206" class="ui-has-child-title"><header>
<div>pseudocode: Function main calling the clear monitor function</div>
</header>
<pre id="fs-id1170639379334"><code>Function main
    Pass In: nothing
    Doing some lines of code
    Call: clear monitor
    Doing some lines of code
    Pass Out: value zero to the operating system
Endfunction </code></pre>
</div>
<figure id="id10877406" class="ui-has-child-figcaption"><span id="id10877406_media"><img id="id10877406__onlineimage" src="https://cnx.org/resources/7c89ef9679d68af6c38c917ebaf94cd46ab40853/graphics11.jpg" alt="" width="301" height="226" /></span><figcaption>Function main</figcaption></figure>
<h4>Sequence Control Structures</h4>
<p id="id10947176">The next item is pseudocode for a simple temperature conversion program. This demonstrates the use of both the on-page and off-page connectors. It also illustrates the sequence control structure where nothing unusually happens. Just do one instruction after another in the sequence listed.</p>

<div id="fs-id1170629268619" class="ui-has-child-title"><header>
<div>pseudocode: Sequence control structure</div>
</header>
<pre id="fs-id1170636473727"><code>Filename: Solution_Lab_04_Pseudocode.txt
Purpose:  Convert Temperature from Fahrenheit to Celsius
Author:   Ken Busbee; © 2008 Kenneth Leroy Busbee
Date:     Dec 24, 2008

Pseudocode = IPO Outline

input
    display a message asking user for the temperature in Fahrenheit
    get the temperature from the keyboard

</code><code>processing
    calculate the Celsius by subtracting 32 from the Fahrenheit
    temperature then multiply the result by 5 then
    divide the result by 9. Round up or down to the whole number.
    HINT: Use 32.0 when subtracting to ensure floating-point accuracy.

</code><code>output
    display the celsius with an appropriate message
    pause so the user can see the answer </code></pre>
</div>
<figure id="id8852977" class="ui-has-child-figcaption"><span id="id8852977_media"><img id="id8852977__onlineimage" src="https://cnx.org/resources/2835a6b09798b662775235858ced7fda81391895/graphics12.jpg" alt="" width="303" height="227" /></span><figcaption>Sequence control structure</figcaption></figure>
<figure id="id11415583" class="ui-has-child-figcaption"><span id="id11415583_media"><img id="id11415583__onlineimage" src="https://cnx.org/resources/c24e859a7abd993f08aa0ba3adb2df18c2f15baf/graphics13.jpg" alt="" width="303" height="227" /></span><figcaption>Sequence control structured continued</figcaption></figure>
<h4>Selection Control Structures</h4>
<div id="fs-id1170640819602" class="ui-has-child-title"><header>
<div>pseudocode: If then Else</div>
</header>
<pre id="fs-id1170634227422"><code>If age &gt; 17
    Display a message indicating you can vote.
Else
    Display a message indicating you can't vote.
Endif </code></pre>
</div>
<figure id="id10777662" class="ui-has-child-figcaption"><span id="id10777662_media"><img id="id10777662__onlineimage" src="https://cnx.org/resources/79d10967f0252175c591c55c2ccddba61ceb7ea6/graphics14.jpg" alt="" width="298" height="224" /></span><figcaption>If then Else control structure</figcaption></figure>
<div id="fs-id1170633716709" class="ui-has-child-title"><header>
<div>pseudocode: Case</div>
</header>
<pre id="fs-id1170625917096"><code>Case of age
    0 to 17   Display "You can't vote."
    18 to 64  Display "Your in your working years."
    65 +      Display "You should be retired."
Endcase </code></pre>
</div>
<figure id="id9261442" class="ui-has-child-figcaption"><span id="id9261442_media"><img id="id9261442__onlineimage" src="https://cnx.org/resources/e10b6f07f77a2597795e20b3e43544669ddf9d9c/graphics15.jpg" alt="" width="300" height="225" /></span><figcaption>Case control structure</figcaption></figure>
<h4>Iteration (Repetition) Control Structures</h4>
<div id="fs-id3758928" class="ui-has-child-title"><header>
<div>pseudocode: While</div>
</header>
<pre id="fs-id5547975"><code>count assigned zero
While count &lt; 5
    Display "I love computers!"
    Increment count
Endwhile </code></pre>
</div>
<figure id="id10179778" class="ui-has-child-figcaption"><span id="id10179778_media"><img id="id10179778__onlineimage" src="https://cnx.org/resources/4ae7acff4db1742dd5ed6f7a62c756c0b07f5df7/graphics16.jpg" alt="" width="300" height="225" /></span><figcaption>While control structure</figcaption></figure>
<div id="fs-id4291203" class="ui-has-child-title"><header>
<div>pseudocode: For</div>
</header>
<pre id="fs-id5711388"><code>For x starts at 0, x &lt; 5, increment x
    Display "Are we having fun?"
Endfor </code></pre>
</div>
<p id="id9735568">The for loop does not have a standard flowcharting method and you will find it done in different ways. The for loop as a counting loop can be flowcharted similar to the while loop as a counting loop.</p>

<figure id="id10139424" class="ui-has-child-figcaption"><span id="id10139424_media"><img id="id10139424__onlineimage" src="https://cnx.org/resources/f07708e8b1e06842d6c9b227e3865aa85981c2bc/graphics17.jpg" alt="" width="300" height="225" /></span><figcaption>For control structure</figcaption></figure>
<div id="fs-id3005447" class="ui-has-child-title"><header>
<div>pseudocode: Do While</div>
</header>
<pre id="fs-id2194288"><code>count assigned five
Do
    Display "Blast off is soon!"
    Decrement count
While count &gt; zero </code></pre>
</div>
<figure id="id10940075" class="ui-has-child-figcaption"><span id="id10940075_media"><img id="id10940075__onlineimage" src="https://cnx.org/resources/fef690abd6b065b0f619a3bc0f98a824cf57a745/graphics18.jpg" alt="" width="300" height="225" /></span><figcaption>Do While control structure</figcaption></figure>
<div id="fs-id2797917" class="ui-has-child-title"><header>
<div>pseudocode: Repeat Until</div>
</header>
<pre id="fs-id2536424"><code>count assigned five
Repeat
    Display "Blast off is soon!"
    Decrement count
Until count &lt; one </code></pre>
</div>
<figure id="id10854900" class="ui-has-child-figcaption"><span id="id10854900_media"><img id="id10854900__onlineimage" src="https://cnx.org/resources/7c3c13ed7cd8e8b9220f3df3b8424befbe995ec2/graphics19.jpg" alt="" width="299" height="224" /></span><figcaption>Repeat Until control structure</figcaption></figure>
<h2>Key Terms</h2>
<dl id="flowchartingdef">
 	<dt>
<dl id="DecisionSymboldef">
 	<dt>decision symbol</dt>
 	<dd id="fs-id24309757">A diamond used in flowcharting for asking a question and making a decision.</dd>
</dl>
<dl id="FlowLinesdef">
 	<dt>flow lines</dt>
 	<dd id="fs-id23714312">Lines (sometimes with arrows) that connect the various flowcharting symbols.</dd>
</dl>
flowcharting</dt>
 	<dd id="fs-id23933897">A programming design tool that uses graphical elements to visually depict the flow of logic within a function.</dd>
</dl>
<dl id="ProcessSymboldef">
 	<dt>
<dl id="InputOutputSymboldef">
 	<dt>input/output symbol</dt>
 	<dd id="fs-id22774698">A parallelogram used in flowcharting for input/output interactions.</dd>
</dl>
<dl id="DecisionSymboldef">
 	<dt></dt>
</dl>
process symbol</dt>
 	<dd id="fs-id10560710">A rectangle used in flowcharting for normal processes such as assignment.</dd>
</dl>
<dl id="InputOutputSymboldef"></dl>
<dl id="DecisionSymboldef"></dl>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>198</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:22:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:22:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[flowcharts]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>3</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[flowcharting]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Practice 1</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/practice-10/</link>
		<pubDate>Sat, 16 Jun 2018 17:23:30 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=199</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id3397049">
<h2>Learning Objectives</h2>
<ol id="id7538695" type="1">
 	<li>Understand key terms and definitions as listed in the modules associated with this chapter.</li>
 	<li>Given pseudocode, write the C++ code for a program that uses if then else and while control structures.</li>
</ol>
</section><section id="id15115617"></section><section id="id14555270">
<h2>Review Questions</h2>
<div id="fs-id22483898"><section>
<div id="fs-id20802768">
<div id="fs-id22864625">
<div>Answer the following statements as either true or false:</div>
<ol>
 	<li>There are only two categories of control structures.</li>
 	<li>Branching control structures are rarely used in good structured programming.</li>
 	<li>If then else is a multiway selection control structure.</li>
 	<li>The while control structure is part of the branching category.</li>
 	<li>Pseudocode is better than flowcharting.</li>
</ol>
</div>
</div>
<div id="fs-id22225798">
<div class="ui-toggle-wrapper">
<div>Answers:</div>
<ol>
 	<li>false</li>
 	<li>true</li>
 	<li>false</li>
 	<li>false</li>
 	<li>false</li>
</ol>
</div>
</div>
</section></div>
</section><section id="id3934770"></section><section id="id4550720">
<h2>Activities</h2>
<section id="id10054221">
<h4>Creating a Folder or Sub-Folder for Chapter 10 Files</h4>
<p id="id3445193">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id3583082">
 	<li>Chapter_10 within the folder named: Cpp_Source_Code_Files</li>
</ul>
<p id="id3339212">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id4896124">
<h4>Download the Lab File(s)</h4>
<p id="id4628129">Download and store the following file(s) to your storage device in the appropriate folder(s). You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id12549660">Download from Connexions: <a href="https://cnx.org/resources/2634dafc93d381293a6df25965ce6df27456f722/Lab_10_Pseudocode.txt">Lab_10_Pseudocode.txt</a></p>

</section><section id="id3591482">
<h4>Detailed Lab Instructions</h4>
<p id="id7263785">Read and follow the directions below carefully, and perform the steps in the order listed.</p>

<ul id="id12471505">
 	<li>Create a source code file from the Lab_10_Pseudocode.txt file. Name it: Lab_10.cpp</li>
 	<li>Build (compile and run) your program.</li>
 	<li>After you have successfully written this program, if you are taking this course for college credit, follow the instructions from your professor/instructor for submitting it for grading.</li>
</ul>
</section></section><section id="id4281217">
<h3>Problems</h3>
<section id="id4633277">
<h4>Problem 10a – Instructions</h4>
<p id="id3613097">List the four categories of control structures and provide a brief description of each category.</p>

</section></section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>199</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:23:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:23:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[practice-10]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>50</wp:post_parent>
		<wp:menu_order>10</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>If Then Else</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/if-then-else/</link>
		<pubDate>Sat, 16 Jun 2018 17:24:51 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=204</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id19911606">
<h3>Introduction to Two Way Selection</h3>
<section id="id21048125">
<h4>Traditional Two Way Selection</h4>
<p id="id9756135">We are going to introduce the control structure from the selection category that is available in every high level language. It is called the <strong>if then else</strong> structure. Asking a question that has a true or false answer controls the if then else structure. It looks like this:</p>

<pre id="idklb22201"><code>
if the answer to the question is true
  then do this
else because it's false
  do this </code></pre>
<p id="id19269884">In most languages the question (called a <span>test expression</span>) is a <span>Boolean expression</span>. The Boolean data type has two values – true and false. Let's rewrite the structure to consider this:</p>

<pre id="idklb22202"><code>
if expression is true
  then do this
else because it's false
  do this</code></pre>
<p id="id19511696">Some languages use reserved words of: "if", "then" and "else". Many eliminate the "then". Additionally the "do this" can be tied to true and false. You might see it as:</p>

<pre id="idklb22203"><code>
if expression is true
  action true
else
  action false</code></pre>
<p id="id19836514">And most languages infer the "is true" you might see it as:</p>

<pre id="idklb22204"><code>
if expression
  action true
else
  action false</code></pre>
<p id="id16738994">The above four forms of the control structure are saying the same thing. The else word is often not used in our English speaking today. However, consider the following conversation between a mother and her child.</p>
<p id="id9393212">Child asks, "Mommy, may I go out side and play?"</p>
<p id="id18319848">Mother answers, "If your room is clean then you may go outside and play or else you may go sit on a chair for five minutes as punishment for asking me the question when you knew your room was dirty."</p>
<p id="id19296094">Let's note that all of the elements are present to determine the action (or flow) that the child will be doing. Because the question (your room is clean) has only two possible answers (true or false) the actions are <strong>mutually exclusive</strong>. Either the child 1) goes outside and plays or 2) sits on a chair for five minutes. One of the actions is executed; never both of the actions.</p>

</section><section id="id19670024">
<h4>One Choice – Implied Two Way Selection</h4>
<p id="id11290118">Often the programmer will want to do something only if the expression is true, that is with no false action. The lack of a false action is also referred to as a "null else" and would be written as:</p>

<pre id="idklb22205"><code>
if expression
  action true 
else 
  do nothing </code></pre>
<p id="id3365889">Because the "else do nothing" is implied, it is usually written in short form like:</p>

<pre id="idklb22206"><code>
if expression
  action true </code></pre>
</section></section><section id="id11299994">
<h3>Two Way Selection within C++</h3>
<p id="id20357047">The syntax for the if then else control structure within the C++ programming language is:</p>

<pre id="idklb22207"><code>
if (expression)
  statement;
else
  statement; </code></pre>
<p id="id11657987">Note: The test expression is within the parentheses, but this is not a function call. The parentheses are part of the control structure. Additionally, there is no semicolon after the parenthesis following the expression.</p>

</section><section id="id17853016">
<h2>Key Terms</h2>
<dl id="IfThenElsedef">
 	<dt>if then else</dt>
 	<dd id="fs-id23933897">A two way selection control structure.</dd>
</dl>
<dl id="MutuallyExclusivedef">
 	<dt>mutually exclusive</dt>
 	<dd id="fs-id10560710">Items that do not overlap. Example: true and false.</dd>
</dl>
</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>204</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:24:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:24:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[if-then-else]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>50</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Boolean Data Type</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/boolean-data-type/</link>
		<pubDate>Sat, 16 Jun 2018 17:25:35 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=205</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Overview</h2>
A <strong>Boolean data type</strong> has one of two possible values (usually denoted true and false), intended to represent the two truth values of logic and Boolean algebra. It is named after George Boole, who first defined an algebraic system of logic in the mid 19th century. The Boolean data type is primarily associated with conditional statements, which allow different actions by changing control flow depending on whether a programmer-specified Boolean condition evaluates to true or false.[footnote]<a href="https://en.wikipedia.org/wiki/Boolean_data_type">Wikipedia: Boolean data type</a>[/footnote]
<h2>Discussion</h2>
The Boolean data type is also known as the logical data type and represents the concepts of true and false. The name "Boolean" comes from the mathematician George Boole; who in 1854 published: An Investigation of the Laws of Thought. Boolean algebra is the area of mathematics that deals with the logical representation of true and false using the numbers 0 and 1. The importance of the Boolean data type within programming is that it is used to control programming structures (if then else, while loops, etc.) that allow us to implement "choice" into our algorithms.

The Boolean data type has the same attributes and acts or behaves similarly in all programming languages. However, while all languages recognize false as 0, some languages define true as -1 rather than 1. This the result of storing the Boolean values as an integer and using a one's complement representation that negates all bits rather than only the rightmost bit. To simplify processing, most programming languages accept any non-zero value as being true.
<table>
<tbody>
<tr>
<th>Language</th>
<th>Reserved Word</th>
<th>True</th>
<th>False</th>
</tr>
<tr>
<td>C++</td>
<td><code>bool</code></td>
<td><code>true</code></td>
<td><code>false</code></td>
</tr>
<tr>
<td>C#</td>
<td><code>bool</code> or <code>Boolean</code></td>
<td><code>true</code></td>
<td><code>false</code></td>
</tr>
<tr>
<td>Java</td>
<td><code>bool</code></td>
<td><code>true</code></td>
<td><code>false</code></td>
</tr>
<tr>
<td>JavaScript</td>
<td><code>Boolean()</code></td>
<td><code>true</code></td>
<td><code>false</code></td>
</tr>
<tr>
<td>Python</td>
<td><code>bool()</code></td>
<td><code>True</code></td>
<td><code>False</code></td>
</tr>
</tbody>
</table>
<h2>Key Terms</h2>
<dl>
 	<dt>Boolean</dt>
 	<dd>A data type representing the concepts of true or false.</dd>
</dl>
<dl>
 	<dt>one's complement</dt>
 	<dd>The value obtained by inverting all the bits in the binary representation of a number (swapping 0s for 1s and vice versa).</dd>
</dl>
<dl></dl>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>205</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:25:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:25:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[boolean-data-type]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>7</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="dbraunsc"><![CDATA[Dave Braunschweig]]></category>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Relational Operators</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/relational-operators/</link>
		<pubDate>Sat, 16 Jun 2018 17:26:25 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=206</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id5473667">
<h3>Overview of the Relational Operators</h3>
<p id="id5473673">The relational operators are often used to create a <span>test expression</span> that controls program flow. This type of expression is also known as a <span>Boolean expression</span> because they create a Boolean answer or value when evaluated. There are six common relational operators that give a Boolean value by comparing (showing the relationship) between two operands. If the operands are of different data types, implicit promotion occurs to convert the operands to the same data type.</p>

<dl id="RelationalOperatordef">
 	<dt>relational operator</dt>
 	<dd id="fs-id20302425">An operator that gives a Boolean value by evaluating the relationship between two operands.</dd>
</dl>
<p id="id5748679">Operator symbols and/or names vary with different programming languages. The C++ programming language operators with their meanings are:</p>

<table id="id5817767" summary="">
<tbody>
<tr>
<td>C++ Operator</td>
<td>Meaning</td>
</tr>
<tr>
<td>&lt;</td>
<td>less than</td>
</tr>
<tr>
<td>&gt;</td>
<td>greater than</td>
</tr>
<tr>
<td>&lt;=</td>
<td>less than or equal to</td>
</tr>
<tr>
<td>&gt;=</td>
<td>greater than or equal to</td>
</tr>
<tr>
<td>==</td>
<td>equality (equal to)</td>
</tr>
<tr>
<td>!=</td>
<td>inequality (not equal to)</td>
</tr>
</tbody>
</table>
<div id="id23499204"><section>
<div id="id8714006">
<div id="Booleanexpq">
<div>Evaluate the following Boolean expressions:</div>
<ol>
 	<li>9 &lt; 25</li>
 	<li>9 &lt; 3</li>
 	<li>9 &gt; 14</li>
 	<li>9 &lt;= 17</li>
 	<li>9 &gt;= 25</li>
 	<li>9 == 13</li>
 	<li>9 != 13</li>
 	<li>9 !&lt; 25</li>
</ol>
</div>
</div>
<div id="id8714024">
<div class="ui-toggle-wrapper"></div>
</div>
</section></div>
<p id="id5819729">The answers to Boolean expressions within the C++ programming language are a value of either 1 for true or 0 for false.</p>
<p id="id5819738">Be careful.  In math you are familiar with using this symbol = to mean equal and ≠ to mean not equal.  In the C++ programming language the ≠ is not used and the = symbol means assignment.</p>

</section><section id="id5819753">
<h3>Demonstration Program in C++</h3>
<section id="id5821760">
<h4>Creating a Folder or Sub-Folder for Source Code Files</h4>
<p id="id5821767">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the <span>Bloodshed Dev-C++ 5 compiler/IDE</span> might be named:</p>

<ul id="id5821790">
 	<li>Demo_Programs</li>
</ul>
<p id="id5821799">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id5821806">
<h4>Download the Demo Program</h4>
<p id="id5821813">Download and store the following file(s) to your storage device in the appropriate folder(s). You may need to right click on the link and select "Save Target As" in order to download the file. Following the methods of your compiler/IDE, compile and run the program(s). Study the source code file(s) in conjunction with other learning materials.</p>
<p id="id5821829">Download from Connexions: <a href="https://cnx.org/resources/0f2ea182fac1aa52764912dc762346a7f1e893a2/Demo_Relational_Operators.cpp">Demo_Relational_Operators.cpp</a></p>

</section></section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>206</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:26:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:26:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[relational-operators]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>50</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Compound Statement</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/compound-statement/</link>
		<pubDate>Sat, 16 Jun 2018 17:27:04 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=207</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id15846993">
<h3>The Need for a Compound Statement</h3>
<p id="id17723763">For illustration we will use the syntax for the if then else control structure within the C++ programming language. However this problem generally exists for all control structures within any language that requires the use of compound statements. The syntax is:</p>

<pre id="kld440001"><code>
if (expression)
  statement;
else
  statement;</code></pre>
<p id="id17830775">Within the C++ programming language there can be <strong>only one statement listed as the action part of a control structure</strong>. Often, we will want to do more than one statement. This problem is overcome by creating a <strong>compound statement</strong>. The brace symbols – the opening { and the closing } - are used to create a compound statement. For example:</p>

<pre id="kld440002"><code>
if(expression)
  {
  statement;
  statement;
  }
else
  {
  statement;
  statement;
  }</code></pre>
<p id="id17830612">Because programmers often forget that they can have <strong>only one statement listed as the action part of a control structure</strong>; the C++ programming industry encourages the use of indentation (to see the action parts clearly) and the use of compound statements (braces), even if there is only one action. Thus:</p>

<pre id="kld440003"><code>
if(expression)
  {
  statement;
  }
else
  {
  statement;
  }</code></pre>
<p id="id15841375">By writing code in this manner, if the programmer modifies the code by adding more statements to either the action true or the action false; they will not introduce either compiler or logic errors. Using indentation and braces should become standard practice for C++ programmers and programmers in any other language that require the use of compound statements with the control structures.</p>

</section><section id="id21235949">
<h3>Other Uses of a Compound Statement</h3>
<p id="id11019715">"A compound statement is a unit of code consisting of zero or more statements. It is also known as a <strong>block</strong>. The compound statement allows a group of statements to become one single entry. You used a compound statement in your first program when you formed the body of the function main. All C++ functions contain a compound statement known as the function body.</p>
<p id="id19293845">A compound statement consists of an opening brace, optional declarations, definitions, and statements, followed by a closing brace. Although all three are optional, one should be present."<sup id="footnote-ref1"><a href="https://cnx.org/contents/MDgA8wfz@22.2:bZYjzYSm@4/Compound-Statement#footnote1">1</a></sup></p>

</section><section id="id17853016">
<h2>Key Terms</h2>
<dl id="CompoundStatementdef">
 	<dt><section id="id17853016">
<dl id="blockdef">
 	<dt>block</dt>
 	<dd id="fs-id10560710">Another name for a compound statement.</dd>
</dl>
</section>compound statement</dt>
 	<dd id="fs-id23933897">A unit of code consisting of zero or more statements.</dd>
</dl>
<dl id="blockdef"></dl>
</section>
<div>
<h3>Footnotes</h3>
<ul>
 	<li id="footnote1"><a href="https://cnx.org/contents/MDgA8wfz@22.2:bZYjzYSm@4/Compound-Statement#footnote-ref1">1</a> Behrouz A. Forouzan and Richard F. Gilberg, <u>Computer Science A Structured Approach using C++ Second Edition</u> (United States of America: Thompson – Brooks/Cole, 2004) 100.</li>
</ul>
</div>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>207</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:27:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:27:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[compound-statement]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>50</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Practice 2</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/practice-11/</link>
		<pubDate>Sat, 16 Jun 2018 17:27:37 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=208</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div class="media-body">
<div id="content"><section id="id18935722">
<h2>Learning Objectives</h2>
<ol id="id18935738" type="1">
 	<li>Understand key terms and definitions as listed in the modules associated with this chapter.</li>
 	<li>Given pseudocode, write the C++ code for a program that uses the if then else control structure.</li>
</ol>
</section><section id="id18935760"></section><section id="id18935785">
<h2>Review Questions</h2>
<div id="idBooleanExpCh11"><section>
<div id="idBooleanExpCh11p">
<div id="BooleanexpqCh11">
<div>Evaluate the following Boolean expressions:</div>
<ol>
 	<li>25 &lt; 7</li>
 	<li>3 &lt; 7</li>
 	<li>14 &gt; 7</li>
 	<li>17 &lt;= 7</li>
 	<li>25 &gt;= 7</li>
 	<li>13 == 7</li>
 	<li>9 != 7</li>
 	<li>5 !&gt; 7</li>
</ol>
</div>
</div>
<div id="idBooleanExpCh11s">
<div class="ui-toggle-wrapper">
<div>Answers:</div>
<ol>
 	<li>0</li>
 	<li>1</li>
 	<li>1</li>
 	<li>0</li>
 	<li>1</li>
 	<li>0</li>
 	<li>1</li>
 	<li>Error, the “not greater than” is not a valid operator.</li>
</ol>
</div>
</div>
</section></div>
</section><section id="id18935796"></section><section id="id18935808">
<h2>Activities</h2>
<section id="id18935814">
<h4>Creating a Folder or Sub-Folder for Chapter 11 Files</h4>
<p id="id18935822">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id18935846">
 	<li>Chapter_11 within the folder named: Cpp_Source_Code_Files</li>
</ul>
<p id="id18935860">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id18935867">
<h4>Download the Lab File(s)</h4>
<p id="id18935874">Download and store the following file(s) to your storage device in the appropriate folder(s). You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id18935892">Download from Connexions: <a href="https://cnx.org/resources/72208e72459e7644c304fc2e5d85920b8857bdf2/Lab_11_Pseudocode.txt">Lab_11_Pseudocode.txt</a></p>

</section><section id="id18935912">
<h4>Detailed Lab Instructions</h4>
<p id="id18935918">Read and follow the directions below carefully, and perform the steps in the order listed.</p>

<ul id="id18935927">
 	<li>Create a source code file from the Lab_11_Pseudocode.txt file. Name it: Lab_11.cpp</li>
 	<li>Build (compile and run) your program.</li>
 	<li>After you have successfully written this program, if you are taking this course for college credit, follow the instructions from your professor/instructor for submitting it for grading.</li>
</ul>
</section></section><section id="id18935966">
<h3>Problems</h3>
<section id="id18935972">
<h4>Problem 11a – Instructions</h4>
<p id="id18935979">Create a table with the six relational operators and their meanings.</p>

</section><section id="idproblem11b">
<h4>Problem 11b – Instructions</h4>
<p id="idprob11b">Explain why we are using the "if then else" to manipulate the input data in the example below.</p>

<div id="fs-id6221200" class="ui-has-child-title"><header>
<div>C++ source code</div>
</header><section>
<pre id="fs-id6543855"><code>
cout &lt;&lt; "\nEnter one side of the rectangle ---------&gt;: " ;
cin &gt;&gt; side1; 
cout &lt;&lt; "\nEnter the other side of the rectangle ---&gt;: " ;
cin &gt;&gt; side2;

if (side1 &gt; side2)
  {
  length = side1;
  width = side2;
  }
else
  {
  length = side2;
  width = side1;
  } </code></pre>
</section></div>
</section></section></div>
</div>
</div>
<div>
<div class="media-footer"></div>
</div>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>208</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:27:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:27:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[practice-11]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>50</wp:post_parent>
		<wp:menu_order>11</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Nested If Then Else</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/nested-if-then-else/</link>
		<pubDate>Sat, 16 Jun 2018 17:29:16 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=214</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id7715228">
<h3>Introduction to Mulitway Selection</h3>
<section id="id5327388">
<h4>Nested Control Structures</h4>
<p id="id11319196">We are going to first introduce the concept of nested control structures. Nesting is a concept that places one item inside of another. Consider:</p>

<pre id="klb123001"><code>
if expression
  true action
else 
  false action </code></pre>
<p id="id8451328">This is the basic form of the if then else control structure. Now consider:</p>

<pre id="klb123002"><code>
if age is less than 18
  you can't vote
  if age is less than 16
    you can't drive
  else
    you can drive
else 
  you can vote
  if age is less than 21
    you can't drink 
  else
    you can drink </code></pre>
<p id="id7578512">As you can see we simply included as part of the "true action" a statement and another if then else control structure. We did the same (nested another if then else) for the "false action". In our example we nested if then else control structures. Nesting could have an if then else within a while loop. Thus, the concept of nesting allows the mixing of the different categories of control structures.</p>

</section><section id="id8454750">
<h4>Multiway Selection</h4>
<p id="id5878323">One of the drawbacks of two way selection is that we can only consider two choices. But what do you do if you have more than two choices. Consider the following which has four choices:</p>

<pre id="klb123003"><code>
if age equal to 18
  you can now vote
else
  if age equal to 39
    you are middle aged 
  else
    if age equal to 65
      you can consider retirement
    else
      your age is unimportant </code></pre>
<p id="id10042664">You get an appropriate message depending on the value of age. The last item is referred to as the default. If the age is not equal to 18, 39 or 65 you get the default message. In some situations there is no default action. Consider:</p>

<pre id="klb123004"><code>
if age equal to 18
  you can now vote
else
  if age equal to 39
    you are middle aged 
  else
    if age equal to 65
      you can consider retirement </code></pre>
<p id="id5320433">The last if then else control structure has no "else". It’s implied "else do nothing". Without the default the multiway selection could be written as a series of "if then without the else" structures. Consider:</p>

<pre id="klb123005"><code>
if age equal to 18
  you can now vote
if age equal to 39
  you are middle aged 
if age equal to 65
  you can consider retirement </code></pre>
<p id="id6248877">We have shown two ways to accomplish multiway selection. The choice of using nested if then else control structures or a series of if then control structures is decided on the existence of a default action (you must use nested if then else) or programmer preference if there is not a default action (you may use nested if then else or a series of if then control structures).</p>

</section></section><section id="id20648468">
<h3>if then else Syntax within C++</h3>
<p id="id6302583">The syntax for the if then else control structure within the C++ programming language is:</p>

<div id="fs-id14681707" class="ui-has-child-title"><header>
<div>C++ source code: Layout of an if then else</div>
</header><section>
<pre id="klb123006"><code>
if (expression)
  {
  statement;
  }
else
  {
  statement;
  } </code></pre>
</section></div>
<div id="fs-id1165508025922"><section>The test expression is within the parentheses, but this is not a function call. The parentheses are part of the control structure. Additionally, there is no semicolon after the parenthesis following the expression.</section></div>
</section><section id="id3804765">
<h3>C++ Example</h3>
<p id="id7716460">Multiway selection is often needed to cover all possibilities. Assume that the user has been prompted for the ages of two people with the answers stored in variables named age1 and age2. Consider:</p>

<div id="fs-id17408779" class="ui-has-child-title"><header>
<div>C++ source code</div>
</header><section>
<pre id="klb123007"><code>
if(age1 &gt; age2)
  {
  cout &lt;&lt; "\n\nThe first person is older.";
  }
else
  {
  cout &lt;&lt; "\n\nThe second person is older.";
  } </code></pre>
</section></div>
<p id="id4613047">What if the two persons are the same age? The program incorrectly says the second person is older. To solve this we must handle all three possibilities. Consider this mulitway selection example:</p>

<div id="fs-id16435984" class="ui-has-child-title"><header>
<div>C++ source code</div>
</header><section>
<pre id="klb123008"><code>
if(age1 == age2)
  {
  cout &lt;&lt; "\n\nThey are the same age.";
  }
else
  {
  if(age1 &gt; age2)
    {
    cout &lt;&lt; "\n\nThe first person is older.";
    }
  else
    {
    cout &lt;&lt; "\n\nThe second person is older.";
    }
  } </code></pre>
</section></div>
</section><section id="fs-id15783615">
<h2>Key Terms</h2>
<dl id="fs-id16717739">
 	<dt><section id="fs-id15783615">
<dl id="fs-id13913970">
 	<dt>multiway selection</dt>
 	<dd id="fs-id17319160">Using control structures to be able to select from more than two choices.</dd>
</dl>
</section>nested control structures</dt>
 	<dd id="fs-id12791817">Placing one control structure inside of another.</dd>
</dl>
<dl id="fs-id13913970"></dl>
</section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>214</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:29:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:29:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nested-if-then-else]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>50</wp:post_parent>
		<wp:menu_order>6</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Logical Operators</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/logical-operators/</link>
		<pubDate>Sat, 16 Jun 2018 17:30:11 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=215</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id10235629">
<h3>Overview of the Logical Operators</h3>
<p id="id13207090">Within most languages, expressions that yield Boolean data type values are divided into two groups. One group uses the relational operators within their expressions and the other group uses logical operators within their expressions.</p>
<p id="id7828341">The logical operators are often used to help create a <span>test expression</span> that controls program flow. This type of expression is also known as a <span>Boolean expression</span> because they create a Boolean answer or value when evaluated. The answers to Boolean expressions within the C++ programming language are a value of either 1 for true or 0 for false. There are three common logical operators that give a Boolean value by manipulating other Boolean operand(s). Operator symbols and/or names vary with different programming languages. The C++ programming language operators with their meanings are:</p>

<table id="id14101414" summary="">
<tbody>
<tr>
<td>C++ Operator</td>
<td>Meaning</td>
<td>Comment</td>
<td>Typing</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>Logical and</td>
<td></td>
<td>two ampersands</td>
</tr>
<tr>
<td>||</td>
<td>Logical or</td>
<td></td>
<td>two vertical dashes or piping symbols</td>
</tr>
<tr>
<td>!</td>
<td>Logical not</td>
<td>unary</td>
<td>the exclamation point</td>
</tr>
</tbody>
</table>
<div id="eip-394"><section>The vertical dashes or piping symbol is found on the same key as the backslash \. You use the SHIFT key to get it. It is just above the Enter key on most keyboards. It may be a solid vertical line on some keyboards and show as a solid vertical line on some print fonts.</section></div>
<p id="id14229140">In most languages there are strict rules for forming proper logical expressions.  An example is:</p>
<p id="id14942895"><code>6 &gt; 4 &amp;&amp; 2 &lt;= 14</code></p>
<p id="id5457226">This expression has two relational operators and one logical operator.  Using the precedence of operator rules the two "relational comparison" operators will be done before the "logical and" operator. Thus:</p>
<p id="id14874819"><code>1 &amp;&amp; 1</code></p>
<p id="id14543798">or</p>
<p id="id14340490"><code>true &amp;&amp; true</code></p>
<p id="id5428271">The final evaluation of the expression is:  1  meaning true.</p>
<p id="id14913058">We can say this in English as: It is true that six is greater than four and that two is less than or equal to fourteen.</p>
<p id="id14212408">When forming logical expressions programmers often use parentheses (even when not technically needed) to make the logic of the expression very clear.  Consider the above complex Boolean expression rewritten:</p>
<p id="id14212288"><code>(6 &gt; 4) &amp;&amp; (2 &lt;= 14)</code></p>

</section><section id="id10063206">
<h3>Truth Tables</h3>
<p id="id13531882">A common way to show logical relationships is in truth tables.</p>

<table id="id14588061" summary=""><caption><span>Logical and (&amp;&amp;)</span></caption>
<tbody>
<tr>
<td><strong>x</strong></td>
<td><strong>y</strong></td>
<td><strong>x &amp;&amp; y</strong></td>
</tr>
<tr>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>false</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>true</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>true</td>
<td>true</td>
<td>true</td>
</tr>
</tbody>
</table>
<table id="id9756046" summary=""><caption><span>Logical or (||)</span></caption>
<tbody>
<tr>
<td><strong>x</strong></td>
<td><strong>y</strong></td>
<td><strong>x ||y</strong></td>
</tr>
<tr>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>false</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>true</td>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>true</td>
<td>true</td>
<td>true</td>
</tr>
</tbody>
</table>
<table id="id14952392" summary=""><caption><span>Logical not (!)</span></caption>
<tbody>
<tr>
<td><strong>x</strong></td>
<td><strong>!x</strong></td>
</tr>
<tr>
<td>false</td>
<td>true</td>
</tr>
<tr>
<td>true</td>
<td>false</td>
</tr>
</tbody>
</table>
</section><section id="id13532708">
<h3>Examples</h3>
<p id="id7949396">I call this example of why I hate "and" and love "or".</p>
<p id="id13532843">Everyday as I came home from school on Monday through Thursday; I would ask my mother, "May I go outside and play?" She would answer, "If your room is clean and your homework is done then you may go outside and play." I learned to hate the word "and". I could manage to get one of the tasks done and have some time to play before dinner, but both of them… well, I hated "and".</p>
<p id="id7811357">On Friday my mother took a more relaxed view point and when asked if I could go outside and play she responded, "If your room is clean or your homework is done then you may go outside and play." I learned to clean my room quickly on Friday afternoon. Well needless to say, I loved "or".</p>
<p id="id14915375">For the next example, just imagine a teenager talking to their mother. During the conversation mom says, "After all, your Dad is reasonable!" The teenager says, "Reasonable. (short pause) Not."</p>
<p id="id10739965">Maybe college professors will think that all their students studied for the exam. Ha ha! Not. Well, I hope you get the point.</p>

<div id="idLogicalExpCh11"><section>
<div id="idLogicalExpCh11p">
<div id="LogicalexpqCh11">
<div>Evaluate the following Logical Boolean expressions:</div>
<ol>
 	<li>25 &lt; 7 || 15 &gt; 36</li>
 	<li>15 &gt; 36 || 3 &lt; 7</li>
 	<li>14 &gt; 7 &amp;&amp; 5 &lt;= 5</li>
 	<li>4 &gt; 3 &amp;&amp; 17 &lt;= 7</li>
 	<li>! false</li>
 	<li>! (13 != 7)</li>
 	<li>9 != 7 &amp;&amp; ! 0</li>
 	<li>5 &gt; &amp;&amp; 7</li>
</ol>
</div>
</div>
<div id="idLogicalExpCh11s">
<div class="ui-toggle-wrapper"></div>
</div>
</section></div>
</section><section id="id14542043">
<h3>Demonstration Program in C++</h3>
<section id="id14311493">
<h4>Creating a Folder or Sub-Folder for Source Code Files</h4>
<p id="id13897929">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the <span>Bloodshed Dev-C++ 5 compiler/IDE</span> might be named:</p>

<ul id="id13240380">
 	<li>Demo_Programs</li>
</ul>
<p id="id13898195">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id9390624">
<h4>Download the Demo Program</h4>
<p id="id11271850">Download and store the following file(s) to your storage device in the appropriate folder(s). You may need to right click on the link and select "Save Target As" in order to download the file. Following the methods of your compiler/IDE, compile and run the program(s). Study the source code file(s) in conjunction with other learning materials.</p>
<p id="id9404473">Download from Connexions: <a href="https://cnx.org/resources/8b3cdf9f3ec146a6a8f6a3625753debf4878b7b7/Demo_Logical_Operators.cpp">Demo_Logical_Operators.cpp</a></p>

</section></section><section id="fs-id21403577">
<h2>Key Terms</h2>
<dl id="fs-id21501614">
 	<dt>logical operator</dt>
 	<dd id="fs-id21359875">An operator used to create complex Boolean expressions.</dd>
</dl>
<dl id="fs-id21151494">
 	<dt>truth tables</dt>
 	<dd id="fs-id19214454">A common way to show logical relationships.</dd>
</dl>
</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>215</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:30:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:30:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[logical-operators]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>50</wp:post_parent>
		<wp:menu_order>7</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Case Control Structure</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/case-control-structure/</link>
		<pubDate>Sat, 16 Jun 2018 17:30:50 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=216</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id20986482">
<h3>Traditional Case Control Structure</h3>
<section id="id11615130">
<h4>Multiway Selection using the Case Structure</h4>
<p id="id22747136">One of the drawbacks of two way selection is that we can only consider two choices. But what do you do if you have more than two choices. Consider the following which has four choices:</p>

<pre id="klb7777001"><code>
if age equal to 18
  you can vote
else
  if age equal to 39
    you're middle aged
  else
    if age equal to 65
      consider retirement
  else
      age is un-important </code></pre>
<p id="id16217601">You get an appropriate message depending on the value of age. The last item is referred to as the default. If the age is not equal to 18, 39 or 65 you get the default message. In some situations there is no default action. Consider this flowchart example:</p>

<figure id="id6590574"><span id="id6590574_media"><img id="id6590574__onlineimage" src="https://cnx.org/resources/a6bc1b14d128044bf0ed6ed10ffc511664113d39/graphics1.jpg" alt="" width="600" height="450" /></span></figure>
<p id="id21705848">This flowchart is of the case control structure and is used for multiway selection. The decision box holds the variable age. The logic of the case is one of equality where in the value in the variable age is compared to the listed values in order from left to right. Thus, the value stored in age is compared to 18 or is "age equal to 18". If it is true, the logic flows down through the action and drops out at the bottom of the case structure. If the value of the test expression is false, it moves to the next listed value to the right and makes another comparison. It works exactly the same as our nested if then else structure.</p>

</section><section id="id21416675">
<h4>C++ Code to Accomplish Multiway Selection</h4>
<p id="id6183995">Using the same example as above, here is the C++ code to accomplish the case control structure.</p>

<div id="fs-id27686425" class="ui-has-child-title"><header>
<div>C++ source code - case structure with integers</div>
</header><section>
<pre id="klb7777002"><code>
switch (age)
  {
  case 18: cout &lt;&lt; "\nYou can vote.";
           break;
  case 39: cout &lt;&lt; "\nYou're middle aged.";
           break;
  case 65: cout &lt;&lt; "\nConsider retirement.";
           break;
  default: cout &lt;&lt; "\nAge is un-important.";
  } </code></pre>
</section></div>
<p id="id3491843">The first thing you should note is that the C++ programming language does not formally have a case control structure. It does have a switch control structure but it acts differently than the traditional case control structure. We use a break (which is a branching control structure) with the switch to make it act like the traditional case structure. This is one of the few allowable ways to use the switch with break within the C++ programming language to simulate the traditional case structure. All other uses of the switch or break are to be avoided if you are to stay within the bounds of good structured programming techniques.</p>
<p id="id8642187">The value in the variable age is compared to the first "case" (note: <strong>case</strong> is one of the C++ reserved words) which is the value 18 (also called the listed value) using an equality comparison or is "age equal to 18". If it is true, the cout is executed which displays “You can vote.” and the next line of code (the break) is done (which jumps us to the end of the control structure). If it is false, it moves on to the next case for comparison.</p>
<p id="id939999">Most programming languages, including C++, require the listed values for the case control structure be of the integer family of data types. This basically means either an integer or character data type. Consider this example that uses character data type (choice is a character variable):</p>

<div id="fs-id27686999" class="ui-has-child-title"><header>
<div>C++ source code - case structure with characters</div>
</header><section>
<pre id="klb7777992"><code>
switch (choice)
  {
  case 'A': cout &lt;&lt; "\nYou are an A student.";
            break;
  case 'B': cout &lt;&lt; "\nYou are a B student.";
            break;
  case 'C': cout &lt;&lt; "\nYou are a C student.";
            break;
  default:  cout &lt;&lt; "\nMaybe you should study harder.";
  } </code></pre>
</section></div>
</section></section><section id="id9155430">
<h3>Limitations of the Case Control Structure</h3>
<p id="id9391773">Most programming languages, including C++, do not allow ranges of values for case like structures. Consider this flowcharting example that used ranges:</p>

<figure id="id21672254"><span id="id21672254_media"><img id="id21672254__onlineimage" src="https://cnx.org/resources/e10b6f07f77a2597795e20b3e43544669ddf9d9c/graphics2.jpg" alt="" width="600" height="450" /></span></figure>
Consider also the following pseudocode for the same logic:
<pre id="klb7777003"><code>
Case of age
  0 to 17    Display "You can't vote."
  18 to 64   Display "You’re in your working years."
  65 +       Display "You should be retired."
Endcase </code></pre>
<p id="id13685054">Using the case control structure when using non integer family or ranges of values is allowed when designing a program and documenting that design with pseudocode or flowcharting. However, the implementation in most languages would follow a <span>nested if then else</span> approach with complex Boolean expressions. The logic of the above examples would look like this:</p>

<pre id="klb7777004"><code>
if age &gt; 0 and age &lt;= to 17
  display You can’t vote.
else
  if age is &gt;= 18 and age &lt;= 64
    display You’re in your working years.
  else
    display You should be retired. </code></pre>
</section><section id="id13419136">
<h3>Good Structured Programming Methods</h3>
<p id="id13707774">Most text book authors confirm that good structured programming techniques and habits are more important than concentrating on the technical possibilities and capabilities of the language that you are using to learn programming skills.  Remember, this module is concentrating on programming fundamentals and concepts and it uses the C++ programming language to build our initial programming skills.  It is not a created with the intent to cover the C++ programming language in detail, despite the fact that at times we have to cover C++ language mechanics.</p>

</section><section id="fs-id21778039">
<h2>Key Terms</h2>
<dl id="fs-id27174378">
 	<dt>case</dt>
 	<dd id="fs-id24266892">A control structure that does mulitway selection.</dd>
</dl>
<dl id="fs-id27059584">
 	<dt>switch</dt>
 	<dd id="fs-id27013209">A C++ control structure that can be made to act like a case control structure.</dd>
</dl>
</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>216</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:30:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:30:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[case-control-structure]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>50</wp:post_parent>
		<wp:menu_order>8</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Branching Control Structures</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/branching-control-structures/</link>
		<pubDate>Sat, 16 Jun 2018 17:31:27 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=217</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id16727295">
<h3>Discussion</h3>
<p id="id18283828">The branching control structures allow the flow of execution to jump to a different part of the program. The common branching control structures that are used with other control structures are: break, continue and goto. These are rarely used in modular structured programming with one exception. That exception is in relation to creating the case within the selection category of control structures. Within C++ the break is used with the switch to create a structure that acts like the traditional case structure. There is one other branching control structure that is often not viewed as branching control structure. It is: return; which is used with functions. Thus, there are two commonly used branching control reserved words used in C++; break and return. Additionally, we will add to our list of branching items a pre-defined function commonly used in the C++ programming language of: exit; that is part of the C standard library (cstdlib). Some definitions:</p>

<section id="fs-id17872049">
<h4>Definitions</h4>
<dl id="fs-id4741226">
 	<dt>branching control structures</dt>
 	<dd id="fs-id16162550">Allow the flow of execution to jump to a different part of the program.</dd>
</dl>
<dl id="fs-id3815820">
 	<dt>break</dt>
 	<dd id="fs-id21996204">A branching control structure that terminates the existing structure.</dd>
</dl>
<dl id="fs-id18222049">
 	<dt>continue</dt>
 	<dd id="fs-id10679360">A branching control structure that causes a loop to stop its current iteration and begin the next one.</dd>
</dl>
<dl id="fs-id11691112">
 	<dt>goto</dt>
 	<dd id="fs-id25057031">A branching control structure that causes the logic to jump to a different place in the program.</dd>
</dl>
<dl id="fs-id18606050">
 	<dt>return</dt>
 	<dd id="fs-id18783314">A branching control structure that causes a function to jump back to the function that called it.</dd>
</dl>
<dl id="fs-id26612846">
 	<dt>exit</dt>
 	<dd id="fs-id10027836">A pre-defined function used to prematurely stop a program and jump to the operating system.</dd>
</dl>
</section>
<p id="id17648939">We will discuss each item indicating which ones are allowed or not allowed within good structured programming practices.</p>

</section><section id="id16111738">
<h3>Examples</h3>
<section id="id17846400">
<h4>break</h4>
<p id="id17571826">The break is used in one of two ways; with the switch (a C++ programming structure) to make it act like a case structure (it's more common name within most programming languages) or as part of a looping process to break out of the loop. The first usage is allowed in good structured programming and the second is not allowed in good structured programming.</p>

<div id="fs-id7531480" class="ui-has-child-title"><header>
<div>C++ source code</div>
</header><section>
<pre id="klb8888001"><code>
switch (age)
  {
  case 18: cout &lt;&lt; "\nYou can vote.";
           break;
  case 39: cout &lt;&lt; "\nYou are middle aged.";
           break;
  case 65: cout &lt;&lt; "\nYou are at retirement age.";
           break;
  default: cout &lt;&lt; "\nYour current age is not important.";
  } </code></pre>
</section></div>
<p id="id16858440">The following is an unauthorized use of break in a loop and it gives the appearance that the loop will execute 8 times, but the break statement causes it to stop during the fifth iteration.</p>

<div id="fs-id7035391" class="ui-has-child-title"><header>
<div>C++ source code</div>
</header><section>
<pre id="klb8888002"><code>
counter = 0;
while(counter &lt; 8)
  {
  cout &lt;&lt; counter &lt;&lt; endl;
  if (counter == 4)
    {
    break;
    }
  counter++;
  } </code></pre>
</section></div>
</section><section id="id17853893">
<h4>continue</h4>
<p id="id18061788">The continue structure is not allowed in good structured programming. The following gives the appearance that the loop will print to the monitor 8 times, but the continue statement causes it not to print number 4.</p>

<div id="fs-id7318406" class="ui-has-child-title"><header>
<div>C++ source code</div>
</header><section>
<pre id="klb8888003"><code>
for(counter = 0; counter &lt; 8; counter++)
  {
  if (counter == 4)
    {
    continue;
    }
  cout &lt;&lt; counter &lt;&lt; endl;
  } </code></pre>
</section></div>
</section><section id="id12311835">
<h4>goto</h4>
<p id="id18084264">The goto structure is not allowed in good structured programming. It is with a certain amount of hesitancy that we even show it. Many textbooks do not cover the goto. Within the C++ programming language you create a label with an identifier name followed by a colon. You use the command word goto followed by the label. A label can be used before it is declared.</p>

<div id="fs-id7831685" class="ui-has-child-title"><header>
<div>C++ source code</div>
</header><section>
<pre id="klb8888004"><code>
some lines of code; 
goto mynewspot;                //jumps to the label
some lines of code; 
some lines of code; 
some lines of code; 
mynewspot: some statement;     //Declared label
some lines of code; </code></pre>
</section></div>
</section><section id="id17898569">
<h4>return</h4>
<p id="id16220531">The return is allowed in good structured programming, but only at the end of a function. A function should not pre-maturely end by having the logic of the function have it terminate by jumping back to the function that called it.</p>

<div id="fs-id7807340" class="ui-has-child-title"><header>
<div>C++ source code</div>
</header><section>
<pre id="klb8888005"><code>
//******************************************************
// get data
//******************************************************

void get_data(void)
  {
  // Input - Test Data - 5678.9, 5432.1
  cout &lt;&lt; "\nEnter the length of the property in feet ---&gt;: ";
  cin &gt;&gt; property_length;
  cout &lt;&lt; "\nEnter the width of the property in feet ----&gt;: ";
  cin &gt;&gt; property_width;
  return;
  } </code></pre>
</section></div>
</section><section id="id17880694">
<h4>exit</h4>
<p id="id4709687">Although exit is technically a pre-defined function, it is covered here because of its common usage in programming. A good example is the opening a file and then testing to see if the file was actually opened. If not, we have an error that usually indicates that we want to pre-maturely stop the execution of the program. Within the C++ programming language the exit function terminates the running of the program and in the process returns an integer value back to the operating system. It fits the definition of branching which is to jump to some other place in the program. In our example the value returned to the operating system is the value of the constant named: EXIT_FAILURE.</p>

<div id="fs-id7757245" class="ui-has-child-title"><header>
<div>C++ source code</div>
</header><section>
<pre id="klb8888006"><code>
inData.open(filename);  //Open input file
if (!inData)            //Test to see if file was opened
  {
  cout &lt;&lt; "\n\nError opening file: " &lt;&lt; filename &lt;&lt; "\n\n";
  pause();              //Pause - user reads message
  exit(EXIT_FAILURE);   //Allows a pre-mature jump to OS
  } </code></pre>
</section></div>
</section></section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>217</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:31:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:31:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[branching-control-structures]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>50</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Practice 3</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/practice-12/</link>
		<pubDate>Sat, 16 Jun 2018 17:31:59 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=218</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id20278184">
<h2>Learning Objectives</h2>
<ol id="id19956092" type="1">
 	<li>Understand key terms and definitions as listed in the modules associated with this chapter.</li>
 	<li>Identify which selection control structures are two-way selection and which are multiway selection.</li>
 	<li>Understand, define and/or explain case, switch and nested if then else.</li>
 	<li>Be able to write pseudo code or flowcharting for the case control structure.</li>
 	<li>Be able to write C++ source code for a case structure using equality and listed values (switch with break to act like a case structure).</li>
 	<li>Be able to write C++ source code for a case structure using ranges of values or floating-point values (nested if then else to act like a case structure).</li>
 	<li>When feasible, be able to convert C++ source code from switch acting like a case to nested if then else and vice versa.</li>
</ol>
</section><section id="id20388311"></section><section id="id20478224">
<h2>Review Questions</h2>
<div id="fs-id18149648"><section>
<div id="fs-id18031098">
<div id="fs-id18108211">
<div>Evaluate the following Logical Boolean expressions:</div>
<ol>
 	<li>25 &gt; 39 || 15 &gt; 36</li>
 	<li>19 &gt; 26 || 13 &lt; 17</li>
 	<li>14 &lt; 7 &amp;&amp; 6 &lt;= 6</li>
 	<li>4 &gt; 3 &amp;&amp; 17 &gt;= 7</li>
 	<li>! true</li>
 	<li>! (13 == 7)</li>
 	<li>9 != 7 &amp;&amp; ! 1</li>
 	<li>6 &lt; &amp;&amp; 8</li>
</ol>
</div>
</div>
<div id="fs-id18230323">
<div class="ui-toggle-wrapper">
<div>Answers:</div>
<ol>
 	<li>0</li>
 	<li>1</li>
 	<li>0</li>
 	<li>1</li>
 	<li>0</li>
 	<li>1</li>
 	<li>0</li>
 	<li>Error, there needs to be an operand between the operators &lt; and &amp;&amp;.</li>
</ol>
</div>
</div>
</section></div>
</section><section id="id19632388"></section><section id="id20383624">
<h2>Activities</h2>
<section id="id20389777">
<h4>Creating a Folder or Sub-Folder for Chapter 12 Files</h4>
<p id="id20388996">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id20778836">
 	<li>Chapter_12 within the folder named: Cpp_Source_Code_Files</li>
</ul>
<p id="id20571329">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id19759466">
<h4>Download the Lab File(s)</h4>
<p id="id20481241">Download and store the following file(s) to your storage device in the appropriate folder(s). You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id9951930">Download from Connexions: <a href="https://cnx.org/resources/d559f80cca14974d700dc8e3802fc3262eb77abc/Lab_12a.cpp">Lab_12a.cpp</a></p>

</section><section id="id6106517">
<h4>Detailed Lab Instructions</h4>
<p id="id20485310">Read and follow the directions below carefully, and perform the steps in the order listed.</p>

<ul id="id20415162">
 	<li>Compile and run the Lab_12a.cpp source code file. Understand how it works.</li>
 	<li>Copy the source code file Lab_12a.cpp naming it: Lab_12b.cpp</li>
 	<li>Convert the nested if then else to a switch with breaks.</li>
 	<li>Build (compile and run) your program.</li>
 	<li>After you have successfully written this program, if you are taking this course for college credit, follow the instructions from your professor/instructor for submitting it for grading.</li>
</ul>
</section></section><section id="klbp1201">
<h3>Problems</h3>
<section id="klbp1202">
<h4>Problem 12a – Instructions</h4>
<p id="klbp1211">Flowchart the following pseudocode:</p>

<div id="klbp1221" class="ui-has-child-title"><header>
<div>pseudocode</div>
</header><section>
<pre id="klbp1222"><code>
Case of shoe_size
  4 to 6  Display "Small."
  7 to 9  Display "Medium."
  10 +    Display "Large."
Endcase
</code></pre>
</section></div>
</section><section id="klbp1203">
<h4>Problem 12b – Instructions</h4>
<p id="klbp1205">The "Flip-Flops" is a unique shoe store that only sells flip-flops. Adult shoe sizes less than 4 are handled in the children’s department, thus we don’t need to concern ourselves with sizes less than 4. Half shoe sizes are to be rounded down, thus the prompt to the user that happens before this case structure will have addressed that issue. The variable shoe_size will be an integer value between 4 and 1,000,000,000 (one billion).</p>
<p id="klbp1206">Write C++ source code for the following pseudocode:</p>

<div id="klbp1223" class="ui-has-child-title"><header>
<div>pseudocode</div>
</header><section>
<pre id="klbp1224"><code>
Case of shoe_size
  4 to 6  Display "Small."
  7 to 9  Display "Medium."
  10 +    Display "Large."
Endcase
</code></pre>
</section></div>
</section><section id="klbp1204">
<h4>Problem 12c – Instructions</h4>
<p id="klbp1208">Write C++ source code for the following pseudocode:</p>

<div id="klbp1225" class="ui-has-child-title"><header>
<div>pseudocode</div>
</header><section>
<pre id="klbp1226"><code>
If age equal to 24
  Display a message "You’re the same age as Melinda."
Else
  If age equal to 27
    Display a message "You’re the same age as Ruth."
  Else
    If age equal to 34
      Display a message "You’re the same age as Ben."
    Else
      Display a message "You’re age is un-important."
    Endif
  Endif
Endif</code></pre>
</section></div>
</section></section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>218</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:31:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:31:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[practice-12]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>50</wp:post_parent>
		<wp:menu_order>12</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Do While Loop</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/do-while-loop/</link>
		<pubDate>Sat, 16 Jun 2018 17:34:21 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=224</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id10424263">
<h3>Introduction to Test After Loops</h3>
<p id="id6078980">There are two commonly used test after loops in the iteration (or repetition) category of control structures. They are: do while and repeat until. This module covers the: do while.</p>

<section id="id5206893">
<h4>Understanding Iteration in General – do while</h4>
<p id="id5870127">The concept of iteration is connected to possibly wanting to repeat an action. Like all control structures we ask a question to control the execution of the loop. The term loop comes from the circular looping motion that occurs when using flowcharting. The basic form of the do while loop is as follows:</p>

<pre id="klb7777001"><code>
do
  some statements or action
  some statements or action
  some statements or action
  update the flag
while the answer to the question is true </code></pre>
<p id="id9216093">In every language that I know the question (called a test expression) is a Boolean expression. The Boolean data type has two values – true and false. Let's rewrite the structure to consider this:</p>

<pre id="klb7777002"><code>
do
  some statements or action
  some statements or action
  some statements or action
  update the flag
while expression is true </code></pre>
<p id="id5859154">Within the do while control structure there are three attributes of a properly working loop. They are:</p>

<ul id="id7663793">
 	<li>Action or actions</li>
 	<li>Update of the flag</li>
 	<li>Test expression</li>
</ul>
<p id="id3525637">The English phrasing is, "You do the action while the expression is true". This is looping on the true. When the test expression is false, you stop the loop and go on with the next item in the program. Notice, because this is a test after loop the action will always happen <strong>at least once</strong>. It is called a test after loop because the test comes after the action. It is also sometimes called a post-test loop, meaning the test is post (or Latin for after) the action and update.</p>

</section></section><section id="id7681034">
<h3>The do while Structure within C++</h3>
<section id="id6130778">
<h4>Syntax</h4>
<p id="id8782657">The syntax for the do while control structure within the C++ programming language is:</p>

<pre id="klb7777003"><code>
do
  {
  statement;
  statement;
  statement;
  statement;    // This statement updates the flag;
  }
while (expression); </code></pre>
<div id="fs-id1172332594692"><section>The test expression is within the parentheses, but this is not a function call. The parentheses are part of the control structure. Additionally, there is a semicolon after the parenthesis following the expression.</section></div>
</section><section id="id4429167">
<h4>An Example</h4>
<div id="fs-id1172332952183" class="ui-has-child-title"><header>
<div>C++ source code: do while loop</div>
</header><section>
<pre id="klb7777004"><code>
do
  {
  cout &lt;&lt; "\nWhat is your age? ";
  cin &gt;&gt; age_user;
  cout &lt;&lt; "\nWhat is your friend's age? ";
  cin &gt;&gt; age_friend;
  cout &gt;&gt; "\nTogether your ages add up to: ";
  cout &gt;&gt; (age_user + age_friend);
  cout &lt;&lt; "\nDo you want to do it again? y or n ";
  cin &gt;&gt; loop_response;
  }
while (loop_response == 'y'); </code></pre>
</section></div>
<p id="id5827709">The three attributes of a test after loop are present. The action part consists of the 6 lines that prompt for data and then displays the total of the two ages. The update of the flag is the displaying the question and getting the answer for the variable loop_response. The test is the equality relational comparison of the value in the flag variable to the lower case character of y.</p>
<p id="id7822350">This type of loop control is called an event controlled loop. The flag updating is an event where someone decides if they want the loop to execute again.</p>
<p id="id8546186">Using indentation with the alignment of the loop actions and flag update is normal industry practice within the C++ community.</p>

</section><section id="id5131121">
<h4>Infinite Loops</h4>
<p id="id9825760">At this point it's worth mentioning that good programming always provides for a method to insure that the loop question will eventually be false so that the loop will stop executing and the program continues with the next line of code. However, if this does not happen then the program is in an infinite loop. Infinite loops are a bad thing. Consider the following code:</p>

<div id="fs-id1172331397311" class="ui-has-child-title"><header>
<div>C++ source code: infinite loop</div>
</header><section>
<pre id="klb7777005"><code>
loop_response = 'y';
do
  {
  cout &lt;&lt; "\nWhat is your age? ";
  cin &gt;&gt; age_user;
  cout &lt;&lt; "\nWhat is your friend's age? ";
  cin &gt;&gt; age_friend;
  cout &gt;&gt; "\nTogether your ages add up to: ";
  cout &gt;&gt; (age_user + age_friend);
  }
while (loop_response == 'y'); </code></pre>
</section></div>
<p id="id4360172">The programmer assigned a value to the flag before the loop and forgot to update the flag. Every time the test expression is asked it will always be true. Thus, an infinite loop because the programmer did not provide a way to exit the loop (he forgot to update the flag).</p>
<p id="id6385738">Consider the following code:</p>

<div id="fs-id1172336057720" class="ui-has-child-title"><header>
<div>C++ source code: infinite loop</div>
</header><section>
<pre id="klb7777006"><code>
do
  {
  cout &lt;&lt; "\nWhat is your age? ";
  cin &gt;&gt; age_user;
  cout &lt;&lt; "\nWhat is your friend's age? ";
  cin &gt;&gt; age_friend;
  cout &gt;&gt; "\nTogether your ages add up to: ";
  cout &gt;&gt; (age_user + age_friend);
  cout &lt;&lt; "\nDo you want to do it again? y or n ";
  cin &gt;&gt; loop_response;
  }
while (loop_response = 'y'); </code></pre>
</section></div>
<p id="id3785948">No matter what the user replies during the flag update, the test expression does not do a relational comparison but does an assignment. It assigns 'y' to the variable and asks if 'y' is true? Since all non-zero values are treated as representing true within the Boolean concepts of the C++ programming language, the answer to the text question is true. Viola, you have an infinite loop.</p>

</section></section><section id="id3826790">
<h2>Key Terms</h2>
<dl id="fs-id20957979">
 	<dt>
<dl id="fs-id24839354">
 	<dt>
<dl id="fs-id9160374">
 	<dt>
<dl id="fs-id20957979">
 	<dt>
<dl id="fs-id24839354">
 	<dt>action item</dt>
 	<dd id="fs-id15972657">An attribute of iteration control structures.</dd>
</dl>
<dl id="fs-id23031400">
 	<dt></dt>
</dl>
</dt>
</dl>
at least once</dt>
 	<dd id="fs-id19819382">Indicating that test after loops execute the action at least once.</dd>
</dl>
<dl id="fs-id16012046">
 	<dt></dt>
</dl>
</dt>
</dl>
do while</dt>
 	<dd id="fs-id21625090">A test after iteration control structure available in C++.</dd>
</dl>
<dl id="fs-id24839354"></dl>
<dl id="fs-id23031400">
 	<dt>
<dl id="fs-id24840516">
 	<dt><section id="id3826790">
<dl id="fs-id16012046">
 	<dt>infinite loop</dt>
 	<dd id="fs-id16097588">No method of exit, thus a bad thing.</dd>
</dl>
</section>test item</dt>
 	<dd id="fs-id17724952">An attribute of iteration control structures.</dd>
</dl>
<dl id="fs-id9160374">
 	<dt></dt>
</dl>
update item</dt>
 	<dd id="fs-id16013980">An attribute of iteration control structures.</dd>
</dl>
<dl id="fs-id24840516"></dl>
<dl id="fs-id9160374"></dl>
<dl id="fs-id16012046"></dl>
</section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>224</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:34:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:34:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[do-while-loop]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>56</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Flag Concept</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/flag-concept/</link>
		<pubDate>Sat, 16 Jun 2018 17:34:58 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=225</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id16677797">
<h3>Concept Discussion</h3>
<p id="id14461663">For centuries flags have been used as a signal to let others know something about the group or individual that is displaying, flying or waving the flag. There are country flags and state flags. Ships at sea flew the flag of their country. Pirates flew the skull and cross bones. A yellow flag was used for quarantine, usually the plague. Even pirates stayed away. Today, some people might recognize the flag used by scuba divers. The Presidents of most countries have a flag. At a race car event they use the checkered flag to indicate the race is over.</p>

<figure id="id12100752"><span id="id12100752_media"><img id="id12100752__onlineimage" src="https://cnx.org/resources/9270c1c748927c47717fd2d1ad7dea0bc447baf1/graphics1.jpg" alt="" width="600" height="450" /></span></figure>
<p id="id13346665">Computer programming uses the concept of a flag in the same way that physical flags are used. A flag is anything that signals some information to the person looking at it.</p>

</section><section id="id10603958">
<h3>Computer Implementation</h3>
<p id="id14829415">Any variable or constant that holds data can be used as a flag. You can think of the storage location as a flag pole. The value stored within the variable conveys some meaning and you can think of it as being the flag. An example might be a variable named: gender which is of the character data type. The two values normally stored in the variable are: 'F' and 'M' meaning female and male. Then, somewhere within a program we might look at the variable to make a decision:</p>

<div id="fs-id15713616" class="ui-has-child-title"><header>
<div>flag controling an if then control structure</div>
</header><section>
<pre id="fs-id8689428"><code>
if gender equals 'F'
  display "Are you pregnant?"
  get answer from user store in pregnant variable
</code></pre>
</section></div>
<p id="id11834028">Looking at the flag implies comparing the value in the variable to another value (a constant or the value in another variable) using a relational operator (in our above example: equality).</p>
<p id="id4564554">Control structures are "controlled" by using a <strong>test expression</strong> which is usually a <strong>Boolean expression</strong>. Thus, the flag concept of "looking" at the value in the variable and comparing it to another value is fundamental to understanding how all control structures work.</p>

</section><section id="id14488161">
<h3>Two Flags with the Same Meaning</h3>
<p id="id15614393">Sometimes we will use an iteration control structure of do while to allow us to decide if we want to do the loop action again. A variable might be named "loop_response" with the user prompted for their answer of 'y' for yes or 'n' for no. Once the answer is retrieved from the keyboard and stored in our flag variable of "loop_response" the test expression to control the loop might be:</p>

<div id="fs-id14963026" class="ui-has-child-title"><header>
<div>simple flag comparison</div>
</header><section>
<pre id="fs-id10246817"><code>
loop_response equals 'y'
</code></pre>
</section></div>
<p id="id15526217">This is fine but what if the user accidentally has on the caps lock. Then his response of 'Y' would not have the control structure loop and perform the action again. The solution lies in looking at the flag twice. Consider:</p>

<div id="fs-id14150528" class="ui-has-child-title"><header>
<div>complex flag comparison</div>
</header><section>
<pre id="fs-id9961901"><code>
loop_response equals 'y' or loop_response equals 'Y'
</code></pre>
</section></div>
<p id="id13076908">We look to see if the flag is either a lower case y or an upper case Y by using a more complex Boolean expression with both relational and logical operators.</p>

</section><section id="id11263672">
<h3>Multiple Flags in One Byte</h3>
<p id="id10419647">Within assembly language programming and in many technical programs that control special devices; the use of a single byte to represent several flags is common. This is accomplished by having each one of the 8 bits that make up the byte represent a flag. Each bit has a value of either 1 or 0 and can represent true and false, on or off, yes or no, etc.</p>

</section><section id="id4492836">
<h2>Key Terms</h2>
<dl id="fs-id27102963">
 	<dt>flag</dt>
 	<dd id="fs-id25970052">A variable or constant used to store information that will normally be used to control the program.</dd>
</dl>
</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>225</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:34:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:34:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[flag-concept]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>56</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Assignment vs Equality within C++</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/assignment-vs-equality-within-c/</link>
		<pubDate>Sat, 16 Jun 2018 17:35:29 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=226</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>General Discussion</h3>
<p id="id20239514">Most control structures use a <span>test expression</span> that executes either selection (as in the: if then else) or iteration (as in the while; do while; or for loops) based on the truthfulness or falseness of the expression. Thus, we often talk about the <span>Boolean expression</span>that is controlling the structure. Within many programming languages, this expression must be a Boolean expression and is governed by a tight set of rules. However, in C++ every data type can be used as a Boolean expression, because every data type can be demoted into a Boolean value by using the rule/concept that zero represents false and all non-zero values represent true.</p>
<p id="id18751896">Within C++ we have the potential added confusion of the equals symbol as an operator that does not represent the normal math meaning of <span>equality</span> that we have used for most of our life. The equals symbol with C++ means: <span>assignment</span>. To get the equality concept of math within C++ we use two equal symbols to represent the relational operator of equality. Let's consider:</p>

<pre id="klb4400001"><code>
if (pig = 'y')
  { 
  cout &lt;&lt; "\nPigs are good";
  }
else
  {
  cout &lt;&lt; "\nPigs are bad.";
  } </code></pre>
<p id="id19895216">The test expression of the control structure will always be true, because the expression is an assignment (not the relational operator of ==). It assigns the 'y' to the variable pig, then looks at the value in pig and determines that it is not zero; therefore the expression is true. And it will always be true and the else part will never be executed. This is not what the programmer had intended. Let's consider:</p>

<pre id="klb4400002"><code>
do
  {
  cout &lt;&lt; "\nPigs are good";
  cout &lt;&lt; "\nDo it again, answer y or n: ";
  cin &gt;&gt; do_it_again
  }
while (do_it_again = 'y'); </code></pre>
<p id="id14780425">The loop's test expression will always be true, because the expression is an assignment (not the relational operator of ==). It assigns the 'y' to the variable do_it_again, then looks at the value in do_it_again and determines that it is not zero; therefore the expression is true. And it will always be true and you have just created an infinite loop. As a reminder, infinite loops are not a good thing.</p>
<p id="id18582927">These examples are to remind you that you must be careful in creating your test expressions so that they are indeed a question usually involving the relational operators.</p>
<p id="id8764402">Don't get caught using assignment for equality.</p>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>226</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:35:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:35:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[assignment-vs-equality-within-c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>56</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Repeat Until Loop</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/repeat-until-loop/</link>
		<pubDate>Sat, 16 Jun 2018 17:36:00 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=227</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id10372479">
<h3>Introduction to Test After Loops</h3>
<p id="id7944767">There are two commonly used test after loops in the iteration (or repetition) category of control structures. They are: do while and repeat until. This module covers the: repeat until.</p>

<section id="id7486356">
<h4>Understanding Iteration in General – repeat until</h4>
<p id="id13363124">The concept of iteration is connected to possibly wanting to repeat an action. Like all control structures we ask a question to control the execution of the loop. The term loop comes from the circular looping motion that occurs when using flowcharting. The basic form of the repeat until loop is as follows:</p>

<pre id="klb6660001"><code>
repeat
  some statements or action
  some statements or action
  some statements or action
  update the flag
until the answer to the question becomes true </code></pre>
<p id="id5910211">In every language that I know the question (called a <span>test expression</span>) is a <span>Boolean expression</span>. The Boolean data type has two values – true and false. Let's rewrite the structure to consider this:</p>

<pre id="klb6660002"><code>
repeat
  some statements or action
  some statements or action
  some statements or action
  update the flag
until expression becomes true </code></pre>
<p id="id25046146">Within the repeat until control structure there are three attributes of a properly working loop. They are:</p>

<ul id="id18083483">
 	<li>Action or actions</li>
 	<li>Update of the flag</li>
 	<li>Test expression</li>
</ul>
<p id="id23145523">The English phrasing is, "You repeat the action until the expression becomes true". This is looping on the false. When the test expression becomes true, you stop the loop and go on with the next item in the program. Notice, because this is a test after loop the action will always happen <strong>at least once</strong>. It is called a "test after loop" because the test comes after the action. It is also sometimes called a post-test loop, meaning the test is post (or Latin for after) the action and update.</p>

</section></section><section id="id9572632">
<h3>The repeat until Structure within C++</h3>
<p id="id9381322">Well, it just does not exist. Most programming languages have either the do while or the repeat until control structures, but not both.</p>

</section><section id="id13353952">
<h2>Key Terms</h2>
<dl id="fs-id7817482">
 	<dt>repeat until</dt>
 	<dd id="fs-id11831244">A test after iteration control structure that is not available in C++.</dd>
</dl>
</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>227</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:36:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:36:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[repeat-until-loop]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>56</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Practice 1</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/practice-13/</link>
		<pubDate>Sat, 16 Jun 2018 17:36:37 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=228</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id17054952">
<h2>Learning Objectives</h2>
<ol id="id17054968" type="1">
 	<li>Understand key terms and definitions as listed in the modules associated with this chapter.</li>
 	<li>Identify which selection control structures are test after iteration.</li>
 	<li>Be able to write pseudo code or flowcharting for the do while control structure.</li>
 	<li>Be able to write C++ source code for a do while control structure.</li>
</ol>
</section><section id="id17055008"></section><section id="id17055033">
<h2>Review Questions</h2>
<div id="fs-id14650252"><section>
<div id="fs-id16527476">
<div id="fs-id10328639">
<div>Answer the following statements as either true or false:</div>
<ol>
 	<li>The do while and repeat until structure act exactly the same.</li>
 	<li>Students sometimes confuse assignment and equality.</li>
 	<li>The repeat until looping control structure is available in all programming languages.</li>
 	<li>Because flags are often used, they are usually a special data type.</li>
 	<li>The do while is a test before loop.</li>
</ol>
</div>
</div>
<div id="fs-id17249485">
<div class="ui-toggle-wrapper">
<div>Answers:</div>
<ol>
 	<li>false</li>
 	<li>true</li>
 	<li>false</li>
 	<li>false</li>
 	<li>false</li>
</ol>
</div>
</div>
</section></div>
</section><section id="id17055044"></section><section id="id17055069">
<h2>Activities</h2>
<section id="id17055076">
<h4>Creating a Folder or Sub-Folder for Chapter 13 Files</h4>
<p id="id17055083">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id17055107">
 	<li>Chapter_13 within the folder named: Cpp_Source_Code_Files</li>
</ul>
<p id="id17055122">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id17055129">
<h4>Download the Lab File(s)</h4>
<p id="id17055135">Download and store the following file(s) to your storage device in the appropriate folder(s). You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id16633471">Download from Connexions: <a href="https://cnx.org/resources/8c9e2b6f449ad37cc0d07205fd2ec75484480cb9/Lab_13_Pseudocode.txt">Lab_13_Pseudocode.txt</a></p>

</section><section id="id17055172">
<h4>Detailed Lab Instructions</h4>
<p id="id17055179">Read and follow the directions below carefully, and perform the steps in the order listed.</p>

<ul id="id17055185">
 	<li>Create a source code file from the Lab_13_Pseudocode.txt file. Name it: Lab_13.cpp</li>
 	<li>Build (compile and run) your program.</li>
 	<li>After you have successfully written this program, if you are taking this course for college credit, follow the instructions from your professor/instructor for submitting it for grading.</li>
</ul>
</section></section><section id="id17055216">
<h3>Problems</h3>
<section id="id17055222">
<h4>Problem 13a – Instructions</h4>
<p id="id17055230">Flowchart the following pseudocode:</p>

<div id="klbp1301" class="ui-has-child-title"><header>
<div>pseudocode</div>
</header><section>
<pre id="klbp1303"><code>
Do
  Display "I like cheese cake!"
  Display "Do it again? y or n ---&gt; "
  Get answer from keyboard
While answer is 'y'</code></pre>
</section></div>
</section></section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>228</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:36:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:36:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[practice-13]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>56</wp:post_parent>
		<wp:menu_order>11</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Increment and Decrement Operators</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/increment-and-decrement-operators/</link>
		<pubDate>Sat, 16 Jun 2018 17:37:55 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=234</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id24540973">
<h3>General Discussion</h3>
<p id="id21113808">The idea of increment or decrement is to either add or subtract 1 from a variable that is usually acting as a flag. Using a variable named counter; in generic terms, for example:</p>
<p id="id9296364"><code>increment the counter</code></p>
<p id="id12884210">The concept is:</p>
<p id="id4309407"><code>counter is assigned counter + 1</code></p>
<p id="id12958063">That is you fetch the existing value of the counter and add one then store the answer back into the variable counter. Many programming languages allow their increment and decrement operators to only be used with the integer data type. Programmers will sometimes use inc and dec as abbreviations for increment and decrement respectively.</p>
<p id="idklbp0001">Operator symbols and/or names vary with different programming languages. The C++ programming language operators with their meanings are:</p>

<table id="idklbt0001" summary="">
<tbody>
<tr>
<td>C++ Operator</td>
<td>Meaning</td>
</tr>
<tr>
<td>++</td>
<td>increment, <strong>two plus signs</strong></td>
</tr>
<tr>
<td>--</td>
<td>decrement, <strong>two minus signs</strong></td>
</tr>
</tbody>
</table>
</section><section id="id28817286">
<h3>C++ Code Examples</h3>
<section id="id27681977">
<h4>Basic Concept</h4>
<p id="id27071955">Within the C++ programming language the increment and decrement are often used in this simple generic way. The operator of increment is represented by two plus signs in a row. Examples:</p>
<p id="id4169322"><code>counter = counter + 1;</code></p>
<p id="id9972894"><code>counter += 1;</code></p>
<p id="id26414159"><code>counter++;</code></p>
<p id="id26963745"><code>++counter;</code></p>
<p id="id11932599">As C++ statements, the four examples all do the same thing. They add 1 to the value of whatever is stored in counter. The decrement opereator is represented by two minus signs in a row. They would subtract 1 from the value of whatever was in the variable being decremented. The precedence of increment and decrement depends on if the operator is attached to the right of the operand (postfix) or to the left of the operand (prefix). Within C++ postfix and prefix do not have the same precedence.</p>

</section><section id="id27539483">
<h4>Postfix Increment</h4>
<p id="id4311041">Postfix increment says to use my existing value then when you are done with the other operators; increment me. An example:</p>

<pre id="klb12340001"><code>
int oldest = 44; // variable set up with initialization
  then later on in the code
age = oldest++; </code></pre>
<p id="id22965264">The first use of the oldest variable is an Rvalue context where the existing value of 44 is pulled or fetched and then assigned to the variable age; then the variable oldest is incremented with its value changing from 44 to 45. This seems to be a violation of precedence because increment is higher precedence than assignment. But that is how postfix increment works within the C++ programming language.</p>

</section><section id="id4110745">
<h4>Prefix Increment</h4>
<p id="id4101664">Prefix increment says to increment me now and use my new value in any calculation. An example:</p>

<pre id="klb12340002"><code>
int oldest = 44; // variable set up with initialization
  then later on in the code
age = ++oldest; </code></pre>
<p id="id28773038">The variable oldest is incremented with the new value changing it from 44 to 45; then the new value is assigned to age.</p>
<p id="id24303367">In postfix age is assigned 44 in prefix age is assigned 45. One way to help remember the difference is to think of postfix as being polite (use my existing value and return to increment me after the other operators are done) where as prefix has an ego (I am important so increment me first and use my new value for the rest of the evaluations).</p>

</section><section id="id27356503">
<h4>Allowable Data Types</h4>
<p id="id22512277">Within some programming languages, increment and decrement can be used only on the integer data type. C++ however, expands this not only to all of the integer family but also to the floating-point family (float and double). Incrementing 3.87 will change the value to 4.87. Decrementing 'C' will change the value to 'B'. Remember the ASCII character values are really one byte unsigned integers (domain from 0 to 255).</p>

</section><section id="id13709445">
<h4>Exercises</h4>
<div id="fs-id7921265"><section>
<div id="fs-id9966351">
<div id="fs-id8312299">
<div>Evaluate the following items using increment or decrement:</div>
<ol>
 	<li>True or false: x = x +1 and x+=1 and x++ all accomplish increment?</li>
 	<li>Given: int y = 19; and int z; what values will y and z have after: z = y--;</li>
 	<li>Given: double x = 7.77; and int y; what values will x and y have after: y = ++x;</li>
 	<li>Is this ok? Why or why not? 6 * ++(age -3)</li>
</ol>
</div>
</div>
<div id="fs-id9556077">
<div class="ui-toggle-wrapper"></div>
</div>
</section></div>
</section></section><section id="id27824418">
<h2>Key Terms</h2>
<dl id="fs-id8867451">
 	<dt>
<dl id="fs-id10448792">
 	<dt>decrement</dt>
 	<dd id="fs-id5753725">Subtracting one from the value of a variable.</dd>
</dl>
<dl id="fs-id10664706">
 	<dt></dt>
</dl>
increment</dt>
 	<dd id="fs-id7178522">Adding one to the value of a variable.</dd>
</dl>
<dl id="fs-id10448792"></dl>
<dl id="fs-id10664706">
 	<dt>postfix</dt>
 	<dd id="fs-id8098873">Placing the increment or decrement operator to the right of the operand.</dd>
</dl>
<dl id="fs-id10622595">
 	<dt>prefix</dt>
 	<dd id="fs-id7935960">Placing the increment or decrement operator to the left of the operand.</dd>
</dl>
</section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>234</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:37:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:37:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[increment-and-decrement-operators]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>56</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>While Loop</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/while-loop/</link>
		<pubDate>Sat, 16 Jun 2018 17:38:45 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=235</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id19291311">
<h3>Introduction to Test Before Loops</h3>
<p id="id22908130">There are two commonly used test before loops in the iteration (or repetition) category of control structures. They are: while and for. This module covers the: while.</p>

<section id="id3920614">
<h4>Understanding Iteration in General – while</h4>
<p id="id10999493">The concept of iteration is connected to possibly wanting to repeat an action. Like all control structures we ask a question to control the execution of the loop. The term loop comes from the circular looping motion that occurs when using flowcharting. The basic form of the while loop is as follows:</p>

<pre id="klb1230001"><code>
initialization of the flag 
while the answer to the question is true then do
  some statements or action
  some statements or action
  some statements or action
  update the flag </code></pre>
<p id="id19574851">In almost all languages the question (called a test expression) is a Boolean expression. The Boolean data type has two values – true and false. Let's rewrite the structure to consider this:</p>

<pre id="klb1230002"><code>
initialization of the flag 
while the expression is true then do
  some statements or action
  some statements or action
  some statements or action
  update the flag </code></pre>
<p id="id16996346">Within the while control structure there are four attributes to a properly working loop. They are:</p>

<ul id="id18067924">
 	<li>Initializing the flag</li>
 	<li>Test expression</li>
 	<li>Action or actions</li>
 	<li>Update of the flag</li>
</ul>
<p id="id16704076">The initialization of the flag is not technically part of the control structure, but a necessary item to occur before the loop is started. The English phrasing is, "While the expression is true, do the following actions". This is looping on the true. When the test expression is false, you stop the loop and go on with the next item in the program. Notice, because this is a test before loop the action <strong>might not happen</strong>. It is called a test before loop because the test comes before the action. It is also sometimes called a pre-test loop, meaning the test is pre (or Latin for before) the action and update.</p>

</section><section id="id14286028">
<h4>Human Example of the while Loop</h4>
<p id="id11840081">Consider the following one-way conversation from a mother to her child.</p>
<p id="id19403069">Child: The child says nothing, but mother knows the child had Cheerios for breakfast and history tells us that the child most likely spilled some Cheerios on the floor.</p>
<p id="id7835455">Mother says: "While it is true that you see (As long as you can see) a Cheerio on floor, pick it up and put it in the garbage."</p>
<p id="id16648518">Note: All of the elements are present to determine the action (or flow) that the child will be doing (in this case repeating). Because the question (can you see a Cheerios) has only two possible answers (true or false) the action will continue while there are Cheerios on the floor. Either the child 1) never picks up a Cheerio because they never spilled any or 2) picks up a Cheerio and keeps picking up Cheerios one at a time while he can see a Cheerio on the floor (that is until they are all picked up).</p>

</section></section><section id="id14862944">
<h3>The while Structure within C++</h3>
<section id="id10099089">
<h4>Syntax</h4>
<p id="id17215135">The syntax for the while control structure within the C++ programming language is:</p>

<pre id="klb1230003"><code>
statement;        // This statement initializes the flag;
while (expression)
  {
  statement;
  statement;
  statement;
  statement;    // This statement updates the flag;
  }
</code></pre>
<div id="fs-id8737258"><section>The test expression is within the parentheses, but this is not a function call. The parentheses are part of the control structure. Additionally, there is not a semicolon after the parenthesis following the expression.</section></div>
</section><section id="id13288264">
<h4>An Example</h4>
<div id="fs-id1166234626007" class="ui-has-child-title"><header>
<div>C++ source code: while</div>
</header><section>
<pre id="klb1230004"><code>
loop_response = 'y';
while (loop_response == 'y')
  {
  cout &lt;&lt; "\nWhat is your age? ";
  cin &gt;&gt; age_user;
  cout &lt;&lt; "\nWhat is your friend's age? ";
  cin &gt;&gt; age_friend;
  cout &gt;&gt; "\nTogether your ages add up to: ";
  cout &gt;&gt; (age_user + age_friend);
  cout &lt;&lt; "\nDo you want to do it again? y or n ";
  cin &gt;&gt; loop_response;
  }
</code></pre>
</section></div>
<p id="id24364717">The four attributes of a test before loop are present. The initialization of the flag. The test is the equality relational comparison of the value in the flag variable to the lower case character of y. The action part consists of the 6 lines that prompt for data and then displays the total of the two ages. The update of the flag is the displaying the question and getting the answer for the variable loop_response.</p>
<p id="id5325722">This type of loop control is called an event controlled loop. The flag updating is an event where someone decides if they want the loop to execute again.</p>
<p id="id14435708">Using indentation with the alignment of the loop actions and flag update is normal industry practice within the C++ community.</p>

</section><section id="id12109420">
<h4>Infinite Loops</h4>
<p id="id15338899">At this point it's worth mentioning that good programming always provides for a method to insure that the loop question will eventually be false so that the loop will stop executing and the program continues with the next line of code.  However, if this does not happen then the program is in an infinite loop.  Infinite loops are a bad thing. Consider the following code:</p>

<div id="fs-id4986050" class="ui-has-child-title"><header>
<div>C++ source code: infinite loop</div>
</header><section>
<pre id="klb1230005"><code>
loop_response = 'y';
while (loop_response == 'y')
  {
  cout &lt;&lt; "\nWhat is your age? ";
  cin &gt;&gt; age_user;
  cout &lt;&lt; "\nWhat is your friend's age? ";
  cin &gt;&gt; age_friend;
  cout &gt;&gt; "\nTogether your ages add up to: ";
  cout &gt;&gt; (age_user + age_friend);
  }
</code></pre>
</section></div>
<p id="id19251014">The programmer assigned a value to the flag before the loop which is correct. However, he forgot to update the flag. Every time the test expression is asked it will always be true. Thus, an infinite loop because the programmer did not provide a way to exit the loop (he forgot to update the flag). Consider the following code:</p>

<div id="fs-id1166233600145" class="ui-has-child-title"><header>
<div>C++ source code: infinite loop</div>
</header><section>
<pre id="klb1230006"><code>
loop_response = 'y';
while (loop_response = 'y')
  {
  cout &lt;&lt; "\nWhat is your age? ";
  cin &gt;&gt; age_user;
  cout &lt;&lt; "\nWhat is your friend's age? ";
  cin &gt;&gt; age_friend;
  cout &gt;&gt; "\nTogether your ages add up to: ";
  cout &gt;&gt; (age_user + age_friend);
  cout &lt;&lt; "\nDo you want to do it again? y or n ";
  cin &gt;&gt; loop_response;
  }
</code></pre>
</section></div>
<p id="id18840240">No matter what the user replies during the flag update, the test expression does not do a relational comparison but does an assignment. It assigns 'y' to the variable and asks if 'y' is true? Since all non-zero values are treated as representing true within the Boolean concepts of the C++ programming language, the answer to the test expression is true. Viola, you have an infinite loop.</p>

<div id="fs-id1166233600999" class="ui-has-child-title"><header>
<div>C++ source code: infinite loop</div>
</header><section>
<pre id="klb1230999"><code>
loop_response = 'y';
while (loop_response == 'y');
  {
  cout &lt;&lt; "\nWhat is your age? ";
  cin &gt;&gt; age_user;
  cout &lt;&lt; "\nWhat is your friend's age? ";
  cin &gt;&gt; age_friend;
  cout &gt;&gt; "\nTogether your ages add up to: ";
  cout &gt;&gt; (age_user + age_friend);
  cout &lt;&lt; "\nDo you want to do it again? y or n ";
  cin &gt;&gt; loop_response;
  }
</code></pre>
</section></div>
<p id="id18840999">The undesirable semi-colon on the end of while line causes the action of the while loop to be the "nothingness" between the closing parenthesis and the semi-colon. The program will infinitely loop because there is no action (that is no action and no update). If this is the first item in your program it will appear to start but there will be no output.</p>

</section></section><section id="id3920612">
<h3>Counting Loops</h3>
<p id="id14436145">The examples above are for an event controlled loop. The flag updating is an event where someone decides if they want the loop to execute again. Often the initialization sets the flag so that the loop will execute at least once.</p>
<p id="id22497410">Another common usage of the while loop is as a counting loop. Consider:</p>

<div id="fs-id1166232554922" class="ui-has-child-title"><header>
<div>C++ source code: while loop that is counting</div>
</header><section>
<pre id="klb1230007"><code>
counter = 0;
while (counter &lt; 5)
  {
  cout &lt;&lt; "\nI love ice cream!";
  counter++;
  }
</code></pre>
</section></div>
<p id="id14392322">The variable counter is said to be controlling the loop.  It is set to zero (called initialization) before entering the while loop structure and as long as it is less than 5 (five); the loop action will be executed.  But part of the loop action uses the increment operator to increase counter's value by one.  After executing the loop five times (once for counter's values of: 0, 1, 2, 3 and 4) the expression will be false and the next line of code in the program will execute. A counting loop is designed to execute the action (which could be more than one statement) a set of given number of times. In our example, the message is displayed five times on the monitor. It is accomplished my making sure all four attributes of the while control structure are present and working properly. The attributes are:</p>

<ul id="id10548253">
 	<li>Initializing the flag</li>
 	<li>Test expression</li>
 	<li>Action or actions</li>
 	<li>Update of the flag</li>
</ul>
<p id="id15226937">Missing an attribute might cause an infinite loop or give undesired results (does not work properly).</p>

<section id="id22222783">
<h4>Infinite Loops</h4>
<p id="id19277597">Consider:</p>

<div id="fs-id7888331" class="ui-has-child-title"><header>
<div>C++ source code: infinite loop</div>
</header><section>
<pre id="klb1230008"><code>
counter = 0;
while (counter &lt; 5)
  {
  cout &lt;&lt; "\nI love ice cream!";
  }
</code></pre>
</section></div>
<p id="id15560212">Missing the flag update usually causes an infinite loop.</p>

</section><section id="id15329805">
<h4>Variations on Counting</h4>
<p id="id16004943">In the following example, the integer variable age is said to be controlling the loop (that is the flag). We can assume that age has a value provided earlier in the program. Because the while structure is a test before loop; it is possible that the person’s age is 0 (zero) and the first time we test the expression it will be false and the action part of the loop would never be executed.</p>

<div id="fs-id1166239126509" class="ui-has-child-title"><header>
<div>C++ source code: while as a counting loop</div>
</header><section>
<pre id="klb1230009"><code>
while (0 &lt; age)
  {
  cout &lt;&lt; "\nI love candy!";
  age--;
  }
</code></pre>
</section></div>
<p id="id5380922">Consider the following variation assuming that age and counter are both integer data type and that age has a value:</p>

<div id="fs-id8006700" class="ui-has-child-title"><header>
<div>C++ source code: while as a counting loop</div>
</header><section>
<pre id="klb1230010"><code>
counter = 0;
while (counter &lt; age)
  {
  cout &lt;&lt; "\nI love corn chips!";
  counter++;
  }
</code></pre>
</section></div>
<p id="id12393458">This loop is a counting loop similar to our first counting loop example. The only difference is instead of using a literal constant (in other words 5) in our expression, we used the variable age (and thus the value stored in age) to determine how many times to execute the loop. However, unlike our first counting loop example which will always execute exactly 5 times; it is possible that the person’s age is 0 (zero) and the first time we test the expression it will be false and the action part of the loop would never be executed.</p>

</section></section><section id="id14429927">
<h2>Key Terms</h2>
<dl id="fs-id7920547"></dl>
<dl id="fs-id7920558">
 	<dt>
<dl id="fs-id7921086">
 	<dt>
<dl id="fs-id7921108">
 	<dt>
<dl id="fs-id7921118">
 	<dt>counting controlled</dt>
 	<dd id="fs-id7921124">Using a variable to count up or down to control a loop.</dd>
</dl>
event controlled</dt>
 	<dd id="fs-id7921114">Using user input to control a loop.</dd>
</dl>
<dl id="fs-id7921118">
 	<dt></dt>
</dl>
initialize item</dt>
 	<dd id="fs-id7921092">An attribute of iteration control structures.</dd>
</dl>
<dl id="fs-id7921097">
 	<dt></dt>
</dl>
loop attributes</dt>
 	<dd id="fs-id7920564">Items associated with iteration or looping control structures.</dd>
</dl>
<dl id="fs-id7921086"></dl>
<dl id="fs-id7921097">
 	<dt>might not happen</dt>
 	<dd id="fs-id7921103">Indicating that test before loops might not execute the action.</dd>
</dl>
<dl id="fs-id7921108"></dl>
<dl id="fs-id7921118">
 	<dt>
<dl id="fs-id7920547">
 	<dt>while</dt>
 	<dd id="fs-id7920552">A test before iteration control structure available in C++.</dd>
</dl>
<dl id="fs-id7920558">
 	<dt>
<dl id="fs-id7921086">
 	<dt>
<dl id="fs-id7921108">
 	<dt></dt>
</dl>
</dt>
</dl>
</dt>
</dl>
</dt>
</dl>
</section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>235</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:38:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:38:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[while-loop]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>56</wp:post_parent>
		<wp:menu_order>6</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Practice 2</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/practice-14/</link>
		<pubDate>Sat, 16 Jun 2018 17:39:21 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=236</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div class="media-body">
<div id="content"><section id="id15051683">
<h2>Learning Objectives</h2>
<ol id="id9850453" type="1">
 	<li>Understand key terms and definitions as listed in the modules associated with this chapter.</li>
 	<li>Identify which selection control structures are test before iteration.</li>
 	<li>Be able to write pseudo code or flowcharting for the while control structure.</li>
 	<li>Be able to write C++ source code for the while control structure.</li>
</ol>
</section><section id="id11249736"></section><section id="id11546915">
<h2>Review Questions</h2>
<div id="fs-id5372394"><section>
<div id="fs-id15032742">
<div id="fs-id15456046">
<div>Evaluate the following items using increment or decrement:</div>
<ol>
 	<li>True or false: <code>x = x - 1;</code> and <code>x -= 1;</code> and
<pre><code>x--;</code></pre>
and
<pre><code>--x;</code></pre>
all accomplish decrement.</li>
 	<li>Given: <code>int y = 26;</code> and <code>int z;</code> what values will y and z have after: <code>z = y++;</code></li>
 	<li>Given: <code>double x = 4.44;</code> and <code>int y;</code> what values will x and y have after:
<pre><code>y = --x;</code></pre>
</li>
 	<li>As an expression: <code>10 / ++(money * 4)</code> Is this ok? Why or why not?</li>
</ol>
</div>
</div>
<div id="fs-id3946633">
<div class="ui-toggle-wrapper">
<div>Answers:</div>
<ol>
 	<li>true</li>
 	<li>y is: 27 and z is: 26</li>
 	<li>x is: 3.44 and y is: 3 Note: truncation of 3.44 to 3 upon demotion to integer data type.</li>
 	<li>Not ok. Error, the item incremented must have Lvalue attributes, usually a variable. Because of the parentheses, it is an expression not a variable.</li>
</ol>
</div>
</div>
</section></div>
</section><section id="id22255888"></section><section id="id21795767">
<h2>Activities</h2>
<section id="id13341018">
<h4>Creating a Folder or Sub-Folder for Chapter 14 Files</h4>
<p id="id12389363">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id7544634">
 	<li>Chapter_14 within the folder named: Cpp_Source_Code_Files</li>
</ul>
<p id="id4222349">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id19978619">
<h4>Download the Lab File(s)</h4>
<p id="id13259785">Download and store the following file(s) to your storage device in the appropriate folder(s). You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id22142191">Download from Connexions: <a href="https://cnx.org/resources/3dc27d8ab76e0fe4ced86485c4cf0b87b10c52b1/Lab_14_Pseudocode.txt">Lab_14_Pseudocode.txt</a></p>

</section><section id="id9600563">
<h4>Detailed Lab Instructions</h4>
<p id="id3406925">Read and follow the directions below carefully, and perform the steps in the order listed.</p>

<ul id="id3406899">
 	<li>Create a source code file from the Lab_14_Pseudocode.txt file. Name it: Lab_14.cpp</li>
 	<li>Build (compile and run) your program.</li>
 	<li>After you have successfully written this program, if you are taking this course for college credit, follow the instructions from your professor/instructor for submitting it for grading.</li>
</ul>
</section></section><section id="id3559293">
<h3>Problems</h3>
<section id="id15621911">
<h4>Problem 14a – Instructions</h4>
<p id="id10533737">Flowchart the following pseudocode:</p>

<div id="fs-id19524895" class="ui-has-child-title"><header>
<div>pseudocode</div>
</header><section>
<pre id="fs-id21697381"><code>
Assign counter a value of zero
While counter is less than 5
  Display "I love cookies!"
  Increment counter
Endwhile
</code></pre>
</section></div>
</section></section></div>
</div>
</div>
<div>
<div class="media-footer"></div>
</div>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>236</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:39:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:39:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[practice-14]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>56</wp:post_parent>
		<wp:menu_order>12</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>For Loop</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/for-loop/</link>
		<pubDate>Sat, 16 Jun 2018 17:40:13 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=240</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id13772142">
<h3>Introduction to Test Before Loops</h3>
<p id="id5975390">There are two commonly used test before loops in the iteration (or repetition) category of control structures. They are: while and for. This module covers the: for.</p>

<section id="id3755801">
<h4>Understanding Iteration in General – for</h4>
<p id="id15300475">In most programming languages the for loop is used exclusively for counting; that is to repeat a loop action as it either counts up or counts down. There is a starting value and a stopping value. The question that controls the loop is a <span>test expression</span> that compares the starting value to the stopping value. This expression is a Boolean expression and is usually using the relational operators of either less than (for counting up) or greater than (for counting down). The term loop comes from the circular looping motion that occurs when using flowcharting. The basic form of the for loop (counting up) is as follows:</p>

<pre id="klb1230001"><code>
for
  initialization of the starting value
  starting value is less than the stopping value
  some statements or action
  some statements or action
  some statements or action
  increment the starting value
</code></pre>
<p id="id16190609">It might be best to understand the for loop by understanding a while loop acting like a counting loop. Let's consider;</p>

<pre id="klb1230002"><code>
initialization of the starting value 
while the starting value is less than the stopping value
  some statements or action
  some statements or action
  some statements or action
  increment the starting value
</code></pre>
<p id="id14296837">Within the for control structure there are four attributes to a properly working loop. They are:</p>

<ul id="id14276326">
 	<li>Initializing the flag – done once</li>
 	<li>Test expression</li>
 	<li>Action or actions</li>
 	<li>Update of the flag</li>
</ul>
<p id="id14528923">The initialization of the flag is not technically part of the while control structure, but it is usually part of the for control structure. The English phrasing is, "For x is 1; x less than 3; do the following actions; increment x; loop back to the test expression". This is doing the action on the true. When the test expression is false, you stop the loop and go on with the next item in the program. Notice, because this is a test before loop the action <strong>might not happen</strong>. It is called a <span>test before loop</span> because the test comes before the action. It is also sometimes called a pre-test loop, meaning the test is pre (or Latin for before) the action and update.</p>

</section></section><section id="id13440299">
<h3>The for Structure within C++</h3>
<section id="id13900570">
<h4>Syntax</h4>
<p id="id14837003">The syntax of the for loop control structure within the C++ programming language is:</p>

<pre id="klb1230003"><code>
for (initializations; expression; updates)
  {
  statement;
  statement;
  statement;
  }
</code></pre>
<div id="fs-id1169665973043"><section>The initializations, test expression and updates are within the parentheses (each separated by a semi-colon), but this is not a function call. The parentheses are part of the control structure. Additionally, there is not a semicolon after the parenthesis following the expression.</section></div>
</section><section id="id14232414">
<h4>An Example</h4>
<div id="fs-id1169665966207" class="ui-has-child-title"><header>
<div>C++ source code: for</div>
</header><section>
<pre id="klb1230004"><code>
for (counter = 0; counter &lt; 5; counter++)
  {
  cout &lt;&lt; "\nI love ice cream!";
  }
</code></pre>
</section></div>
<p id="id11869565">The four attributes of a test before loop (remember the for loop is one example of a test before loop) are present.</p>

<ul id="eip-574">
 	<li>The initialization of the flag to a value of 0.</li>
 	<li>The test is the less than relational comparison of the value in the flag variable to the constant value of 5.</li>
 	<li>The action part consists of the 1 line of output.</li>
 	<li>The update of the flag is done with the increment operator.</li>
</ul>
<p id="id14037508">Using indentation with the alignment of the loop actions is normal industry practice within the C++ community.</p>

</section><section id="id13902842">
<h4>Infinite Loops</h4>
<p id="id9663235">At this point it's worth mentioning that good programming always provides for a method to insure that the loop question will eventually be false so that the loop will stop executing and the program continues with the next line of code. However, if this does not happen then the program is in an infinite loop. Infinite loops are a bad thing. Consider the following code:</p>

<div id="fs-id1169667899332" class="ui-has-child-title"><header>
<div>C++ source code: infinite loop</div>
</header><section>
<pre id="klb1230005"><code>
for (counter = 0; counter &lt; 5;)
  {
  cout &lt;&lt; "\nI love ice cream!";
  }
</code></pre>
</section></div>
<p id="id13348961">The programmer assigned a value to the flag during the initialization step which is correct. However, he forgot to update the flag (the update step is missing). Every time the test expression is asked it will always be true. Thus, an infinite loop because the programmer did not provide a way to exit the loop (he forgot to update the flag).</p>

</section><section id="id13752722">
<h4>Multiple Items in the Initialization and Update</h4>
<p id="id13011088">The following shows the use of the sequence operator to separate the multiple initializations and multiple updates. This is not available in most languages, thus is more unique to the C++ programming language.</p>

<div id="fs-id1169665878318" class="ui-has-child-title"><header>
<div>C++ source code: for with multiple initializations and updates</div>
</header><section>
<pre id="klb1230006"><code>
for (x = 0, y = 10; x &lt; 10; x++, y--)
  {
  cout &lt;&lt; x * y &lt;&lt; endl;
  }
</code></pre>
</section></div>
</section></section><section id="id13657880">
<h3>Counting Loop Conversion – a while into a for</h3>
<p id="id13900522">Below is a color coded the conversion of a while loop that displays a message exactly three times (which is a counting loop) into a for loop using C++ programming language syntax. The four loop attributes are color highlighted as follows:</p>

<figure id="id14037892"><span id="id14037892_media"><img id="id14037892__onlineimage" src="https://cnx.org/resources/a9a0c0cc350dc8333bed5607ebef3484b20cd582/graphics1.jpg" alt="" width="600" height="450" /></span></figure>
</section><section id="id13530980">
<h3>Miscellaneous Information about the for Structure</h3>
<p id="id10694093">Many languages (Pascal, FORTRAN, and other) have a for loop structure that is used exclusively for counting. The for loop in the C++ programming language is much more versatile and can be used (and generally is used) in place of the while loop structure. In reality a counting loop is just a particular use of a while loop.</p>
<p id="id16196546">The name for comes from mathematics’ method of writing an iteration (or repetition). In math we would say: “For the variable i starts at a given value and repeats an action increasing the value of i until i is executed for the stopping value”. Usually written in math as:</p>
<p id="id14262736">for i = 1 to 5 do some action</p>
<p id="id11738072">Note: here the = means equals not assignment. Another way to say it is that i varies from 1 to 5.</p>

</section><section id="id14038133">
<h2>Key Terms</h2>
<dl id="fs-id24705148">
 	<dt>for</dt>
 	<dd id="fs-id23404671">A test before iteration control structure typically used for counting.</dd>
</dl>
</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>240</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:40:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:40:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[for-loop]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>56</wp:post_parent>
		<wp:menu_order>7</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Circular Nature of the Integer Data Type Family</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/circular-nature-of-the-integer-data-type-family/</link>
		<pubDate>Sat, 16 Jun 2018 17:40:50 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=241</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id22442677">
<h3>General Discussion</h3>
<p id="id22856051">There are times when character and integer data types are lumped together because they both act the same (often called the integer family). Maybe we should say they act differently than the floating-point data types. The integer family values jump from one value to another. There is nothing between 6 and 7 nor between 'A' and 'B'. It could be asked why not make all your numbers floating-point data types. The reason is twofold. First, some things in the real world are not fractional. A dog, even with only 3 legs, is still one dog not three fourths of a dog. Second, the integer data type is often used to control program flow by counting (counting loops). The integer family has a circular wrap around feature. Using a two byte integer, the next number bigger than 32767 is negative 32768 (character acts the same way going from 255 to 0. We could also reverse that to be the next smaller number than negative 32768 is positive 32767. This can be shown by using a normal math line, limiting the domain and then connecting the two ends to form a circle.</p>

<figure id="id22968765"><span id="id22968765_media"><img id="id22968765__onlineimage" src="https://cnx.org/resources/4b389e887a68f40fae72bfae9e1d68f5e4f032b9/graphics1.jpg" alt="" width="600" height="450" /></span></figure>
<p id="id19255729">This circular nature of the integer family works for both integer and character data types. In theory, it should work for the Boolean data type as well; but in most programming languages it does not for various technical reasons.</p>
<p id="id22443457">"In mathematics, modular arithmetic (sometimes called clock arithmetic) is a system of arithmetic for integers where numbers "wrap around" after they reach a certain value — the modulus. …</p>
<p id="id19797002">A familiar use of modular arithmetic is its use in the 12 hour clock the arithmetic of time-keeping in which the day is divided into two 12 hour periods. If the time is 7:00 now, then 8 hours later it will be 3:00. Usual addition would suggest that the later time should be 7 + 8 = 15, but this is not the answer because clock time "wraps around" every 12 hours; there is no "15 o'clock". Likewise, if the clock starts at 12:00 (noon) and 21 hours elapse, then the time will be 9:00 the next day, rather than 33:00. Since the hour number starts over when it reaches 12, this is arithmetic modulo 12.</p>

<figure id="id22445899"><span id="id22445899_media"><img id="id22445899__onlineimage" src="https://cnx.org/resources/b64081d64cad7a7509d29934ac6abb5e81c13ff6/graphics2.png" alt="" width="188" height="82" /></span></figure>
<p id="id15090900">Time-keeping on a clock gives an example of modular arithmetic." (Modular arithmetic from Wikipedia)</p>
<p id="id18402905">The use of the modulus operator in integer division is tied to the concepts used in modular arithmetic.</p>

</section><section id="id21637124">
<h3>Implications When Executing Loops</h3>
<p id="id21628224">If a programmer sets up a counting loop incorrectly, usually one of three things happen:</p>

<ul id="id22855658">
 	<li>Infinite loop – usually caused by missing update attribute.</li>
 	<li>Loop never executes – usually the text expression is wrong with the direction of the less than or greater than relationship needing to be switched.</li>
 	<li>Loop executes more times than desired – update not properly handled. Usually the direction of counting (increment or decrement) need to be switched.</li>
</ul>
<p id="id18399683">Let’s give an example of the loop executing for what appears to be for infinity (the third item on our list).</p>

<div id="klbm1521" class="ui-has-child-title"><header>
<div>C++ source code</div>
</header><section>
<pre id="fs-id25630964"><code>
for (int x = 0; x &lt; 10; x--)
  {
  cout &lt;&lt; x &lt;&lt; endl;
  }
</code></pre>
</section></div>
<p id="id18482838">The above code accidently decrements and the value of x goes in a negative way towards -2147483648 (the largest negative value in a normal four byte signed integer data type). It might take a while (thus it might appear to be in an infinite loop) for it to reach the negative 2 billion plus value, before finally decrementing to positive 2147483647 which would, incidentally, stop the loop execution.</p>

</section><section id="id18484676">
<h3>Demonstration Program in C++</h3>
<section id="id22475386">
<h4>Creating a Folder or Sub-Folder for Source Code Files</h4>
<p id="id6328425">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the <span>Bloodshed Dev-C++ 5 compiler/IDE</span> might be named:</p>

<ul id="id19549189">
 	<li>Demo_Programs</li>
</ul>
<p id="id22769526">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id19741664">
<h4>Download the Demo Program</h4>
<p id="id18685690">Download and store the following file(s) to your storage device in the appropriate folder(s). Following the methods of your compiler/IDE, compile and run the program(s). Study the source code file(s) in conjunction with other learning materials.</p>
<p id="id21009412">Download from Connexions: <a href="https://cnx.org/resources/bcf6d6073dbd648deead3c054743b022c2105204/Demo_Circular_Nature_Integer.cpp">Demo_Circular_Nature_Integer.cpp</a></p>

</section></section><section id="id6077784">
<h2>Key Terms</h2>
<dl id="fs-id17733909">
 	<dt>circular nature</dt>
 	<dd id="fs-id14080348">Connecting the negative and positive ends of the domain of an integer family data type.</dd>
</dl>
<dl id="fs-id8468765">
 	<dt>loop control</dt>
 	<dd id="fs-id17733994">Making sure the attributes of a loop are properly handled.</dd>
</dl>
<dl id="fs-id17354153">
 	<dt>modular arithmetic</dt>
 	<dd id="fs-id16910879">A system of arithmetic for integers where numbers "wrap around".</dd>
</dl>
</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>241</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:40:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:40:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[circular-nature-of-the-integer-data-type-family]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>56</wp:post_parent>
		<wp:menu_order>8</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Formatting Output</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/formatting-output/</link>
		<pubDate>Sat, 16 Jun 2018 17:41:25 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=242</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id8915715">
<h3>General Discussion</h3>
<p id="id7177584">Formatting of output is handled in different ways in the various languages used today. Many programming languages have different formatting instructions for the standard output device which is usually the monitor (going to a DOS black screen output box) versus using the monitor as a Graphical User Interface (GUI). File storage output is often handled similarly to the standard output device. All of this makes formatting of output very machine, output device and language dependent.</p>
<p id="id16030887">When teaching programming fundamentals, many professors prefer to use the standard output device. For the C++ programming language this means going to the monitor using a DOS black screen output box.</p>

</section><section id="id4444429">
<h3>C++ Considerations using Standard Output (cout)</h3>
<section id="id23887010">
<h4>Text Wrapping and Vertical Spacing</h4>
<p id="id20785537">There are two items used to keep output from filling up a line and <strong>wrapping</strong> on to the next line. They are:</p>

<ul id="id20003694">
 	<li>Using the escape code sequence of \n within your strings (text between as set of double quote marks).</li>
 	<li>Using the item from the iostream named: endl; which is short for end line.</li>
</ul>
<p id="id17785945">Thus the programmer is responsible for making text show reasonably on the screen. Both of the above also allow for adequate <span>vertical spacing</span> when needed in your output.</p>

</section><section id="id12948512">
<h4>Handling Floating-point Data Type</h4>
<p id="id13163802">It is nice to have your output displayed so humans can read it (most humans are not use to scientific notation). There are three lines often inserted near the start of your code (first items in the function main) that can be used to direct the formatting of floating-point data. They are:</p>
<p id="id21537743"><code>cout.setf(ios::fixed);</code></p>
<p id="id17750211"><code>cout.setf(ios::showpoint);</code></p>
<p id="id23905511"><code>cout.precision(n);</code></p>
<p id="id19671624">They do the following for the rest of your program:</p>

<ul id="id19671630">
 	<li>fixed – Do not use scientific notation but show floating-point values like integer values (numeral digits of 0 to 9 – no exponent notation).</li>
 	<li>showpoint – Always show a decimal point for floating-point values even if there is no fractional part.</li>
 	<li>precision – Always show this number of digits (change n to a number like 2) to the right of the decimal point.</li>
</ul>
</section><section id="id5068968">
<h4>Setting the Width for Numbers</h4>
<p id="id13148433">Setting the width for integer family and floating-point family data types must be done for the output of each value. Assume in the following example that age is an integer data type and money is a floating-point data type.</p>
<p id="id19895975"><code>cout &lt;&lt; setw(4) &lt;&lt; age &lt;&lt; endl;</code></p>
<p id="id16143803"><code>cout &lt;&lt; setw(8) &lt;&lt; money &lt;&lt; endl;</code></p>
<p id="id23888559">Note that each value had to have its own setw(n) where n is an integer number telling it how many positions to use for the output. The iomanip header file (immediately shown) will need to be included in your program.</p>
<p id="id20914199"><code>#include&lt;iomanip&gt; // needed for the setw</code></p>

</section></section><section id="id21660688">
<h3>Demonstration Program in C++</h3>
<section id="id12734555">
<h4>Creating a Folder or Sub-Folder for Source Code Files</h4>
<p id="id18565977">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the <span>Bloodshed Dev-C++ 5 compiler/IDE</span> might be named:</p>

<ul id="id20780422">
 	<li>Demo_Programs</li>
</ul>
<p id="id13368504">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id20655653">
<h4>Download the Demo Program</h4>
<p id="id7429090">Download and store the following file(s) to your storage device in the appropriate folder(s). Following the methods of your compiler/IDE, compile and run the program(s). Study the source code file(s) in conjunction with other learning materials.</p>
<p id="id21018788">Download from Connexions: <a href="https://cnx.org/resources/d4cdcbc00947a05006810d4d3ddb438058022c45/Demo_Formatting_Output.cpp">Demo_Formatting_Output.cpp</a></p>

</section></section><section id="id13283507">
<h2>Key Terms</h2>
<dl id="fs-id12234427">
 	<dt>formatting</dt>
 	<dd id="fs-id7693496">Modifying the way the output is displayed.</dd>
</dl>
<dl id="fs-id12507278">
 	<dt>wrapping</dt>
 	<dd id="fs-id4821470">When output is not vertically spaced properly.</dd>
</dl>
</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>242</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:41:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:41:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[formatting-output]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>56</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Nested For Loops</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/nested-for-loops/</link>
		<pubDate>Sat, 16 Jun 2018 17:42:20 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=243</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id20364258">
<h3>General Discussion</h3>
<section id="id21241504">
<h4>Nested Control Structures</h4>
<p id="id24800093">We are going to first introduce the concept of nested control structures. Nesting is a concept that places one item inside of another. Consider:</p>

<pre id="klb1230001"><code>
if expression
  true action
else 
  false action
</code></pre>
<p id="id3258187">This is the basic form of the if then else control structure. Now consider:</p>

<pre id="klb1230002"><code>
if age is less than 18
  you can't vote
  if age is less than 16
    you can't drive
  else
    you can drive
else 
  you can vote
  if age is less than 21
    you can't drink 
  else
    you can drink
</code></pre>
<p id="id22180938">As you can see we simply included as part of the "true action" a statement and another if then else control structure. We did the same (nested another if then else) for the "false action". In our example we nested if then else control structures. Nesting could have an if then else within a while loop. Thus, the concept of nesting allows the mixing of the different categories of control structures.</p>
<p id="id18991458">Many complex logic problems require using nested control structures. By nesting control structures (or placing one inside another) we can accomplish almost any <strong>complex logic</strong> problem.</p>

</section></section><section id="id18778694">
<h3>An Example – Nested for loops</h3>
<p id="id20322927">Here is an example of a 12 by 12 multiplication table:</p>

<pre id="klb1230003"><code>
         1 |   2 |   3 |   4 |   5 |   6 |   7 |   8 |   9 |  10 |  11 |  12 |
     -------------------------------------------------------------------------
   1 !   1 |   2 |   3 |   4 |   5 |   6 |   7 |   8 |   9 |  10 |  11 |  12 |
   2 !   2 |   4 |   6 |   8 |  10 |  12 |  14 |  16 |  18 |  20 |  22 |  24 |
   3 !   3 |   6 |   9 |  12 |  15 |  18 |  21 |  24 |  27 |  30 |  33 |  36 |
   4 !   4 |   8 |  12 |  16 |  20 |  24 |  28 |  32 |  36 |  40 |  44 |  48 |
   5 !   5 |  10 |  15 |  20 |  25 |  30 |  35 |  40 |  45 |  50 |  55 |  60 |
   6 !   6 |  12 |  18 |  24 |  30 |  36 |  42 |  48 |  54 |  60 |  66 |  72 |
   7 !   7 |  14 |  21 |  28 |  35 |  42 |  49 |  56 |  63 |  70 |  77 |  84 |
   8 !   8 |  16 |  24 |  32 |  40 |  48 |  56 |  64 |  72 |  80 |  88 |  96 |
   9 !   9 |  18 |  27 |  36 |  45 |  54 |  63 |  72 |  81 |  90 |  99 | 108 |
  10 !  10 |  20 |  30 |  40 |  50 |  60 |  70 |  80 |  90 | 100 | 110 | 120 |
  11 !  11 |  22 |  33 |  44 |  55 |  66 |  77 |  88 |  99 | 110 | 121 | 132 |
  12 !  12 |  24 |  36 |  48 |  60 |  72 |  84 |  96 | 108 | 120 | 132 | 144 |
</code></pre>
<p id="id21171023">We might also see that the answers could be designed as a collection of cells (each cell being exactly six spaces wide). The C++ source code to produce the above is:</p>

<div id="fs-id8620969" class="ui-has-child-title"><header>
<div>C++ source code: nested for loops - multiplication table</div>
</header><section>
<pre id="klb1230004"><code>
cout &lt;&lt; "      ";
for(across=1; across &lt;13; across++)
  {
  cout &lt;&lt; setw(4) &lt;&lt; across &lt;&lt; " |";
  }
cout &lt;&lt; endl;

cout &lt;&lt; "      ";
for(across=1; across &lt;13; across++)
  {
  cout &lt;&lt; "------";
  }
cout &lt;&lt; endl;

for(down=1; down &lt;13; down++)
  {
  cout &lt;&lt; setw(4) &lt;&lt; down &lt;&lt; " !";
  for(across=1; across &lt;13; across++)
    {
    cout &lt;&lt; setw(4) &lt;&lt; down*across &lt;&lt; " |";
    }
  cout &lt;&lt; endl;
  }  
</code></pre>
</section></div>
<figure id="id24821163" class="ui-has-child-figcaption"><span id="id24821163_media"><img id="id24821163__onlineimage" src="https://cnx.org/resources/5f143cc7667e3c63bdce86b49ec8f398eba1c2cb/graphics1.jpg" alt="" width="600" height="450" /></span><figcaption>Colorized Code - multiplication table</figcaption></figure>
<figure id="id20280942" class="ui-has-child-figcaption"><span id="id20280942_media"><img id="id20280942__onlineimage" src="https://cnx.org/resources/01eee051ffe13ff2dd1f3a771dd44bd3bd356ecb/graphics2.jpg" alt="" width="600" height="450" /></span><figcaption>Colorized Output - multiplication table</figcaption></figure>
</section><section id="id23731928">
<h3>Demonstration Program in C++</h3>
<section id="id21498233">
<h4>Creating a Folder or Sub-Folder for Source Code Files</h4>
<p id="id2693505">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the <span>Bloodshed Dev-C++ 5 compiler/IDE</span> might be named:</p>

<ul id="id24679204">
 	<li>Demo_Programs</li>
</ul>
<p id="id8675956">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id24785700">
<h4>Download the Demo Program</h4>
<p id="id2812726">Download and store the following file(s) to your storage device in the appropriate folder(s). Following the methods of your compiler/IDE, compile and run the program(s). Study the source code file(s) in conjunction with other learning materials.</p>
<p id="id24250696">Download from Connexions: <a href="https://cnx.org/resources/a7e50602193535daf1502756a57c77e4d96d24dd/Demo_Nested_For_Loops.cpp">Demo_Nested_For_Loops.cpp</a></p>

</section></section><section id="id2758839">
<h2>Key Terms</h2>
<dl id="fs-id11686259">
 	<dt>complex logic</dt>
 	<dd id="fs-id10755923">Often solved with nested control structures.</dd>
</dl>
</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>243</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:42:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:42:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nested-for-loops]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>56</wp:post_parent>
		<wp:menu_order>10</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Practice 3</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/practice-15/</link>
		<pubDate>Sat, 16 Jun 2018 17:42:55 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=244</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id15883387">
<h2>Learning Objectives</h2>
<ol id="id16814888" type="1">
 	<li>Understand key terms and definitions as listed in the modules associated with this chapter.</li>
 	<li>Identify which selection control structures are commonly used a counting loops.</li>
 	<li>Be able to write pseudo code or flowcharting for the for control structure.</li>
 	<li>Be able to write C++ source code for a for control structure.</li>
 	<li>When feasible, be able to convert C++ source code from while loop acting like a counting loop to a for loop and and vice versa.</li>
</ol>
</section><section id="id15894815"></section><section id="id15485691">
<h2>Review Questions</h2>
<div id="fs-id12023619"><section>
<div id="fs-id11801781">
<div id="fs-id10818349">
<div>Answer the following statements as either true or false:</div>
<ol>
 	<li>Only for loops can be counting loops.</li>
 	<li>The integer data type has modular arithmetic attributes.</li>
 	<li>The escape code of \n is part of formatting output.</li>
 	<li>Nested for loops is not allowed in the C++ programming language.</li>
 	<li>Counting loops use all four of the loop attributes.</li>
</ol>
</div>
</div>
<div id="fs-id8470086">
<div class="ui-toggle-wrapper">
<div>Answers:</div>
<ol>
 	<li>false</li>
 	<li>true</li>
 	<li>true</li>
 	<li>false</li>
 	<li>true</li>
</ol>
</div>
</div>
</section></div>
</section><section id="id16840477"></section><section id="id15889970">
<h2>Activities</h2>
<section id="id16072981">
<h4>Creating a Folder or Sub-Folder for Chapter 15 Files</h4>
<p id="id16824860">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id15826406">
 	<li>Chapter_15 within the folder named: Cpp_Source_Code_Files</li>
</ul>
<p id="id4958857">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id4958863">
<h4>Download the Lab File(s)</h4>
<p id="id16069157">Download and store the following file(s) to your storage device in the appropriate folder(s). You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id13557957">Download from Connexions: <a href="https://cnx.org/resources/8c583d45dfe9baf8b124a665449c7cac3e512316/Lab_15a.cpp">Lab_15a.cpp</a></p>

</section><section id="id15022653">
<h4>Detailed Lab Instructions</h4>
<p id="id14290268">Read and follow the directions below carefully, and perform the steps in the order listed.</p>

<ul id="id14290277">
 	<li>Compile and run the Lab_15a.cpp source code file. Understand how it works.</li>
 	<li>Copy the source code file Lab_15a.cpp naming it: Lab_15b.cpp</li>
 	<li>Convert the code that is counting (all four attributes) to a for loop.</li>
 	<li>Build (compile and run) your program.</li>
 	<li>After you have successfully written this program, if you are taking this course for college credit, follow the instructions from your professor/instructor for submitting it for grading.</li>
</ul>
</section></section><section id="id13772658">
<h3>Problems</h3>
<section id="id13043736">
<h4>Problem 15a – Instructions</h4>
<p id="id13679608">Using proper C++ syntax, convert the following for loop to a while loop.</p>

<div id="klbp1501" class="ui-has-child-title"><header>
<div>C++ source code</div>
</header><section>
<pre id="klbp1303"><code>
for (x = 0; x &lt; 10; x++)
  {
  cout &lt;&lt; "Having fun!";
  }</code></pre>
</section></div>
</section></section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>244</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:42:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:42:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[practice-15]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>56</wp:post_parent>
		<wp:menu_order>13</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>String Class within C++</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/string-class-within-c/</link>
		<pubDate>Sat, 16 Jun 2018 17:44:57 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=250</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id17538620">
<h3>General Discussion</h3>
<p id="id12199130">In most programming languages a string is typically a string of characters (string them along in a series). The rules for handling strings vary from language to language. Technically, there is no string data type in the C++ programming language. However, the concept of a string data type makes it easy to handle stings of character data. Associated with object oriented programming the string class has been added to C++ as a standard part of the programming language.</p>
<p id="id11143035">Most data is more complex than just one character, integer, etc.  Programming languages develop other methods to represent and store data that are more complex.  A complex data type of array is first most students encounter. An array is a sequenced collection of elements of the same data type with a single identifier name. This definition perfectly describes our string data type concept.  The simplest array is called a one-dimensional array; also know as a list because we usually list the members or elements vertically.  However, strings are viewed as a one-dimensional array that visualize as listed horizontally.  Strings are an array of character data.</p>
<p id="id6634411">In the "C" programming language all strings were handled as an array of characters that end in an ASCII null character (the value 0 or the first character in the ASCII character code set). This changed with the implementation of the string class within C++ where strings are stored as a length controlled array with a maximum length of 255 characters. This string class implementation also allowed programmers to use the reserved word string as if it were a data type. Commonly used operators and some alternatives for the string class are summarized in the following table:</p>

<table id="id15485028" summary="">
<tbody>
<tr>
<td>C++ Operator</td>
<td>Operator Name</td>
<td>String Class Implementation</td>
</tr>
<tr>
<td>=</td>
<td>assignment</td>
<td>Same as for standard data types</td>
</tr>
<tr>
<td>&lt;, &gt;, &lt;=, &gt;=, ==, !=</td>
<td>six relational</td>
<td>Same as for standard data types</td>
</tr>
<tr>
<td>+</td>
<td>addition</td>
<td>Concatenation or Append</td>
</tr>
<tr>
<td>sizeof</td>
<td>Usage how many bytes a data type occupies</td>
<td>Implemented using a class member function named length. Format: identifier_name.length() NOTE: The period between the identifier name and the function name is the class member operator.</td>
</tr>
<tr>
<td>. <strong>the period</strong></td>
<td>class member</td>
<td>Used in conjunction with class functions</td>
</tr>
</tbody>
</table>
<p id="id8643916">Most other operators are not allowed and basically do not make sense for a string data type. The above items are demonstrated in the following program.</p>

</section><section id="id14177815">
<h3>Demonstration Program in C++</h3>
<section id="id16952152">
<h4>Creating a Folder or Sub-Folder for Source Code Files</h4>
<p id="id7527095">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id9057496">
 	<li>Demo_Programs</li>
</ul>
<p id="id13355933">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id17546050">
<h4>Download the Demo Program</h4>
<p id="id4924817">Download and store the following file(s) to your storage device in the appropriate folder(s). Following the methods of your compiler/IDE, compile and run the program(s). Study the source code file(s) in conjunction with other learning materials.</p>
<p id="id7526278">Download from Connexions: <a href="https://cnx.org/resources/2b80d433c9dfb6a46b2798fca2da1f5dcaceaaf6/Demo_String_Class.cpp">Demo_String_Class.cpp</a></p>

</section></section><section id="id12763271">
<h2>Key Terms</h2>
<dl id="fs-id8169639">
 	<dt>array</dt>
 	<dd id="fs-id6135743">A sequenced collection of elements of the same data type with a single identifier name.</dd>
</dl>
<dl id="fs-id8181693">
 	<dt>
<dl id="fs-id8171986">
 	<dt><section id="id12763271">
<dl id="fs-id8173743">
 	<dt>class member</dt>
 	<dd id="fs-id14817719">An operator used to invoke functions associated with a class.</dd>
</dl>
</section></dt>
</dl>
concatenation</dt>
 	<dd id="fs-id12098855">Combining two strings into one string.</dd>
</dl>
<dl id="fs-id8171986">
 	<dt><section id="id12763271">
<dl id="fs-id8173743"></dl>
</section>string class</dt>
 	<dd id="fs-id11864161">A complex data item that uses object oriented programming.</dd>
</dl>
<dl id="fs-id8173743"></dl>
</section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>250</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:44:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:44:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[string-class-within-c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>62</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Unary Positive and Negative Operators</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/unary-positive-and-negative-operators/</link>
		<pubDate>Sat, 16 Jun 2018 17:45:50 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=251</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id22987374">
<h3>General Discussion</h3>
<p id="id8725883">Unary positive also known as plus and unary negative also known as minus are unique operators. The plus and minus when used with a constant value represent the concept that the values are either positive or negative. Let’s consider:</p>
<p id="id21111333"><code>+5 + -2</code></p>
<p id="id22864150">We have three operators in this order: unary positive, addition, and unary negative. The answer to this expression is a positive 3. As you can see, one must differentiate between when the plus sign means unary positive and when it means addition. Unary negative and subtraction have the same problem. Let’s consider:</p>
<p id="id21286196"><code>-2 - +5</code></p>
<p id="id18611906">The expression evaluates to negative 7. Let’s consider:</p>
<p id="id22207015"><code>7 - -2</code></p>
<p id="id19527072">First constants that do not have a unary minis in front of them are assumed (the default) to be positive. When you subtract a negative number it is like adding, thus the expression evaluates to positive 9.</p>

</section><section id="id22868318">
<h3>C++ Code Examples</h3>
<p id="id18458218">The above examples work within the C++ programming language. What happens if we put a unary positive or unary negative in front of a variable or a named constant?</p>

<section id="id22848478">
<h4>Negation – Unary Negative</h4>
<p id="id22345050">The concept of negation is to take a value and change its sign, that is: flip it. If it positive make it negative and if it is negative make it positive. Mathematically, it is the following C++ code example, given that money is an integer variable with a value of 6:</p>
<p id="id21339351"><code>-money</code></p>
<p id="id22842056"><code>money * -1</code></p>
<p id="id22467452">The above two expressions evaluate to the same value. In the first line, the value in the variable money is fetched and then it’s negated to a negative 6. In the second line, the value in the variable money is fetched and then it’s multiplied by negative 1 making the answer a negative 6.</p>

</section><section id="id15647927">
<h4>Unary Positive – Worthless</h4>
<p id="id22597534">Simply to satisfy symmetry, the unary positive was added to the C++ programming language as on operator. However, it is a totally worthless or useless operator and is rarely used.  However don’t be confused the following expression is completely valid:</p>
<p id="id22868895"><code>6 + +5</code></p>
<p id="id21218014">The second + sign is interpreted as unary positive. The first + sign is interpreted as addition.</p>
<p id="id21643289"><code>money</code></p>
<p id="id21458570"><code>+money</code></p>
<p id="id22858899"><code>money * +1</code></p>
<p id="id19565545">For all three lines, if the value stored in money is 6 the value of the expression is 6. Even if the value in money was negative 77 the value of the expression would be negative 77. The operator does nothing, because multiplying anything by 1 does not change its value.</p>

</section><section id="id7542220">
<h4>Possible Confusion</h4>
<p id="id19556473">Do not confuse the unary negative operator with decrement. Decrement changes the value in the variable and thus is an Lvalue concept. Unary negative does not change the value of the variable, but uses it in an Rvalue context. It fetches the value and then negates that value. The original value in the variable does not change.</p>
<p id="id20182382">Because there is no changing of the value associated with the identifier name, the identifier name could represent a variable or named constant.</p>

</section><section id="id20165575">
<h4>Exercises</h4>
<div id="fs-id15820750"><section>
<div id="fs-id16055782">
<div id="fs-id16186999">
<div>Evaluate the following items involving unary positive and unary negative:</div>
<ol>
 	<li>+10 - -2</li>
 	<li>-18 + 24</li>
 	<li>4 - +3</li>
 	<li>+8 + - +5</li>
 	<li>+8 + / +5</li>
</ol>
</div>
</div>
<div id="fs-id18695852">
<div class="ui-toggle-wrapper"></div>
</div>
</section></div>
</section></section><section id="id11146727">
<h2>Key Terms</h2>
<dl id="fs-id17775176"></dl>
<dl id="fs-id17682770"></dl>
<dl id="fs-id16220808">
 	<dt><section id="id11146727">
<dl id="fs-id17059316">
 	<dt>minus</dt>
 	<dd id="fs-id15954771">Aka unary negative.</dd>
</dl>
</section>plus</dt>
 	<dd id="fs-id17059836">Aka unary positive.</dd>
</dl>
<dl id="fs-id17682770">
 	<dt>unary negative</dt>
 	<dd id="fs-id17863375">An operator that causes negation.</dd>
</dl>
<dl id="fs-id16220808">
 	<dt><section id="id11146727">
<dl id="fs-id17059316">
 	<dt>
<dl id="fs-id17775176">
 	<dt>unary positive</dt>
 	<dd id="fs-id17675375">A worthless operator almost never used.</dd>
</dl>
<dl id="fs-id17682770">
 	<dt></dt>
</dl>
</dt>
</dl>
</section></dt>
</dl>
<dl id="fs-id17059316"></dl>
</section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>251</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:45:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:45:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[unary-positive-and-negative-operators]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>62</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Practice</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/practice-16/</link>
		<pubDate>Sat, 16 Jun 2018 17:46:29 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=252</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id18312735">
<h2>Learning Objectives</h2>
<ol id="id17352452" type="1">
 	<li>Understand key terms and definitions as listed in the modules associated with this chapter.</li>
 	<li>Identify which operators are allowed with the string class.</li>
 	<li>Understand the unary positive and unary negative operators.</li>
</ol>
</section><section id="id16231938"></section><section id="id17330715">
<h2>Review Questions</h2>
<div id="fs-id10833574"><section>
<div id="fs-id12822683">
<div id="fs-id10844484">
<div>Evaluate the following items involving unary positive and unary negative:</div>
<ol>
 	<li>+13 - -2</li>
 	<li>-10 + 14</li>
 	<li>4 + - 3</li>
 	<li>+8 - * +5</li>
</ol>
</div>
</div>
<div id="fs-id10912690">
<div class="ui-toggle-wrapper">
<div>Answers:</div>
<ol>
 	<li>15</li>
 	<li>4</li>
 	<li>1</li>
 	<li>Error, no operand between subtraction and multiplication.</li>
</ol>
</div>
</div>
</section></div>
</section><section id="id17401796"></section><section id="id16708464">
<h2>Activities</h2>
<section id="id16811536">
<h4>Creating a Folder or Sub-Folder for Chapter 16 Files</h4>
<p id="id15926314">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id17393304">
 	<li>Chapter_16 within the folder named: Cpp_Source_Code_Files</li>
</ul>
<p id="id16709733">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id16776117">
<h4>Download the Lab File(s)</h4>
<p id="id16859345">Download and store the following file(s) to your storage device in the appropriate folder(s). You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id17393631">Download from Connexions: <a href="https://cnx.org/resources/54aaf74272f39ec470b329fdaff345bff59aed96/Lab_16_Pseudocode.txt">Lab_16_Pseudocode.txt</a></p>

</section><section id="id18296448">
<h4>Detailed Lab Instructions</h4>
<p id="id16741670">Read and follow the directions below carefully, and perform the steps in the order listed.</p>

<ul id="id18284687">
 	<li>Create a source code file from the Lab_16_Pseudocode.txt file. Name it: Lab_16.cpp</li>
 	<li>Build (compile and run) your program.</li>
 	<li>After you have successfully written this program, if you are taking this course for college credit, follow the instructions from your professor/instructor for submitting it for grading.</li>
</ul>
</section></section><section id="id17392535">
<h3>Problems</h3>
<section id="id16797012">
<h4>Problem 16a – Instructions</h4>
<p id="id16724784">Describe the normal C++ operators allowed with the string data type.</p>

</section><section id="id16936268">
<h4>Problem 16b – Instructions</h4>
<p id="id16728874">Describe why unary positive is worthless.</p>

</section><section id="id15903351">
<h4>Problem 16c – Instructions</h4>
<p id="id16719636">Describe how unary negative works.</p>

</section></section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>252</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:46:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:46:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[practice-16]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>62</wp:post_parent>
		<wp:menu_order>7</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Conditional Operator</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/conditional-operator/</link>
		<pubDate>Sat, 16 Jun 2018 17:47:32 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=256</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id9940622">
<h3>Overview</h3>
<p id="id3787416">The conditional operator is unique in that it has three operands separated by two unconnected operator symbols. All other C++ operators are either unary (one operator and one operand) or binary (one operator and two operands).  On the "Abbreviated Precedence Chart for C++ Operators" the conditional operator has the word "trinary" in the comments column.  This prefix "tri" means three, thus three operands.</p>

<table id="id15558314" summary="">
<tbody>
<tr>
<td>C++ Operator</td>
<td>Meaning</td>
<td>Comments</td>
</tr>
<tr>
<td>? :</td>
<td>conditional</td>
<td>trinary – three operands with two operators</td>
</tr>
</tbody>
</table>
<p id="id9937250">As an operator it produces a value for the expression. An easy way to explain the conditional operator is to convert an "if then else" control structure to an expression using the conditional operator.</p>

<div id="fs-id16600853" class="ui-has-child-title"><header>
<div>if then else</div>
</header><section>
<pre id="fs-id15745920"><code>
if (age &gt; 17)
  {
  cout &lt;&lt; "You can vote.";
  }
else
  {
  cout &lt;&lt; "You can’t vote.";
  }</code></pre>
</section></div>
<div id="fs-id8829385" class="ui-has-child-title"><header>
<div>conditional = option 1</div>
</header><section>
<pre id="fs-id13716412"><code>
age &gt; 17 ? cout &lt;&lt; "You can vote." : cout &lt;&lt; "You can’t vote."; </code></pre>
</section></div>
<div id="fs-id15680127" class="ui-has-child-title"><header>
<div>conditional = option 2</div>
</header><section>
<pre id="fs-id15640905"><code>
cout &lt;&lt; (age &gt; 17 ? "You can vote." : "You can’t vote.");</code></pre>
<div id="fs-id16705761"><section>The use of parenthesizes is needed because of the precedence of operators. The conditional expression is of lower precedence than the insertion (writing) operator.</section></div>
</section></div>
<p id="id13832153">The first operand is a <strong>test expression</strong> similar to those that control program flow in control structures. This type of expression is also known as a <strong>Boolean expression</strong> because they create a Boolean answer of true or false. If the test is true the second operand becomes the value of the expression. If false, the third operand becomes the value of the expression. The operators of the question mark and colon separate the three operands.</p>

<div id="fs-id16297521" class="ui-has-child-title"><header>
<div>general format</div>
</header><section>
<pre id="fs-id16073703"><code>
test expression ? expression true : expression false</code></pre>
</section></div>
</section><section id="fs-id6527450">
<h2>Key Terms</h2>
<dl id="fs-id5570273">
 	<dt>conditional</dt>
 	<dd id="fs-id5004310">A trinary C++ operator that acts like an if then else control structure.</dd>
</dl>
</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>256</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:47:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:47:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[conditional-operator]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>64</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Recursion vs Iteration</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/recursion-vs-iteration/</link>
		<pubDate>Sat, 16 Jun 2018 17:48:07 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=257</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id27211050">
<h3>Repetitive Algorithms</h3>
<p id="id27210269">"In general, there are two approaches to writing repetitive algorithms. One uses loops; the other uses recursion. <strong>Recursion</strong> is a repetitive process in which a function calls itself. Both approaches provide repetition, and either can be converted to the other's approach."<sup id="footnote-ref1"><a href="https://cnx.org/contents/MDgA8wfz@22.2:1OoErcq_@4/Recursion-vs-Iteration#footnote1">1</a></sup> Iteration is one of the categories of control structures.  It allows for the processing of some action zero to many times.  Iteration is also known as looping and repetition. The math term "to iterate" means to perform the statement parts of the loop. Many problems/tasks require the use of repetitive algorithms.  With most programming languages this can be done with either:</p>

<ol id="id25859310" type="1">
 	<li>looping control structures, specifically the for loop (an iterative approach)</li>
 	<li>recursive calling of a function</li>
</ol>
<p id="id25773116">Using repetitive algorithms as the solution method occurs in many mathematical oriented problems.  These in include factorial, Fibonacci numbers, and the Towers of Hanoi problem. Solutions to these problems are often only presented in terms of using the recursive method. However, "… you should understand the two major limitations of recursion. First, recursive solutions may involve extensive overhead because they use function calls. Second, each time you make a call you use up some of your memory allocation. If the recursion is deep – that is, if there is a large number of recursive calls – then you may run out of memory. Both the factorial and Fibonacci numbers solutions are better developed iteratively."<sup id="footnote-ref2"><a href="https://cnx.org/contents/MDgA8wfz@22.2:1OoErcq_@4/Recursion-vs-Iteration#footnote2">2</a></sup></p>
<p id="id25711849">Understanding how recursion or the iterative approaches work will be left to others. They are usually covered in detail as part of studying data structures. Our goal in covering them is to:</p>

<ol id="id27589826" type="1">
 	<li>Provide you with a definition of recursion</li>
 	<li>Introduce the alternate solution approach of iteration</li>
</ol>
<p id="id27643598">The following demonstration program shows both solutions for 8! (eight factorial).</p>

</section><section id="id27698545">
<h3>Demonstration Program in C++</h3>
<section id="id26742485">
<h4>Creating a Folder or Sub-Folder for Source Code Files</h4>
<p id="id25237145">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id24429602">
 	<li>Demo_Programs</li>
</ul>
<p id="id24429888">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id25500674">
<h4>Download the Demo Program</h4>
<p id="id25650899">Download and store the following file(s) to your storage device in the appropriate folder(s). Following the methods of your compiler/IDE, compile and run the program(s). Study the source code file(s) in conjunction with other learning materials.</p>
<p id="id18024652">Download from Connexions: <a href="https://cnx.org/resources/f0da1a8084d256ba8e9253a644ca3ed6477e197b/Demo_Factorial.cpp">Demo_Factorial.cpp</a></p>

</section></section><section id="id24439630">
<h2>Key Terms</h2>
<dl id="fs-id8168477">
 	<dt><section id="id24439630">
<dl id="fs-id8172254">
 	<dt>factorial</dt>
 	<dd id="fs-id7746913">A math problem that often is solved using recursion.</dd>
</dl>
</section>recursion</dt>
 	<dd id="fs-id8796307">A repetitive process in which a function calls itself.</dd>
</dl>
<dl id="fs-id8172254"></dl>
</section>
<div>
<h3>Footnotes</h3>
<ul>
 	<li id="footnote1"><a href="https://cnx.org/contents/MDgA8wfz@22.2:1OoErcq_@4/Recursion-vs-Iteration#footnote-ref1">1</a> Behrouz A. Forouzan and Richard F. Gilberg, <u>Computer Science A Structured Approach using C++ Second Edition</u> (United States of America: Thompson – Brooks/Cole, 2004) 265.</li>
 	<li id="footnote2"><a href="https://cnx.org/contents/MDgA8wfz@22.2:1OoErcq_@4/Recursion-vs-Iteration#footnote-ref2">2</a> Behrouz A. Forouzan and Richard F. Gilberg, <u>Computer Science A Structured Approach using C++ Second Edition</u> (United States of America: Thompson – Brooks/Cole, 2004) 272.</li>
</ul>
</div>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>257</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:48:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:48:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[recursion-vs-iteration]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>64</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Practice</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/practice-17/</link>
		<pubDate>Sat, 16 Jun 2018 17:48:38 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=258</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div class="media-body">
<div id="content"><section id="id14615155">
<h2>Learning Objectives</h2>
<ol id="id5338019" type="1">
 	<li>Understand key terms and definitions as listed in the modules associated with this chapter.</li>
 	<li>Understand the conditional operator and how it works.</li>
 	<li>Understand recursion as a problem solving technique.</li>
 	<li>When feasible, be able to convert C++ source code from a conditional expression to an if then else and vice versa.</li>
</ol>
</section><section id="id14438091"></section><section id="id3806235">
<h2>Review Questions</h2>
<div id="fs-id28289471"><section>
<div id="fs-id26099181">
<div id="fs-id22786949">
<div>Answer the following statements as either true or false:</div>
<ol>
 	<li>The conditional expression acts like a case structure.</li>
 	<li>The conditional operator is a two part operator with three operands.</li>
 	<li>Recursion is one method of implementing a repetitive algorithm.</li>
 	<li>Recursion is always preferred over an iterative approach to a repetitive problem.</li>
 	<li>Factorial is usually demonstrated with an iterative approach.</li>
</ol>
</div>
</div>
<div id="fs-id23958862">
<div class="ui-toggle-wrapper">
<div>Answers:</div>
<ol>
 	<li>false</li>
 	<li>true</li>
 	<li>true</li>
 	<li>false</li>
 	<li>false</li>
</ol>
</div>
</div>
</section></div>
</section><section id="id3608056"></section><section id="id14509781">
<h2>Activities</h2>
<section id="id10902344">
<h4>Creating a Folder or Sub-Folder for Chapter 17 Files</h4>
<p id="id14761293">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id14558906">
 	<li>Chapter_17 within the folder named: Cpp_Source_Code_Files</li>
</ul>
<p id="id9012957">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id14542766">
<h4>Download the Lab File(s)</h4>
<p id="id3888472">Download and store the following file(s) to your storage device in the appropriate folder(s). You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id6375022">Download from Connexions: <a href="https://cnx.org/resources/fa03956970a68dc8b294ba2e9ac81c12a2c2b90b/Lab_17a.cpp">Lab_17a.cpp</a></p>

</section><section id="id14343212">
<h4>Detailed Lab Instructions</h4>
<p id="id14554736">Read and follow the directions below carefully, and perform the steps in the order listed.</p>

<ul id="id4026069">
 	<li>Compile and run the Lab_17a.cpp source code file. Understand how it works.</li>
 	<li>Copy the source code file Lab_17a.cpp naming it: Lab_17b.cpp</li>
 	<li>Convert the code that is using the if then else to a conditional expression.</li>
 	<li>Convert the code that is using the conditional expression to an if then else.</li>
 	<li>Build (compile and run) your program.</li>
 	<li>After you have successfully written this program, if you are taking this course for college credit, follow the instructions from your professor/instructor for submitting it for grading.</li>
</ul>
</section></section><section id="id14685949">
<h3>Problems</h3>
<section id="id4045481">
<h4>Problem 17a – Instructions</h4>
<p id="id8405937">Using proper C++ syntax, convert the following if then else to a conditional expression.</p>

<div id="fs-id24506552" class="ui-has-child-title"><header>
<div>if then else</div>
</header><section>
<pre id="fs-id20107584"><code>
if (x == y)
  {
  z = 14;
  }
else
  {
  z++;
  }</code></pre>
</section></div>
</section><section id="id4089152">
<h4>Problem 17b – Instructions</h4>
<p id="id8404567">Using proper C++ syntax, convert the following conditional expression to an if then else.</p>

<div id="fs-id13721704" class="ui-has-child-title"><header>
<div>conditional</div>
</header><section>
<pre id="fs-id24104640"><code>
answer = y &lt; z ? 47 : 92;</code></pre>
</section></div>
</section></section></div>
</div>
</div>
<div>
<div class="media-footer"></div>
</div>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>258</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:48:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:48:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[practice-17]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>64</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Array Data Type</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/array-data-type/</link>
		<pubDate>Sat, 16 Jun 2018 17:49:52 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=262</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id5887267">
<h3>Overview</h3>
<p id="id6018011">An <span>array</span> is a sequenced collection of elements of the same data type with a single identifier name. As such, the array data type belongs to the "Complex" category or family of data types. Arrays can have multiple axes (more than one axis). Each axis is a <strong>dimension</strong>. Thus a single dimension array is also known as a <strong>list</strong>. A two dimension array is commonly known as a <strong>table</strong> (a spreadsheet like Excel is a two dimension array). In real life there are occasions to have data organized into multiple dimensioned arrays. Consider a theater ticket with section, row and seat (three dimensions). This module will only cover the single dimension array. Most single dimension arrays are visualized vertically and are often called a list.</p>
<p id="id5689538">Most programmers are familiar with a special type of array called a <span>string</span>. Strings are basically a single dimension array of characters. Unlike other single dimension arrays, we usually envision a string as a horizontal stream of characters and not vertically as a list. Within C++ the string data type is a length-controlled array and is a pre-defined data class.</p>
<p id="id5606228">We refer to the individual values as members (or elements) of the array. Programming languages implement the details of arrays differently. Because there is only one identifier name assigned to the array, we have operators that allow us to reference or access the individual members of an array. The operator commonly associated with referencing array members is the <strong>index</strong> operator. It is important to learn how to define an array and initialize its members. Additionally, the <strong>sizeof</strong> operator is often used to calculate the number of members in an array.</p>

</section><section id="id5698148">
<h3>Defining an Array in C++</h3>
<p id="id5704078">Example:</p>
<p id="id5720046"><code>int ages[5] = {49,48,26,19,16};</code></p>
<p id="id5678072">This is the <strong>defining of storage space</strong>. The square brackets (left [ and right ]) are used here to create the array with five integer members and the identifier name of ages. The assignment with braces (that is a block) establishes the initial values assigned to the members of the array. Note the use of the sequence or comma operator. We could have done it this way:</p>
<p id="id5982516"><code>int ages[] = {49,48,26,19,16};</code></p>
<p id="id5980996">By leaving out the five and having initial values assigned, the compiler will know to create the array with five storage spaces because there are five values listed. This method is preferred because we can simply add members to or remove members from the array by changing the items inside of the braces. We could have also done this:</p>
<p id="id5981033"><code>int ages[5];</code></p>
<p id="id5596849">This would have declared the storage space of five integers with the identifier name of ages but their initial values would have been unknown values (actually there would be values there but we don’t know what they would be and thus think of the values as garbage). We could assign values later in our program by doing this:</p>
<p id="id5674599"><code>ages[0] = 49;</code></p>
<p id="id5705316"><code>ages[1] = 48;</code></p>
<p id="id5706579"><code>ages[2] = 26;</code></p>
<p id="id5886993"><code>ages[3] = 19;</code></p>
<p id="id5683482"><code>ages[4] = 16;</code></p>

<div id="eip-id19086384"><section>The members of the array go from 0 to 4; <strong>NOT</strong> 1 to 5. This is explained in more detail in another Connexions module that covers accessing array members and is listed in the supplemental links provided. See: Array Index Operator.</section></div>
</section><section id="id5705224">
<h2>Key Terms</h2>
<dl id="fs-id17756753">
 	<dt>dimension</dt>
 	<dd id="fs-id18523701">An axis of an array.</dd>
</dl>
<dl id="fs-id18626968">
 	<dt>list</dt>
 	<dd id="fs-id17764664">A single dimension array.</dd>
</dl>
<dl id="fs-id17749899">
 	<dt>table</dt>
 	<dd id="fs-id17763689">A two dimension array.</dd>
</dl>
</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>262</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:49:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:49:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[array-data-type]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>66</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Array Index Operator</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/array-index-operator/</link>
		<pubDate>Sat, 16 Jun 2018 17:50:37 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=263</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id4790632">
<h3>Array Index Operator in C++</h3>
<p id="id5791282">Example:</p>
<p id="id8709375"><code>int ages[5] = {49,48,26,19,16};</code></p>
<p id="id8755618"><code>int my_age;</code></p>
<p id="id8788915"><code>my_age = ages[2]</code></p>
<p id="id8727235">This second usage of the square brackets is as the <strong>array notation of dereference</strong> or more commonly called the <strong>index operator</strong>. As an operator it either provides the value held by the member of the array (Rvalue) or changes the value of member (Lvalue). In the above example the member that is two offsets from the front of the array (the value 26) is assigned to variable named my_age. The dereference operator of [2] means to go the 2<sup>nd</sup> <strong>offset</strong> from the front of the ages array and get the value stored there. In this case the value would be 26. The array members (or elements) are referenced starting at zero. The more common way for people to reference a list is by starting with one. Many programming languages reference array members starting at one, however for some languages (and C++ is one of them) you will need to <strong>change your thinking</strong>. Consider:</p>

<table id="id8627696" summary="">
<tbody>
<tr>
<td><strong>Position</strong></td>
<td><strong>C++</strong></td>
<td><strong>Miss America</strong></td>
<td><strong>Other Contests</strong></td>
</tr>
<tr>
<td>zero offsets from the front</td>
<td>ages [0]</td>
<td>Winner</td>
<td>1<sup>st</sup> Place</td>
</tr>
<tr>
<td>one offsets from the front</td>
<td>ages [1]</td>
<td>1<sup>st</sup> Runner Up</td>
<td>2<sup>nd</sup> Place</td>
</tr>
<tr>
<td>two offsets from the front</td>
<td>ages [2]</td>
<td>2<sup>nd</sup> Runner Up</td>
<td>3<sup>rd</sup> Place</td>
</tr>
<tr>
<td>three offsets from the front</td>
<td>ages [3]</td>
<td>3<sup>rd</sup> Runner Up</td>
<td>4<sup>th</sup> Place</td>
</tr>
<tr>
<td>four offsets from the front</td>
<td>ages [4]</td>
<td>4<sup>th</sup> Runner Up</td>
<td>5<sup>th</sup> Place</td>
</tr>
</tbody>
</table>
<p id="id8556525">Saying that my cousin is the 2<sup>nd</sup> Runner Up in the Miss America contest sounds so much better than saying that she was in 3<sup>rd</sup>Place. We would be talking about the same position in the array of the five finalists.</p>
<p id="id8735246"><code>ages[3] = 20;</code></p>
<p id="id6116994">This is an example of changing an array’s value by assigning 20 to the 4<sup>th</sup> member of the array and replacing the value 19 with 20. This is an Lvalue context because the array is on the left side of the assignment operator.</p>
<p id="id6132834">The C++ operator name is called the array index or simply the index operator and it uses the square brackets as the operator symbols.</p>

</section><section id="id6065317">
<h2>Key Terms</h2>
<dl id="fs-id23819019">
 	<dt>array member</dt>
 	<dd id="fs-id24529214">An element or value in an array.</dd>
</dl>
<dl id="fs-id3830547">
 	<dt>index</dt>
 	<dd id="fs-id24164792">An operator that allows us to reference a member of an array.</dd>
</dl>
<dl id="fs-id4233233">
 	<dt>offset</dt>
 	<dd id="fs-id4201502">The method of referencing array members by starting at zero.</dd>
</dl>
</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>263</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:50:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:50:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[array-index-operator]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>66</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Displaying Array Members</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/displaying-array-members/</link>
		<pubDate>Sat, 16 Jun 2018 17:51:14 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=264</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id19085743">
<h3>Accessing Array Members in C++</h3>
<div id="klbm1801" class="ui-has-child-title"><header>
<div>accessing the members of an array</div>
</header><section>
<pre id="klbm1803"><code>
int ages[] = {49,48,26,19,16};
int counter;

for (counter = 0, counter &lt; 5, counter++)
  {
  cout &lt;&lt; ages[counter] &lt;&lt; endl;
  }</code></pre>
</section></div>
<p id="id19294497">This second usage of the square brackets is as the <strong>array notation of dereference</strong> or more commonly called the <strong>index operator</strong>. As an operator it provides the value held by the member of the array. For example, during one of the iterations of the for loop the index (which is an integer data type) will have the value of 3. The expression ages[counter] would in essence be: ages[3]. The dereference operator of [3] means to go the 3<sup>rd</sup> offset from the front of the ages array and get the value stored there. In this case the value would be 19. The array members (or elements) are referenced starting at zero. The more common way for people to reference a list is by starting with one. Many programming languages reference array members starting at one, however for some languages (and C++ is one of them) you will need to <strong>change your thinking</strong>. Consider:</p>

<table id="id17747253" summary="">
<tbody>
<tr>
<td><strong>Position</strong></td>
<td><strong>C++</strong></td>
<td><strong>Miss America</strong></td>
<td><strong>Other Contests</strong></td>
</tr>
<tr>
<td>zero offsets from the front</td>
<td>ages [0]</td>
<td>Winner</td>
<td>1<sup>st</sup> Place</td>
</tr>
<tr>
<td>one offsets from the front</td>
<td>ages [1]</td>
<td>1<sup>st</sup> Runner Up</td>
<td>2<sup>nd</sup> Place</td>
</tr>
<tr>
<td>two offsets from the front</td>
<td>ages [2]</td>
<td>2<sup>nd</sup> Runner Up</td>
<td>3<sup>rd</sup> Place</td>
</tr>
<tr>
<td>three offsets from the front</td>
<td>ages [3]</td>
<td>3<sup>rd</sup> Runner Up</td>
<td>4<sup>th</sup> Place</td>
</tr>
<tr>
<td>four offsets from the front</td>
<td>ages [4]</td>
<td>4<sup>th</sup> Runner Up</td>
<td>5<sup>th</sup> Place</td>
</tr>
</tbody>
</table>
<p id="id19121621">Saying that my cousin is the 2<sup>nd</sup> Runner Up in the Miss America contest sounds so much better than saying that she was in 3<sup>rd</sup>Place. We would be talking about the same position in the array of the five finalists.</p>
<p id="id18628879">Rather than using the for loop to display the members of the array, we could have written five lines of code as follows:</p>

<pre id="idklb333301"><code>
cout &lt;&lt; ages[0] &lt;&lt; endl;
cout &lt;&lt; ages[1] &lt;&lt; endl;
cout &lt;&lt; ages[2] &lt;&lt; endl;
cout &lt;&lt; ages[3] &lt;&lt; endl;
cout &lt;&lt; ages[4] &lt;&lt; endl; </code></pre>
</section><section id="id17756728">
<h3>Using the Sizeof Operator with Arrays in C++</h3>
<div id="klbm1804" class="ui-has-child-title"><header>
<div>using the sizeof operator</div>
</header><section>
<pre id="klbm1806"><code>
int ages[] = {49,48,26,19,16};
int counter;

for (counter = 0, counter &lt; sizeof ages / sizeof ages[0], counter++)
  {
  cout &lt;&lt; ages[counter] &lt;&lt; endl;
  }</code></pre>
</section></div>
<p id="id19085535">Within the control of the for loop for the displaying of the grades, note that we calculated the number of the members in the array by using the <span>sizeof</span> operator.  The expression is:</p>
<p id="id19120801"><code>sizeof ages / sizeof ages[0]</code></p>
<p id="id19085988">When you ask for the sizeof an array identifier name the answer is how many total bytes long is the array (or in other words – how many bytes of storage does this array need to store its values).  This will depend on the data type of the array and the number of elements.  When you ask for the sizeof one of its members, it tells you how many bytes one member needs.  By dividing the total number of bytes by the size of one member, we get the answer we want: the number of members in the array.  This method allows for <strong>flexible coding</strong>.  By writing the for loop in this fashion, we can change the declaration of the array by adding or subtracting members and we don't need to change our for loop code.</p>

</section><section id="id18585011">
<h3> Demonstration Program in C++</h3>
<section id="id18523925">
<h4>Creating a Folder or Sub-Folder for Source Code Files</h4>
<p id="id17221190">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the <span>Bloodshed Dev-C++ 5 compiler/IDE</span> might be named:</p>

<ul id="id18585032">
 	<li>Demo_Programs</li>
</ul>
<p id="id19120703">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id17758870">
<h4>Download the Demo Program</h4>
<p id="id19120914">Download and store the following file(s) to your storage device in the appropriate folder(s). Following the methods of your compiler/IDE, compile and run the program(s). Study the source code file(s) in conjunction with other learning materials.</p>
<p id="id16433359">Download from Connexions: <a href="https://cnx.org/resources/b88d12c37cd45cb943fe4e87ee3ed01a41988451/Demo_Arrays.cpp">Demo_Arrays.cpp</a></p>

</section></section><section id="id17758833">
<h2>Key Terms</h2>
<dl id="fs-id5989325">
 	<dt>flexible coding</dt>
 	<dd id="fs-id4813482">Using the sizeof operator to calculate the number of members in an array.</dd>
</dl>
</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>264</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:51:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:51:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[displaying-array-members]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>66</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Practice 1</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/practice-18/</link>
		<pubDate>Sat, 16 Jun 2018 17:51:55 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=265</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div class="media-body">
<div id="content"><section id="id3563171">
<h2>Learning Objectives</h2>
<ol id="id3563188" type="1">
 	<li>Understand key terms and definitions as listed in the modules associated with this chapter.</li>
 	<li>Within C++ source code be able to define a single dimension array.</li>
 	<li>Within C++ source code be able to access array members using the index operator.</li>
 	<li>Within C++ source code be able to calculate the number of members in an array using the sizeof operator.</li>
</ol>
</section><section id="id3563219"></section><section id="id3563244">
<h2>Review Questions</h2>
<div id="fs-id48401532"><section>
<div id="fs-id48039426">
<div id="fs-id48399549">
<div>Answer the following statements as either true or false:</div>
<ol>
 	<li>The array data type is one of the standard data types in C++.</li>
 	<li>Arrays can have more than one dimension.</li>
 	<li>For loops are often used to display the members of an array.</li>
 	<li>When defining an array, it is preferable to specify how many members are in the array.</li>
 	<li>Arrays are rarely used to represent data.</li>
</ol>
</div>
</div>
<div id="fs-id43130315">
<div class="ui-toggle-wrapper">
<div>Answers:</div>
<ol>
 	<li>false</li>
 	<li>true</li>
 	<li>true</li>
 	<li>false</li>
 	<li>false</li>
</ol>
</div>
</div>
</section></div>
</section><section id="id3563256"></section><section id="id3563267">
<h2>Activities</h2>
<section id="id3563273">
<h4>Creating a Folder or Sub-Folder for Chapter 18 Files</h4>
<p id="id3563281">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id3563305">
 	<li>Chapter_18 within the folder named: Cpp_Source_Code_Files</li>
</ul>
<p id="id3563320">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id3563326">
<h4>Download the Lab File(s)</h4>
<p id="id3563333">Download and store the following file(s) to your storage device in the appropriate folder(s). You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id3563351">Download from Connexions: <a href="https://cnx.org/resources/3c9a5314f7298c17719fd96c656c7c5435952a9e/Lab_18_Narrative_Description.txt">Lab_18_Narrative_Description.txt</a></p>

</section><section id="id3563372">
<h4>Detailed Lab Instructions</h4>
<p id="id3563380">Read and follow the directions below carefully, and perform the steps in the order listed.</p>

<ul id="id3563386">
 	<li>Create a source code file following the directions in the Lab_18_Narrative_Description.txt file. Name it: Lab_18.cpp</li>
 	<li>Build (compile and run) your program.</li>
 	<li>After you have successfully written this program, if you are taking this course for college credit, follow the instructions from your professor/instructor for submitting it for grading.</li>
</ul>
</section></section><section id="id3563422">
<h3>Problems</h3>
<section id="id3563429">
<h4>Problem 18a – Instructions</h4>
<p id="id3563437">Briefly explain what an array is and list the two common operators used with arrays.</p>

</section></section></div>
</div>
</div>
<div>
<div class="media-footer"></div>
</div>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>265</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:51:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:51:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[practice-18]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>66</wp:post_parent>
		<wp:menu_order>11</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>File Input and Output</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/file-input-and-output/</link>
		<pubDate>Sat, 16 Jun 2018 17:53:13 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=270</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id3822818">
<h3>Overview of File I/O in C++</h3>
<p id="id2445766">We need to understand how to open, read, write and close text files. The following File Input/Output terms are explained:</p>
<p id="id4181517"><strong>Text File</strong> – A file consisting of characters from the ASCII character code set. Text files (also know an ASCII text files) contain character data. When we create a text file we usually think of it consisting of a series of lines. On each line are several characters (including spaces, punctuation, etc.) and we generally end the line with a return (this a character within the ASCII character code set). The return is also known as the new line character. You are most likely already familiar with the escape code of \n which is used within C++ to indicate a return character when used with in a literal string with the cout.</p>
<p id="id2883530">A typical text file consisting of lines can be created by text editors (Notepad) or word processing programs (Microsoft Word). When using a word processor you must usually specify the output file as text (.txt) when saving it. Most source code files are ASCII text files with a unique file extension; such as C++ using .cpp, Pascal using .pas, Cobol using .cob, etc. Thus, most compiler/Integrated Development Environment software packages (such as the <strong>Bloodshed Dev-C++ 5 compiler/IDE</strong>) can be used to create ASCII text files.</p>
<p id="id2162243"><strong>Filename</strong> – The name and its extension. Most operating systems have restrictions on which characters can be used in filenames. Example for MS-DOS and Windows: Lab_05.txt</p>
<p id="id2955110">Because some operating systems do not allow spaces, we suggest that you use the underscore where needed for spacing in a filename.</p>
<p id="id4132376"><strong>Filespec</strong> – The location of a file along with its filename. It is short for file specification. Most operating systems have a set of rules on how to specify the drive and directory (or path through several directory levels) along with the filename. Example for MS-DOS and Windows: C:\myfiles\cosc_1436\Lab_05.txt</p>
<p id="id4181433">Because some operating systems do not allow spaces, we suggest that you use the <strong>underscore</strong> where needed when creating folders or sub-directories.</p>
<p id="id2382810"><strong>Open</strong> – Your program requesting the operating system to let it have access to an existing file or to open a new file. Within C++ this is accomplished by including the header file: &lt;fstream&gt; File Input/Output is handled in C++ by using a pre-defined class of data objects, similar to the way string data type is handled. This class of objects has both data type names and functions built to specifically accomplish opening and closing a file.</p>
<p id="id3971192">Within your program you create a local storage variable with the data type of fstream like this:</p>
<p id="id2367702"><code>fstream inData;</code></p>
<p id="id4045306">This variable will be used to store the device token that the operating system assigns to the file being opened. Thus, opening a file uses a class member function call like this:</p>
<p id="id2233554"><code>inData.open("C:\\myfiles\\cosc_1436\\Lab_05.txt", ios::in);</code></p>
<p id="id4068600">The two parameters passed to the function are the filespec and the method that you want to use the file (in this example as input). The function provides a returning value of a <strong>device token</strong> from the operating system and it is stored in the variable named inData.</p>
<p id="id2737615">It is considered good programming practice to determine if the file was opened properly. The device token should be a non zero value. It the operating system gives you the value of zero it was not able to open the file. The reason it usually can't open a file is because the filespec is wrong (misspelled or not typed case consistent in some operating systems) or the file is not stored in the location specified. We often test the device token by using an if then control structure with the action consisting of stopping the program if it is true that you got the zero. The first line of the if then control structure looks like this:</p>
<p id="id2455620"><code>if (!inData)</code></p>
<p id="id4137368">Don’t be misled by the not operator. This reads "if it is true that the token stored in inData is zero". If inData is zero, noting zero is 1 or true.</p>
<p id="id4065654"><strong>Read</strong> – Moving data from a device that has been opened into a memory location defined in your program. When reading text files that have integer or floating-point constants, the operating systems converts the text symbols to a binary number. The operator used is the extraction or read operator. An example of reading is:</p>
<p id="id2263271"><code>inData &gt;&gt; next_number</code></p>
<p id="id2884682">This expression is similar to reading from the standard input device (aka the keyboard):</p>
<p id="id4182797"><code>cin &gt;&gt; next_number</code></p>
<p id="id4217074">The "cin" is a predefined device token associated with the Standard Input and Output devices. For our file reading example you might say, "Go to the device identified by the token stored in the inData variable and read in the next value storing it in the next_number variable within my program".</p>
<p id="id4187045"><strong>Write</strong> – Moving data from a memory location defined in your program to a device that has been opened. When writing integer or floating-point data types, the operating system converts the binary number into the proper text symbols. The operator used is the insertion or write operator. An example of writing is:</p>
<p id="id3068841"><code>outData &lt;&lt; "Total is: " &lt;&lt; total &lt;&lt; endl;</code></p>
<p id="id2381492">This expression is similar to writing to the standard output device (aka the monitor):</p>
<p id="id4191218"><code>cout &lt;&lt; "Total is: " &lt;&lt; total &lt;&lt; endl;</code></p>
<p id="id4212266">The "cout" is a predefined device token associated with the Standard Input and Output devices. For our file writing example you might say, "Go to the device identified by the token stored in the outData variable and write the items listed (the string constant then the value stored in my program variable named total then the endl or new line or the return character)".</p>
<p id="id4182756"><strong>Close</strong> – Your program requesting the operating system to release a file that was previously opened. There are two reasons to close a file. First, it releases the file and frees up the associated operation system resources. Second, if closing a file that was opened for output; it will clear the out the operating system’s buffer and insure that all of the data is physically stored in the output file. Some examples of closing files:</p>
<p id="id4214240"><code>inData.close();</code></p>
<p id="id4128776"><code>outData.close();</code></p>
<p id="id4133491">You need to study this module in conjunction with the demo file provided.</p>

</section><section id="id2977056">
<h3>Demonstration Program in C++</h3>
<section id="id4193676">
<h4>Creating a Folder or Sub-Folder for Source Code Files</h4>
<p id="id4193927">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id2246590">
 	<li>Demo_Programs</li>
</ul>
<p id="id4137780">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id4054584">
<h4>Download the Demo Program</h4>
<p id="id4188385">Download and store the following file(s) to your storage device in the appropriate folder(s). Following the methods of your compiler/IDE, compile and run the program(s). Study the source code file(s) in conjunction with other learning materials. You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id4234927">Download from Connexions: <a href="https://cnx.org/resources/7bbf9d0233d87bc18336a362b8f7701bbd019f7c/Demo_File_IO.cpp">Demo_File_IO.cpp</a></p>
<p id="id2934603">Download from Connexions: <a href="https://cnx.org/resources/e68c89f77dcad992fb415fc6e818d22429ac2bd4/Demo_File_IO_Input.txt">Demo_File_IO_Input.txt</a></p>
<p id="id3951582">After you run the program use a text editor to examine the <strong>Demo_File_IO_Output.txt</strong> file created by the program. You should see the output as: <code>Total is: 33.3</code></p>

</section></section><section id="id4134729">
<h2>Key Terms</h2>
<dl id="fs-id10529938">
 	<dt>
<dl id="fs-id10220429">
 	<dt>
<dl id="fs-id21410968">
 	<dt><section id="id4134729">
<dl id="fs-id16051581">
 	<dt>close</dt>
 	<dd id="fs-id10051363">Your program requesting the operating system to release a file that was previously opened.</dd>
</dl>
</section>device token</dt>
 	<dd id="fs-id20129834">A key value provided by the operating system to associate a device to your program.</dd>
</dl>
<dl id="fs-id13241215">
 	<dt></dt>
</dl>
filename</dt>
 	<dd id="fs-id10240450">The name and its extension.</dd>
</dl>
<dl id="fs-id22223306">
 	<dt>filespec</dt>
 	<dd id="fs-id16044284">The location of a file along with its filename.</dd>
</dl>
<dl id="fs-id16165661">
 	<dt></dt>
</dl>
<dl id="fs-id16165661">
 	<dt>open</dt>
 	<dd id="fs-id15497612">Your program requesting the operating system to let it have access to an existing file or to open a new file.</dd>
</dl>
<dl id="fs-id21410968">
 	<dt></dt>
</dl>
<dl id="fs-id13241215">
 	<dt>read</dt>
 	<dd id="fs-id15439700">Moving data from a device that has been opened into a memory location defined in your program.</dd>
</dl>
<dl id="fs-id15098542">
 	<dt></dt>
</dl>
text file</dt>
 	<dd id="fs-id16949814">A file consisting of characters from the ASCII character code set.</dd>
</dl>
<dl id="fs-id10220429"></dl>
<dl id="fs-id16165661"></dl>
<dl id="fs-id21410968"></dl>
<dl id="fs-id13241215"></dl>
<dl id="fs-id15098542">
 	<dt>write</dt>
 	<dd id="fs-id16733809">Moving data from a memory location defined in your program to a device that has been opened.</dd>
</dl>
<dl id="fs-id16051581"></dl>
</section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>270</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:53:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:53:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[file-input-and-output]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>62</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Arrays and Functions</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/arrays-and-functions/</link>
		<pubDate>Sat, 16 Jun 2018 17:53:52 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=271</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id1171291573090">
<h3>Overview of Array Functions</h3>
<p id="id1171291175135">Arrays are an important complex data type used in almost all programming. We continue to concentrate on simple one dimension arrays also called a list. Most programmers develop a series of <span>user defined specific task</span> functions that can be used with an array for normal processing. These functions are usually passed the array along with the number of elements within the array. Some of functions also pass another piece of data needed for that particular functions task.</p>
<p id="id8354688">This module covers the displaying the array members on the monitor via calling an <strong>array function</strong> dedicated to that task. You need to study this module in conjunction with the demo file provided.</p>

</section><section id="id1171297382210">
<h3>Demonstration Program in C++</h3>
<section id="id1171297667225">
<h4>Creating a Folder or Sub-Folder for Source Code Files</h4>
<p id="id1171295897352">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the <span>Bloodshed Dev-C++ 5 compiler/IDE</span> might be named:</p>

<ul id="id1171296675608">
 	<li>Demo_Programs</li>
</ul>
<p id="id6564655">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id1171291079680">
<h4>Download the Demo Program</h4>
<p id="id1171300454885">Download and store the following file(s) to your storage device in the appropriate folder(s). Following the methods of your compiler/IDE, compile and run the program(s). Study the source code file(s) in conjunction with other learning materials.</p>
<p id="id4401952">Download from Connexions: <a href="https://cnx.org/resources/81968c5811b3d65e5861c6c6a25a80c264751b2a/Demo_Array_Display_Function.cpp">Demo_Array_Display_Function.cpp</a></p>

</section></section><section id="id1171297747406">
<h2>Key Terms</h2>
<dl id="fs-id1171296826118">
 	<dt>array function</dt>
 	<dd id="fs-id3300509">A user defined specific task function designed to process an array.</dd>
</dl>
</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>271</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:53:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:53:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[arrays-and-functions]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>66</wp:post_parent>
		<wp:menu_order>8</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Loading an Array from a File</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/loading-an-array-from-a-file/</link>
		<pubDate>Sat, 16 Jun 2018 17:54:27 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=272</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id3245115">
<h3>Conceptual Overview</h3>
<p id="id4574761">Loading an array from a file presents an interesting dilemma. The problem resolves around how many elements you should plan for in the array. Let’s say 100, but what if the file has fewer or more than 100 values. How can the program handle it correctly?</p>
<p id="id4775730">The solution involves some simple steps:</p>

<ol id="id4798885" type="1">
 	<li>We can read the file once to get the element count. Thus, we will know exactly how many members (elements) we will need.</li>
 	<li>We can then create an array using <span>dynamic memory allocation</span> by defining the array within a function so that it has <span>local scope</span>. Local scope variables are created during the execution of the program and use the stack as the storage location instead of the data area. If you define the array outside of a function (<span>global scope</span> also known as <span>static memory allocation</span>) it stores it in the data area and must know how much storage space to allocate to the array when you <strong>write the source code</strong>. Since we don’t know how many elements will be on the input file when we write the source code defining an array with global scope will not work. But, we can determine exactly how many members we need for the array by having our program count them (step 1) so that we can then define the array with local scope to the precise size needed.</li>
 	<li>We can then load the array by reading the file a second time and storing the values read into the array just created.</li>
</ol>
<p id="id3755753">This method is demonstrated in the demo file provided, thus you need to study this material in conjunction with the demo program.</p>

</section><section id="id3857417">
<h3>Demonstration Program in C++</h3>
<section id="id4623555">
<h4>Creating a Folder or Sub-Folder for Source Code Files</h4>
<p id="id4789094">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the <span>Bloodshed Dev-C++ 5 compiler/IDE</span> might be named:</p>

<ul id="id5314889">
 	<li>Demo_Programs</li>
</ul>
<p id="id4736586">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id4738884">
<h4>Download the Demo Program</h4>
<p id="id4572320">Download and store the following file(s) to your storage device in the appropriate folder(s). Following the methods of your compiler/IDE, compile and run the program(s). Study the source code file(s) in conjunction with other learning materials. You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id3795669">Download from Connexions: <a href="https://cnx.org/resources/3fc8b00558841d5ab56fdf64c39424afe441fe6b/Demo_Loading_Array_from_File.cpp">Demo_Loading_Array_from_File.cpp</a></p>
<p id="id4642892">Download from Connexions: <a href="https://cnx.org/resources/c7b770a3ba4e9b22cd7f52047696d16d01bc6e3f/Demo_Farm_Acres_Input.txt">Demo_Farm_Acres_Input.txt</a></p>

</section></section><section id="id3753109">
<h2>Key Terms</h2>
<dl id="fs-id3928430">
 	<dt>dynamic memory</dt>
 	<dd id="fs-id14781440">Aka stack created memory associated with local scope.</dd>
</dl>
<dl id="fs-id12253235">
 	<dt>static memory</dt>
 	<dd id="fs-id14199196">Aka data area memory associated with global scope.</dd>
</dl>
</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>272</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:54:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:54:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[loading-an-array-from-a-file]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>62</wp:post_parent>
		<wp:menu_order>6</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Math Statistics with Arrays</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/math-statistics-with-arrays/</link>
		<pubDate>Sat, 16 Jun 2018 17:55:01 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=273</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id1168561255986">
<h3>Overview</h3>
<p id="id9031870">Arrays are an important complex data type used in almost all programming. We continue to concentrate on simple one dimension arrays also called a list. Most programmers develop a series of <span>user defined specific task</span> functions that can be used with an array for normal processing. These functions are usually passed the array along with the number of elements within the array. Some of functions also pass another piece of data needed for that particular functions task.</p>
<p id="id1168558490862">This module covers the totaling of the members of an integer array member. The Latin name for totaling is summa sometimes shortened to the word <strong>sum</strong>. The <strong>array function</strong> is often called "sum" and it does some parameter passing. It passes into the function the common two items of the array: its name along with the number of elements; but it also returns a value representing sum or total of the values within the array. You need to study this module in conjunction with the demo file provided.</p>
<p id="id1168561489686">Other mathematical functions often associated with statistics such as: average, count, minimum, maximum, standard deviation, etc. are often developed for processing arrays.</p>

</section><section id="id1168557154834">
<h3>Demonstration Program in C++</h3>
<section id="id1168561283478">
<h4>Creating a Folder or Sub-Folder for Source Code Files</h4>
<p id="id1168572607656">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the <span>Bloodshed Dev-C++ 5 compiler/IDE</span> might be named:</p>

<ul id="id1168572543025">
 	<li>Demo_Programs</li>
</ul>
<p id="id1168564967037">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id1168560295117">
<h4>Download the Demo Program</h4>
<p id="id1168563355736">Download and store the following file(s) to your storage device in the appropriate folder(s). Following the methods of your compiler/IDE, compile and run the program(s). Study the source code file(s) in conjunction with other learning materials. You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id1168558608158">Download from Connexions: <a href="https://cnx.org/resources/60cfe36eb7be9036ec5581369e33b56cc0cd5227/Demo_Sum_Array_Function.cpp">Demo_Sum_ Array_Function.cpp</a></p>
<p id="id1168561572060">Download from Connexions: <a href="https://cnx.org/resources/c7b770a3ba4e9b22cd7f52047696d16d01bc6e3f/Demo_Farm_Acres_Input.txt">Demo_Farm_Acres_Input.txt</a></p>

</section></section><section id="id1168561451067">
<h2>Key Terms</h2>
<dl id="fs-id17338391">
 	<dt>sum</dt>
 	<dd id="fs-id5118721">Latin for summa or a total.</dd>
</dl>
</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>273</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:55:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:55:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[math-statistics-with-arrays]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>66</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Practice</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/practice-19/</link>
		<pubDate>Sat, 16 Jun 2018 17:55:34 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=274</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div class="media-body">
<div id="content"><section id="id1171788869563">
<h2>Learning Objectives</h2>
<ol id="id1171784314735" type="1">
 	<li>Understand key terms and definitions as listed in the modules associated with this chapter.</li>
 	<li>Within C++ source code be able to understand basic file input and file output.</li>
 	<li>Understand why we test to see if a file was opened properly.</li>
 	<li>Understand why we close a file when we are done with it.</li>
 	<li>Within C++ source code be able to understand functions for arrays, specifically counting the number of elements in a file so you can define an array, load that array with those elements, display the array and sum the array.</li>
 	<li>Within C++ source code be able to create functions for arrays, specifically a function for averaging.</li>
</ol>
</section><section id="id1171785413342"></section><section id="id1171785458582">
<h2>Review Questions</h2>
<div id="fs-id6452474"><section>
<div id="fs-id6486222">
<div id="fs-id6486360">
<div>Answer the following statements as either true or false:</div>
<ol>
 	<li>Text files are hard to create.</li>
 	<li>A filespec refers to a very small (like a spec dust) file.</li>
 	<li>A device token is a special non zero value the operating system gives your program and is associated with the file that you requested to be opened.</li>
 	<li>Programmers should not worry about closing a file.</li>
 	<li>Where you define an item, that is global or local scope, is rarely important.</li>
</ol>
</div>
</div>
<div id="fs-id6492132">
<div class="ui-toggle-wrapper">
<div>Answers:</div>
<ol>
 	<li>false</li>
 	<li>false</li>
 	<li>true</li>
 	<li>false</li>
 	<li>false</li>
</ol>
</div>
</div>
</section></div>
</section><section id="id1171784305560"></section><section id="id1171785393653">
<h2>Activities</h2>
<section id="id1171785410220">
<h4>Creating a Folder or Sub-Folder for Chapter 19 Files</h4>
<p id="id1171785464529">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id1171785472497">
 	<li>Chapter_19 within the folder named: Cpp_Source_Code_Files</li>
</ul>
<p id="id1171788435665">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id1171785473749">
<h4>Download the Lab File(s)</h4>
<p id="id1171785394963">Download and store the following file(s) to your storage device in the appropriate folder(s). You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id1171785406446">Download from Connexions: <a href="https://cnx.org/resources/4dbd091f42c3334ef1a193ba4bd722bdbb37091e/Lab_19_Narrative_Description.txt">Lab_19_Narrative_Description.txt</a></p>

</section><section id="id1171789577548">
<h4>Detailed Lab Instructions</h4>
<p id="id1171785403892">Read and follow the directions below carefully, and perform the steps in the order listed.</p>

<ul id="id1171785376450">
 	<li>Create a source code file following the directions in the Lab_19_Narrative_Description.txt file. Name it: Lab_19.cpp</li>
 	<li>Build (compile and run) your program.</li>
 	<li>After you have successfully written this program, if you are taking this course for college credit, follow the instructions from your professor/instructor for submitting it for grading.</li>
</ul>
</section></section><section id="id1171785395153">
<h3>Problems</h3>
<section id="id1171784340457">
<h4>Problem 19a – Instructions</h4>
<p id="id1171787216128">For what purpose do we use the sizeof operator with an array.</p>

</section><section id="id1171787091621">
<h4>Problem 19b – Instructions</h4>
<p id="id1171787253289">Why would we open a file and count its elements and then close the file.</p>

</section></section></div>
</div>
</div>
<div>
<div class="media-footer"></div>
</div>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>274</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 17:55:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 17:55:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[practice-19]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>62</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Finding a Specific Member of an Array</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/finding-a-specific-member-of-an-array/</link>
		<pubDate>Sat, 16 Jun 2018 18:08:37 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=283</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div class="media-body">
<div id="content"><section id="id11587594">
<h3>Overview</h3>
<p id="id4088348">Finding a specific member of an array means searching the array until the member is found. It's possible that the member does not exist and the programmer must handle that possibility within the logic of his algorithm. Two specific searches can be made for the maximum (largest) values in the array or the minimum (smallest) value in the array. Maximum and minimum are also know as max and min.</p>
<p id="id6630962">There are two basic ways of searching for a specific value:</p>

<ol id="id11063327" type="1">
 	<li>Linear search</li>
 	<li>Binary search</li>
</ol>
<p id="id5177914">"The linear search is a very simple algorithm. Sometimes called a sequential search, it uses a loop to sequentially step through an array, starting with the first element. It compares each element with the value being search for, and stops when either the value is found or the end of the array is encountered. If the value being searched for is not in the array, the algorithm will search to the end of the array."<sup id="footnote-ref1"><a href="https://cnx.org/contents/MDgA8wfz@22.2:7oHVCZng@2/Finding-a-Specific-Member-of-a#footnote1">1</a></sup></p>
<p id="id3427876">Binary search is not cover in this module. Linear search and searching for the maximum is demonstrated in the demo file provided, thus you need to study this material in conjunction with the demo program.</p>

</section><section id="id3866308">
<h3>Demonstration Program in C++</h3>
<section id="id5177892">
<h4>Creating a Folder or Sub-Folder for Source Code Files</h4>
<p id="id6870585">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the <span>Bloodshed Dev-C++ 5 compiler/IDE</span> might be named:</p>

<ul id="id4839387">
 	<li>Demo_Programs</li>
</ul>
<p id="id4352134">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id10451672">
<h4>Download the Demo Program</h4>
<p id="id14997766">Download and store the following file(s) to your storage device in the appropriate folder(s). Following the methods of your compiler/IDE, compile and run the program(s). Study the source code file(s) in conjunction with other learning materials. You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id15521456">Download from Connexions: <a href="https://cnx.org/resources/5ff2152e96d868f2bc7b9cc30b5b1d55e7ba4f7b/Demo_Finding_Array_Member.cpp">Demo_Finding Array Member.cpp</a></p>
<p id="id3175613">Download from Connexions: <a href="https://cnx.org/resources/c7b770a3ba4e9b22cd7f52047696d16d01bc6e3f/Demo_Farm_Acres_Input.txt">Demo_Farm_Acres_Input.txt</a></p>

</section></section><section id="id12975895">
<h2>Key Terms</h2>
<dl id="fs-id19283538">
 	<dt>linear search</dt>
 	<dd id="fs-id16906035">Using a loop to sequentially step through an array.</dd>
</dl>
<dl id="fs-id19092987">
 	<dt>maximum</dt>
 	<dd id="fs-id18111312">Aka max or the largest member of an array.</dd>
</dl>
<dl id="fs-id17171178">
 	<dt>minimum</dt>
 	<dd id="fs-id17186889">Aka min or the smallest member of an array.</dd>
</dl>
</section>
<div>
<h3>Footnotes</h3>
<ul>
 	<li id="footnote1"><a href="https://cnx.org/contents/MDgA8wfz@22.2:7oHVCZng@2/Finding-a-Specific-Member-of-a#footnote-ref1">1</a> <span>Tony Gaddis, Judy Walters and Godfrey Muganda, <u>Starting Out with C++ Early Objects Sixth Edition</u> (United States of America: Pearson – Addison Wesley, 2008) 559.</span></li>
</ul>
</div>
</div>
</div>
</div>
<div>
<div class="media-footer"></div>
</div>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>283</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:08:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:08:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[finding-a-specific-member-of-an-array]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>66</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sorting an Array</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/sorting-an-array/</link>
		<pubDate>Sat, 16 Jun 2018 18:09:12 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=284</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id1172064313138">
<h3>Overview</h3>
<p id="id1172065491011">Sorting is the process through which data are arranged according to their values. There are several sorting algorithms or methods that can be used to sort data. Some include:</p>

<ol id="id1172063471784" type="1">
 	<li>Bubble</li>
 	<li>Selection</li>
 	<li>Insertion</li>
</ol>
<p id="id1172064274240">We will not be covering the selection or insertion sort methods in this module.</p>
<p id="id1172064206839">"The bubble sort is an easy way to arrange data in ascending or descending order. If an array is sorted in ascending order, it means the values in the array are stored from lowest to highest. If values are sorted in descending order, they are stored from highest to lowest. Bubble sort works by comparing each element with its neighbor and swapping them it they are not in the desired order."<sup id="footnote-ref1"><a href="https://cnx.org/contents/MDgA8wfz@22.2:7f-cfM54@2/Sorting-an-Array#footnote1">1</a></sup></p>
<p id="id1172067560720">There are several different methods of bubble sorting and some methods are more efficient than others. Most use a pair of nested loops or iteration control structures. One method sets a flag that indicates that the array is sorted, then does a pass and if any elements are exchanged (switched); it sets the flag to indicate that the array is not sorted. It is executed until it makes a pass and nothing is exchanged.</p>

<figure id="id1172064167597"><span id="id1172064167597_media"><img id="id1172064167597__onlineimage" src="https://cnx.org/resources/4c3a9a4144bc525efb675fff614225baa8417541/graphics1.jpg" alt="" width="600" height="450" /></span></figure>
<p id="id1172062228054">The bubble sort gets its name from the lighter bubbles that move or "bubble up" to the top of a glass of soda pop. We move the smaller elements of the array to the top as the larger elements move to the bottom of the array. This can be viewed from a different perspective. Using an Italian salad dressing with oil, water and herbs; once shaken you can either:</p>

<ol id="id1172061135285" type="1">
 	<li>envision the lighter oil rising to the top; <strong>OR</strong></li>
 	<li>envision the heaver water and herbs sinking to the bottom</li>
</ol>
<p id="id1172064488585">Either way is correct and this version of the code simply demonstrates the sinking to the bottom the heaver or larger elements of the array.</p>
<p id="id1172063509412">Bubble sorting is demonstrated in the demo file provided, thus you need to study this material in conjunction with the demo program.</p>

</section><section id="id1172065308202">
<h3>Demonstration Program in C++</h3>
<section id="id1172063470927">
<h4>Creating a Folder or Sub-Folder for Source Code Files</h4>
<p id="id1172064231450">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id1172063468229">
 	<li>Demo_Programs</li>
</ul>
<p id="id1172064640140">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id1172060188800">
<h4>Download the Demo Program</h4>
<p id="id1172064274026">Download and store the following file(s) to your storage device in the appropriate folder(s). Following the methods of your compiler/IDE, compile and run the program(s). Study the source code file(s) in conjunction with other learning materials. You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id1172060950506">Download from Connexions: <a href="https://cnx.org/resources/1294737d7a7cd323ccd4fc419d74d3c812db2e4a/Demo_Sort_Array_Function.cpp">Demo_Sort_Array_Function.cpp</a></p>
<p id="id1172063067366">Download from Connexions: <a href="https://cnx.org/resources/c7b770a3ba4e9b22cd7f52047696d16d01bc6e3f/Demo_Farm_Acres_Input.txt">Demo_Farm_Acres_Input.txt</a></p>

</section></section><section id="id1172064462180">
<h2>Key Terms</h2>
<dl id="fs-id18805877">
 	<dt><section id="id1172064462180">
<dl id="fs-id12243732">
 	<dt>bubble sort</dt>
 	<dd id="fs-id16588850">A method of swapping array members until they are in the desired sequence.</dd>
</dl>
</section>sorting</dt>
 	<dd id="fs-id16747534">Arranging data according to their values.</dd>
</dl>
<dl id="fs-id12243732"></dl>
</section>
<div>
<h3>Footnotes</h3>
<ul>
 	<li id="footnote1"><a href="https://cnx.org/contents/MDgA8wfz@22.2:7f-cfM54@2/Sorting-an-Array#footnote-ref1">1</a> Tony Gaddis, Judy Walters and Godfrey Muganda, <u>Starting Out with C++ Early Objects Sixth Edition</u> (United States of America: Pearson – Addison Wesley, 2008) 569.</li>
</ul>
</div>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>284</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:09:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:09:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[sorting-an-array]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>66</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Practice 2</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/practice-20/</link>
		<pubDate>Sat, 16 Jun 2018 18:09:42 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=285</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div class="media-body">
<div id="content"><section id="id1172062647459">
<h2>Learning Objectives</h2>
<ol id="id1172053527940" type="1">
 	<li>Understand key terms and definitions as listed in the modules associated with this chapter.</li>
 	<li>Within C++ source code be able to understand functions for arrays, specifically searching a array's values to see if a given value exists, finding the maximum value in an array and sorting an array.</li>
 	<li>Within C++ source code be able to create functions for arrays, specifically a function for finding the smallest value in an array.</li>
 	<li>Within C++ source code be able to modifying existing code to process different types of arrays.</li>
</ol>
</section><section id="id1172063643806"></section><section id="id1172049141449">
<h2>Review Questions</h2>
<div id="fs-id23134869"><section>
<div id="fs-id22691407">
<div id="fs-id23218604">
<div>Answer the following statements as either true or false:</div>
<ol>
 	<li>Linear searches require complex algorithms.</li>
 	<li>Functions are often created for searching for the max and min values in an array.</li>
 	<li>The bubble sort is an easy way to arrange data an array.</li>
 	<li>There is only one method of bubble sorting.</li>
 	<li>Sorting an array is frequently done.</li>
</ol>
</div>
</div>
<div id="fs-id17404277">
<div class="ui-toggle-wrapper">
<div>Answers:</div>
<ol>
 	<li>false</li>
 	<li>true</li>
 	<li>true</li>
 	<li>false</li>
 	<li>true</li>
</ol>
</div>
</div>
</section></div>
</section><section id="id1172056156960"></section><section id="id1172049122409">
<h2>Activities</h2>
<section id="id1172054850427">
<h4>Creating a Folder or Sub-Folder for Chapter 20 Files</h4>
<p id="id1172051907005">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id1172049102093">
 	<li>Chapter_20 within the folder named: Cpp_Source_Code_Files</li>
</ul>
<p id="id1172054645562">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id1172053595642">
<h4>Download the Lab File(s)</h4>
<p id="id1172052705905">Download and store the following file(s) to your storage device in the appropriate folder(s). You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id1172062908783">Download from Connexions: <a href="https://cnx.org/resources/f6f696b2553b4be882a8721f82bc7c3be8c4dcf8/Lab_20_Narrative_Description.txt">Lab_20_Narrative_Description.txt</a></p>

</section><section id="id1172049137215">
<h4>Detailed Lab Instructions</h4>
<p id="id1172053818252">Read and follow the directions below carefully, and perform the steps in the order listed.</p>

<ul id="id1172049225116">
 	<li>Create a source code file following the directions in the Lab_20_Narrative_Description.txt file. Name it: Lab_20.cpp</li>
 	<li>Build (compile and run) your program.</li>
 	<li>After you have successfully written this program, if you are taking this course for college credit, follow the instructions from your professor/instructor for submitting it for grading.</li>
</ul>
</section></section><section id="id1172050580283">
<h3>Problems</h3>
<section id="id1172051825029">
<h4>Problem 20a – Instructions</h4>
<p id="id1172055062155">Give a short explanation of bubble sorting.</p>

</section></section></div>
</div>
</div>
<div>
<div class="media-footer"></div>
</div>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>285</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:09:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:09:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[practice-20]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>66</wp:post_parent>
		<wp:menu_order>12</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Versatile Code with Typedef</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/versatile-code-with-typedef/</link>
		<pubDate>Sat, 16 Jun 2018 18:10:40 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=289</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id8460403">
<h3>Overview</h3>
<p id="id17431907">Everyone seeks of ways to be more efficient in what they do. A farmer uses a tractor instead of a horse. A construction worker uses an air powered nail gun instead of a hammer. Programmers are no different than others, in that they are constantly improving their ability to produce correctly working programs. Some aspect of this is the use of modular/structured programming, proper documentation and following industry rules for a specific programming language. One example of efficient coding is letting the computer count the number of elements in an array. If we define an array:</p>
<p id="id17177204"><code>int ages[] = {33,32,10,3};</code></p>
<p id="id4734692">We can use the following expression to calculate the number of members in the array:</p>
<p id="id16905983"><code>sizeof ages / sizeof ages[0]</code></p>
<p id="id17415234">This type of <strong>flexible coding</strong> allows us to change the members of the array by adding or subtracting a values, like this:</p>
<p id="id19248822"><code>int ages[] = {57,33,32,3,1};</code></p>
<p id="id10037940">Thus, we don't have to modify our code that uses the expression that calculates the number of member in the array.</p>
<p id="id7060599">One use of the <strong>typedef</strong> is to allow us to write code that can be quickly changed to handle different data types. There are several integer and floating-point data types that all store number values with different domains. If we write our code using some typedef statement, then our code becomes <strong>versatile</strong>. By changing only our typedef commands, our code can be used to process data of a different data type. This is demonstrated within the demo file provided, thus you need to study this material in conjunction with the demo program.</p>

</section><section id="id5213348">
<h3>Demonstration Program in C++</h3>
<section id="id17102975">
<h4>Creating a Folder or Sub-Folder for Source Code Files</h4>
<p id="id5207641">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id5412360">
 	<li>Demo_Programs</li>
</ul>
<p id="id16904525">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id17978998">
<h4>Download the Demo Program</h4>
<p id="id19151299">Download and store the following file(s) to your storage device in the appropriate folder(s). Following the methods of your compiler/IDE, compile and run the program(s). Study the source code file(s) in conjunction with other learning materials. You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id17182931">Download from Connexions: <a href="https://cnx.org/resources/159631f61421a777824271840a7e9c195519f377/Demo_Versatile_Array_Functions.cpp">Demo_Versatile_Array_Functions.cpp</a></p>
<p id="id16854260">Download from Connexions: <a href="https://cnx.org/resources/c7b770a3ba4e9b22cd7f52047696d16d01bc6e3f/Demo_Farm_Acres_Input.txt">Demo_Farm_Acres_Input.txt</a></p>
<p id="id8459606">Download from Connexions: <a href="https://cnx.org/resources/be48bb5f785c722d2d90120c29860c5bb24d17c6/Demo_Deposit_Checks_Input.txt">Demo_Deposit_Checks_Input.txt</a></p>

</section></section><section id="id19280932">
<h2>Key Terms</h2>
<dl id="fs-id1166531160879"></dl>
<dl id="fs-id1166542642667">
 	<dt>flexible coding</dt>
 	<dd id="fs-id1166529504252">Using the sizeof operator to calculate the number of members in an array.</dd>
</dl>
<dl id="fs-id1166536284397">
 	<dt>typedef</dt>
 	<dd id="fs-id1166529775625">Allows the programmer to create an alias, or synonym, for an existing data type.</dd>
</dl>
<dl id="fs-id1166531160879">
 	<dt>versatile</dt>
 	<dd id="fs-id1166529661770">Easily modifying code to handle another data type.</dd>
</dl>
</section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>289</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:10:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:10:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[versatile-code-with-typedef]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>72</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Practice</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/practice-21/</link>
		<pubDate>Sat, 16 Jun 2018 18:11:16 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=290</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id6157081">
<h2>Learning Objectives</h2>
<ol id="id5895875" type="1">
 	<li>Understand key terms and definitions as listed in the modules associated with this chapter.</li>
 	<li>Understand how typedef is used within C++ source code be able make the code versatile that is easy to change for different data types.</li>
</ol>
</section><section id="id9048070"></section><section id="id8217264">
<h2>Review Questions</h2>
<div id="fs-id1168555786545"><section>
<div id="fs-id1168557268304">
<div id="fs-id8062429">
<div>Answer the following statements as either true or false:</div>
<ol>
 	<li>Most programmers rarely worry about efficiency.</li>
 	<li>Modular/structured programming helps improve efficiency.</li>
 	<li>Flexible coding helps improve efficiency.</li>
 	<li>Who cares about indentation and alignment within source code. It’s a waste of time.</li>
 	<li>Versatile code is a concept that is easy to understand.</li>
</ol>
</div>
</div>
<div id="fs-id1168563488549">
<div class="ui-toggle-wrapper">
<div>Answers:</div>
<ol>
 	<li>false – Efficiency of code execution, no; efficiency of code production and maintenance, yes.</li>
 	<li>true</li>
 	<li>true</li>
 	<li>false</li>
 	<li>maybe true and maybe false – It does require some effort to catch on to how it works.</li>
</ol>
</div>
</div>
</section></div>
</section><section id="id7941920"></section><section id="id8178276">
<h2>Activities</h2>
<section id="id8178282">
<h4>Creating a Folder or Sub-Folder for Chapter 18 Files</h4>
<p id="id8204757">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id5900247">
 	<li>Chapter_21 within the folder named: Cpp_Source_Code_Files</li>
</ul>
<p id="id9009846">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id3782010">
<h4>Download the Lab File(s)</h4>
<p id="id3782016">Download and store the following file(s) to your storage device in the appropriate folder(s). You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id8313152">Download from Connexions: <a href="https://cnx.org/resources/9b2b1f0b4dcdf5833b53e478524669bd21120a2c/Lab_21_Narrative_Description.txt">Lab_21_Narrative_Description.txt</a></p>
<p id="id8271762">Download from Connexions: <a href="https://cnx.org/resources/448fbb57e5fadf12f0bcb58d5f44b42c2efb0367/Lab_21_Input.txt">Lab_21_Input.txt</a></p>

</section><section id="id3479610">
<h4>Detailed Lab Instructions</h4>
<p id="id3479618">Read and follow the directions below carefully, and perform the steps in the order listed.</p>

<ul id="id5896738">
 	<li>Create a source code file following the directions in the Lab_21_Narrative_Description.txt file. Name it: Lab_21.cpp</li>
 	<li>Build (compile and run) your program.</li>
 	<li>After you have successfully written this program, if you are taking this course for college credit, follow the instructions from your professor/instructor for submitting it for grading.</li>
</ul>
</section></section><section id="id8272722">
<h3>Problems</h3>
<section id="id8272728">
<h4>Problem 21a – Instructions</h4>
<p id="id9010414">Explain the difference between flexible coding and versatile coding.</p>

</section></section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>290</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:11:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:11:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[practice-21]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>72</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Address Operator</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/address-operator/</link>
		<pubDate>Sat, 16 Jun 2018 18:12:38 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=293</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id7604417">
<h3>Address Operator in C++</h3>
<p id="id1164771601515">"Every variable is assigned a memory location whose address can be retrieved using the address operator &amp;. The address of a memory location is called a pointer. Every variable in an executing program is allocated a section of memory large enough to hold a value of that variable’s type."<sup id="footnote-ref1"><a href="https://cnx.org/contents/MDgA8wfz@22.2:jW0NTyCY@3/Address-Operator#footnote1">1</a></sup> Thus, whether the variables are <span>global scope</span> and use the data area for storage or <span>local scope</span>and use the stack for storage; you can ask the question at what address in the memory does this variable exist. Given an integer variable named age:</p>
<p id="id6453801"><code>int age = 47;</code></p>
<p id="id8557453">We can use the <strong>address operator</strong> [which is the <span>ampersand</span> or &amp;] to determine where it exists (or its address) in the memory by:</p>
<p id="id1164782722717"><code>&amp;age</code></p>
<p id="id1164771379886">This expression is a <strong>pointer</strong> data type. The concept of an address and a pointer are one in the same. A pointer points to the location in memory because the value of a pointer is the address were the data item resides in the memory.</p>
<p id="id7148748">The address operator is commonly used in two ways:</p>

<ol id="id6406627" type="1">
 	<li>To do parameter passing by reference</li>
 	<li>To establish the value of pointers</li>
</ol>
<p id="id5354398">Both of these items are covered in the supplemental links to this module.</p>
<p id="id1164782468148">You can print out the value of the address with the following code:</p>
<p id="id3259201"><code>cout &lt;&lt; &amp;age;</code></p>
<p id="id7761870">This will by default print the value in hexadecimal. Some people prefer an integer value and to print it as an integer you will need to cast the address into a long data type:</p>
<p id="id1164782786490"><code>cout &lt;&lt; long(&amp;age);</code></p>
<p id="id7594059">One additional tidbit, an array’s name is by definition a pointer to the arrays first element. Thus:</p>
<p id="id1164780055320"><code>int iqs[] = {122, 105, 131, 97};</code></p>
<p id="id7679153">establishes "iqs" as a pointer to the array.</p>

</section><section id="fs-id15743268">
<h2>Key Terms</h2>
<dl id="fs-id15734591">
 	<dt>address operator</dt>
 	<dd id="fs-id15512437">The ampersand or &amp;.</dd>
</dl>
<dl id="fs-id14752614">
 	<dt>pointer</dt>
 	<dd id="fs-id7304057">A variable that holds an address as its value.</dd>
</dl>
</section>
<div>
<h3>Footnotes</h3>
<ul>
 	<li id="footnote1"><a href="https://cnx.org/contents/MDgA8wfz@22.2:jW0NTyCY@3/Address-Operator#footnote-ref1">1</a> <span>Tony Gaddis, Judy Walters and Godfrey Muganda, <u>Starting Out with C++ Early Objects Sixth Edition</u> (United States of America: Pearson – Addison Wesley, 2008) 597.</span></li>
</ul>
</div>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>293</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:12:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:12:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[address-operator]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>74</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Parameter Passing by Reference</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/parameter-passing-by-reference/</link>
		<pubDate>Sat, 16 Jun 2018 18:13:13 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=294</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id8171618">
<h3>Overview</h3>
<p id="id1169816862596">When we pass parameters to functions we usually pass by value; that is the calling function provides several values to the called function as needed. The called function takes these values which have <span>local scope</span> and stores them on the stack using them as needed for whatever processing the functions accomplishes. This is the preferred method when calling user defined specific task functions. The called function passes back a single value as the return item if needed. This has the advantage of a <span>closed communications model</span> with everything being neatly passed in as values and any needed item returned back as a parameter.</p>
<p id="id1169817152725">By necessity there are two exceptions to this closed communications model:</p>

<ol id="id8199720" type="1">
 	<li>When we need more than one item of information returned by the function</li>
 	<li>When a copy of an argument cannot reasonably or correctly be made (example: file stream objects).</li>
</ol>
<p id="id1169817230336">These exceptions are handled by parameter passing by reference instead of passing a value. The item passed is called a <strong>reference variable</strong> and it represents a concept of an alias for the variable. Any change made to the reference variable is actually performed on the variable that it represents. The symbol of the ampersand is used to designate the reference variable (and it is associated with the address operator).</p>

<div id="fs-id1169818488108" class="ui-has-child-title"><header>
<div>parameter passing by reference</div>
</header><section>
<pre id="fs-id5381987"><code>
// prototype
void process_values(int qty_dimes, int qty_quarters, double &amp;value_dimes, double &amp;value_quarters);

// variable definitions
int     dimes = 45;
int     quarters = 33;
double  value_dimes;
double  value_quarters;

// somewhere in the function main
process_values(dimes, quarters, value_dimes, value_quarters);

// definition of the function
void process_values(int qty_dimes, int qty_quarters, double &amp;value_dimes, double &amp;value_quarters);
  {
  value_dimes = dimes * 0.10;
  value_quarters = quarters * 0.25;
  }    </code></pre>
</section></div>
<div id="id1169817196333"><section>The ampersand must appear in both the prototype and the function definition but it does not appear in the function call.</section></div>
<p id="id8170704">The above example shows the basic mechanics of parameter passing by reference. You should study the demonstration program in conjunction with this module.</p>

</section><section id="id1169816497045">
<h3>Demonstration Program in C++</h3>
<section id="id1169818763627">
<h4>Creating a Folder or Sub-Folder for Source Code Files</h4>
<p id="id8032655">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the <span>Bloodshed Dev-C++ 5 compiler/IDE</span> might be named:</p>

<ul id="id1169821646400">
 	<li>Demo_Programs</li>
</ul>
<p id="id8889479">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id1169816062144">
<h4>Download the Demo Program</h4>
<p id="id1169816496202">Download and store the following file(s) to your storage device in the appropriate folder(s). Following the methods of your compiler/IDE, compile and run the program(s). Study the source code file(s) in conjunction with other learning materials. You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id1169817151046">Download from Connexions: <a href="https://cnx.org/resources/64fef09aca945c31ef05acadd693108efb2c46c1/Demo_Parameter_Passing.cpp">Demo_Parameter_Passing.cpp</a></p>

</section></section><section id="id1169816766798">
<h2>Key Terms</h2>
<dl id="fs-id1169816253357">
 	<dt>reference variable</dt>
 	<dd id="fs-id3160588">Used with parameter passing by reference.</dd>
</dl>
</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>294</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:13:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:13:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[parameter-passing-by-reference]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>74</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Pointer Data Type</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/pointer-data-type/</link>
		<pubDate>Sat, 16 Jun 2018 18:13:46 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=295</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id1914128">
<h3>Pointer Data Type in C++</h3>
<p id="id7982241">A <strong>pointer</strong> variable is a variable that holds the address of a memory location. "Every variable is assigned a memory location whose address can be retrieved using the address operator &amp;. The address of a memory location is called a pointer."<sup id="footnote-ref1"><a href="https://cnx.org/contents/MDgA8wfz@22.2:vkfKQwIG@3/Pointer-Data-Type#footnote1">1</a></sup> The <strong>pointer data type</strong> allows us to designate a variable to hold an address or a pointer. The concept of an address and a pointer are one in the same. A pointer points to the location in memory because the value of a pointer is the address were the data item resides in the memory. Given an integer variable named age:</p>
<p id="id6267902"><code>int age = 47;</code></p>
<p id="id836609">We can create a pointer variable and establish its value which would be the done using the <span>address operator</span> [which is the <span>ampersand</span> or &amp;] by:</p>
<p id="id6372086"><code>int * int_pointer = &amp;age;</code></p>
<p id="id6248897">The <span>asterisk</span> is used to designate that the variable int_pointer is an integer pointer [int *]. This means that whenever we use the variable int_pointer that the compiler will know that it is a pointer that points to an integer.</p>
<p id="id5466772">In order to use pointers you will need to understand the <span>indirection operator</span> which is covered a supplemental link.</p>

</section><section id="id6960935">
<h2>Key Terms</h2>
<dl id="fs-id1171161757541">
 	<dt>pointer</dt>
 	<dd id="fs-id1171157803994">A variable that holds an address as its value.</dd>
</dl>
</section>
<div>
<h3>Footnotes</h3>
<ul>
 	<li id="footnote1"><a href="https://cnx.org/contents/MDgA8wfz@22.2:vkfKQwIG@3/Pointer-Data-Type#footnote-ref1">1</a> <span>Tony Gaddis, Judy Walters and Godfrey Muganda, <u>Starting Out with C++ Early Objects Sixth Edition</u> (United States of America: Pearson – Addison Wesley, 2008) 597.</span></li>
</ul>
</div>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>295</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:13:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:13:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[pointer-data-type]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>74</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Indirection Operator</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/indirection-operator/</link>
		<pubDate>Sat, 16 Jun 2018 18:14:20 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=296</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id1169676373079">
<h3>Indirection Operator in C++</h3>
<p id="id1169682727791">When we pass parameters to functions we usually pass by value; that is the calling function provides several values to the called function as needed. The called function takes these values which have local scope and stores them on the stack using them as needed for whatever processing the functions accomplishes. This is the preferred method when calling user defined specific task functions. The called function passes back a single value as the return item if needed. This has the advantage of a closed communications model with everything being neatly passed in as values and any needed item returned back as a parameter.</p>
<p id="id4747432">By necessity there are two exceptions to this closed communications model:</p>

<ol id="id1169687812541" type="1">
 	<li>When we need more than one item of information returned by the function</li>
 	<li>When a copy of an argument cannot reasonably or correctly be made (example: file stream objects).</li>
</ol>
<p id="id2886441">These exceptions could be handled by parameter passing by reference instead of passing a value. Although different syntax than parameter passing when using a reference variable; using a pointer variable and the <strong>indirection operator</strong> can accomplish the same effect. The indirection operator is the asterisk or the character that we also use for multiplication. The concept of indirection is also known as <strong>dereferencing</strong>, meaning that we are not interested in the pointer but want the item to which the address is referring or referencing.</p>

<div id="fs-id4188029" class="ui-has-child-title"><header>
<div>parameter passing with pointers</div>
</header><section>
<pre id="fs-id3397274"><code>
// prototype
void process_values(int qty_dimes, int qty_quarters, double * ptr_value_dimes, double * ptr_value_quarters);

// variable definitions
int      dimes = 45;
int      quarters = 33;
double   value_dimes;
double   value_quarters;
double * ptr_value_dimes = &amp;value_dimes;
double * ptr_value_quarters = &amp;value_quarters;

// somewhere in the function main
process_values(dimes, quarters, ptr_value_dimes, ptr_value_quarters);

// definition of the function
void process_values(int qty_dimes, int qty_quarters, double * ptr_value_dimes, double * ptr_quarters);
  {
  * ptr_value_dimes = dimes * 0.10;
  * ptr_value_quarters = quarters * 0.25;
  }    </code></pre>
</section></div>
<div id="id1169687589989"><section>The asterisk and must appear in both the prototype and the function definition when defining the pointer variables but it does not appear in the function call when the pointers are passed into the function.</section></div>
<p id="id1169685723652">The above example shows the basic mechanics of the indirection operator.</p>
<p id="id1169679847646">The use of pointers with indirection is often preferred for processing arrays. The <strong>array index operator</strong> is also known as the <strong>array method of dereferencing</strong>. The following couts are equivalent:</p>
<p id="id1169685772604"><code>int ages[] = {47, 45, 18, 11, 9};</code></p>
<p id="id1169683495364"><code>cout &lt;&lt; ages[3];</code></p>
<p id="id1169683587223"><code>cout &lt;&lt; *(ages + 3);</code></p>
<p id="id1169681891121">The both say, "The name of an array is a pointer; take the pointer and calculate a new address that points to the 3<sup>rd</sup> offset by adding the correct number of bytes onto the pointer (integer data type is normally 4 bytes long – 3 offsets times 4 bytes is 12 bytes); then dereference that pointer (since this is an Rvalue context – fetch me the value that you are pointing at) and send it to the standard output device."</p>
<p id="id4086303">You should study the demonstration programs in conjunction with this module.</p>

</section><section id="id2375768">
<h3>Demonstration Program in C++</h3>
<section id="id6135251">
<h4>Creating a Folder or Sub-Folder for Source Code Files</h4>
<p id="id1169690296092">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id1169685758343">
 	<li>Demo_Programs</li>
</ul>
<p id="id1169689418567">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id1169680511807">
<h4>Download the Demo Program</h4>
<p id="id1169682551146">Download and store the following file(s) to your storage device in the appropriate folder(s). Following the methods of your compiler/IDE, compile and run the program(s). Study the source code file(s) in conjunction with other learning materials. You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id8414346">Download from Connexions: <a href="https://cnx.org/resources/f2bc5815c74605c2c911f4923af5cae809554077/Demo_Pointer_Passing.cpp">Demo_Pointer_Passing.cpp</a></p>
<p id="id1169685040127">Download from Connexions: <a href="https://cnx.org/resources/e94b9f2c7aa2d989046013e46635686869d26f68/Demo_Array_Pointer_Processing.cpp">Demo_Array_ Pointer_Processing.cpp</a></p>

</section></section><section id="id1169689180443">
<h2>Key Terms</h2>
<dl id="fs-id4940828">
 	<dt><section id="id1169689180443">
<dl id="fs-id2668832">
 	<dt>dereferencing</dt>
 	<dd id="fs-id5465878">The concept of using the item to which a pointer or address is pointing at.</dd>
</dl>
</section>indirection operator</dt>
 	<dd id="fs-id2333289">The asterisk used for dereferencing a pointer.</dd>
</dl>
<dl id="fs-id2668832"></dl>
</section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>296</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:14:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:14:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[indirection-operator]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>74</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Practice</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/practice-22/</link>
		<pubDate>Sat, 16 Jun 2018 18:14:58 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=297</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id4762007">
<h2>Learning Objectives</h2>
<ol id="id4879784" type="1">
 	<li>Understand key terms and definitions as listed in the modules associated with this chapter.</li>
 	<li>Acquire a general understanding of the pointer data type, the address and indirection operators, the concept of dereferencing.</li>
 	<li>Given pseudocode, write the C++ code for a program that uses reference variables.</li>
</ol>
</section><section id="id6485007"></section><section id="id6579566">
<h2>Review Questions</h2>
<div id="fs-id1164779322617"><section>
<div id="fs-id8852670">
<div id="fs-id1164771241958">
<div>Answer the following statements as either true or false:</div>
<ol>
 	<li>The address operator is the @ symbol.</li>
 	<li>Passing by reference should be used when there is only one item to be modified.</li>
 	<li>Variables of pointer data type are defined using an asterisk.</li>
 	<li>Using pointers with the indirection operator can be used instead of passing variables by reference.</li>
 	<li>There are two kinds of dereferencing – one with the indirection operator and the other with the index operator.</li>
</ol>
</div>
</div>
<div id="fs-id1164779367664">
<div class="ui-toggle-wrapper">
<div>Answers:</div>
<ol>
 	<li>false</li>
 	<li>false</li>
 	<li>true</li>
 	<li>true</li>
 	<li>true</li>
</ol>
</div>
</div>
</section></div>
</section><section id="id4778822"></section><section id="id5527082">
<h2>Activities</h2>
<section id="id3265938">
<h4>Creating a Folder or Sub-Folder for Chapter 22 Files</h4>
<p id="id5303469">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id5693449">
 	<li>Chapter_22 within the folder named: Cpp_Source_Code_Files</li>
</ul>
<p id="id3268962">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id4762815">
<h4>Download the Lab File(s)</h4>
<p id="id4894864">Download and store the following file(s) to your storage device in the appropriate folder(s). You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id4506877">Download from Connexions: <a href="https://cnx.org/resources/89618c91694a1517e1e8f6731a846964e7c97ed1/Lab_22_Pseudocode.txt">Lab_22_Pseudocode.txt</a></p>

</section><section id="id3681312">
<h4>Detailed Lab Instructions</h4>
<p id="id1957715">Read and follow the directions below carefully, and perform the steps in the order listed.</p>

<ul id="id6341616">
 	<li>Create a source code file from the Lab_22_Pseudocode.txt file. Name it: Lab_22.cpp</li>
 	<li>Build (compile and run) your program.</li>
 	<li>After you have successfully written this program, if you are taking this course for college credit, follow the instructions from your professor/instructor for submitting it for grading.</li>
</ul>
</section></section><section id="id4751789">
<h3>Problems</h3>
<section id="id2039261">
<h4>Problem 22a – Instructions</h4>
<p id="id3958139">Give a general explanation of the pointer data type and the use of addresses and dereferencing. Include both the indirection operator and the index operator in your discussion.</p>

</section></section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>297</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:14:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:14:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[practice-22]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>74</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Multidimensional Arrays</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/multidimensional-arrays/</link>
		<pubDate>Sat, 16 Jun 2018 18:15:54 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=303</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id1165582962343">
<h3>Overview</h3>
<p id="id1165578313393">An array is a sequenced collection of elements of the same data type with a single identifier name. As such, the array data type belongs to the "Complex" category or family of data types. Arrays can have multiple axes (more than one axis). Each axis is a <strong>dimension</strong>. Thus a single dimension array is also known as a <strong>list</strong>. A two dimension array is commonly known as a <strong>table</strong> (a spreadsheet like Excel is a two dimension array). In real life there are occasions to have data organized into multiple dimensioned arrays. Consider a theater ticket with section, row and seat (three dimensions).</p>
<p id="id1165578934853">We refer to the individual values as members (or elements) of the array. Programming languages implement the details of arrays differently. Because there is only one identifier name assigned to the array, we have operators that allow us to reference or access the individual members of an array.</p>
<p id="id1165578208744">The operator commonly associated with referencing an <strong>array member</strong> is the <strong>index</strong> operator. It is important to learn how to define an array and initialize its members. The index operator is a set of square brackets with an integer value between the brackets that represents the <strong>offset</strong> from the front of the array.</p>
<p id="id1165580224766">Multidimensional arrays use one set of square brackets per dimension or axis of the array. For example a table which has two dimensions would use two sets of square brackets to define the array variable and two sets of square brackets for the index operators to access the members of the array.</p>
<p id="id1165578935525">Because of the complexity for multidimensional arrays, the demonstration program shows a two dimension array and you should study it in conjunction with this module.</p>

</section><section id="id4610767">
<h3>Demonstration Program in C++</h3>
<section id="id1165578918277">
<h4>Creating a Folder or Sub-Folder for Source Code Files</h4>
<p id="id2052392">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id1165579036534">
 	<li>Demo_Programs</li>
</ul>
<p id="id1165579079586">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id1165579257502">
<h4>Download the Demo Program</h4>
<p id="id1165577973598">Download and store the following file(s) to your storage device in the appropriate folder(s). Following the methods of your compiler/IDE, compile and run the program(s). Study the source code file(s) in conjunction with other learning materials. You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id8874256">Download from Connexions: <a href="https://cnx.org/resources/6e679f8a1040728423e2e19554699f40ea23506f/Demo_Multidimension_Arrays.cpp">Demo_Multidimension_Arrays.cpp</a></p>

</section></section><section id="id1165579350180">
<h2>Key Terms</h2>
<dl id="fs-id1166227443725">
 	<dt>
<dl id="fs-id3519136">
 	<dt>array member</dt>
 	<dd id="fs-id1166221164687">An element or value in an array.</dd>
</dl>
<dl id="fs-id1166220529687">
 	<dt></dt>
</dl>
dimension</dt>
 	<dd id="fs-id1166223862623">An axis of an array.</dd>
</dl>
<dl id="fs-id1166226397517">
 	<dt>
<dl id="fs-id1166220529687">
 	<dt>index</dt>
 	<dd id="fs-id1166225163781">An operator that allows us to reference a member of an array.</dd>
</dl>
<dl id="fs-id1166224065267">
 	<dt></dt>
</dl>
list</dt>
 	<dd id="fs-id1166221586207">A single dimension array.</dd>
</dl>
<dl id="fs-id5579170">
 	<dt><section id="id1165579350180">
<dl id="fs-id1166224065267">
 	<dt>offset</dt>
 	<dd id="fs-id1166225462038">The method of referencing array members by starting at zero.</dd>
</dl>
</section>table</dt>
 	<dd id="fs-id1166221198234">A two dimension array.</dd>
</dl>
<dl id="fs-id3519136"></dl>
<dl id="fs-id1166220529687"></dl>
<dl id="fs-id1166224065267"></dl>
</section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>303</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:15:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:15:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[multidimensional-arrays]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>66</wp:post_parent>
		<wp:menu_order>10</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Conditional Compilation</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/conditional-compilation/</link>
		<pubDate>Sat, 16 Jun 2018 18:16:26 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=304</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id1169995116359">
<h3>Overview</h3>
<p id="id1169995116366">As you proceed in your programming career, the problems/tasks that need solving become more complex. The documentation of the algorithm done in pseudo code (or some other method) will still need to be converted into a programming solution. Inevitably, when writing that source code mistakes will be introduced. When learning the syntax of a new programming language, programmers sometimes automatically think in their old language syntax, and make mistakes that are sometimes hard to detect.</p>
<p id="id1169995116384">The concept of using a flag to either activate or have remain dormant certain lines of code designed solely to help with the debugging of a program has existed since almost the beginning of modern computer programming (1950's). One of the debugging tools available within C++ is <strong>conditional compilation</strong>. For our flag, we would use a defined constant like:</p>
<p id="id1169995116408"><code>#define DEBUG 1</code></p>
<p id="id1169995116416">Then using another compiler directive pair, the #if and #endif, we can have the compiler during the pre-processor either include or not include one or more lines of code.</p>

<pre id="fs-id5868286"><code>
#if DEBUG
  cout &lt;&lt; "\n***** DEBUG Code ** Hi mom!";
#endif</code></pre>
<p id="id1169995116451">Of course saying "Hi mom!" is not very useful for debugging your code. However, you can use test data with conditional compilation. A series of input data values and a series of output predictors can be placed in the program. Then you can turn on the debug feature or turn them off with your debugging flag.</p>
<p id="id1169995116467">You should study the demonstration program in conjunction with this module.</p>

</section><section id="id1169995116472">
<h3>Demonstration Program in C++</h3>
<section id="id1169995116479">
<h4>Creating a Folder or Sub-Folder for Source Code Files</h4>
<p id="id1169995116485">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the <span>Bloodshed Dev-C++ 5 compiler/IDE</span> might be named:</p>

<ul id="id1169995116508">
 	<li>Demo_Programs</li>
</ul>
<p id="id1169995116517">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id1169995116523">
<h4>Download the Demo Program</h4>
<p id="id1169995116530">Download and store the following file(s) to your storage device in the appropriate folder(s). Following the methods of your compiler/IDE, compile and run the program(s). Study the source code file(s) in conjunction with other learning materials. You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id1169995116549">Download from Connexions: <a href="https://cnx.org/resources/c66aba50622ad6dd55ee8b07e2d305415dd0a3b7/Demo_Conditional_Compilation.cpp">Demo_Conditional_Compliation.cpp</a></p>

</section></section><section id="id1169995116570">
<h2>Key Terms</h2>
<dl id="fs-id5933833">
 	<dt>conditional compilation</dt>
 	<dd id="fs-id5933838">A compiler directive that includes or excludes lines of code based on a Boolean expression.</dd>
</dl>
</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>304</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:16:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:16:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[conditional-compilation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>76</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Practice</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/practice-23/</link>
		<pubDate>Sat, 16 Jun 2018 18:17:00 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=305</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div class="media-body">
<div id="content"><section id="id1166219855509">
<h2>Learning Objectives</h2>
<ol id="id1166220981178" type="1">
 	<li>Understand key terms and definitions as listed in the modules associated with this chapter.</li>
 	<li>Have an exposure to multidimensional arrays.</li>
 	<li>Understand conditional compilation as a testing technique.</li>
 	<li>When supplied with test data, add conditional compilation lines to an existing C++ source code.</li>
</ol>
</section><section id="id1166220705867"></section><section id="id1166222190258">
<h2>Review Questions</h2>
<div id="fs-id7549314"><section>
<div id="fs-id8398213">
<div id="fs-id1169994336051">
<div>Answer the following statements as either true or false:</div>
<ol>
 	<li>Very few arrays need more than one axis.</li>
 	<li>Multidimensional arrays use multiple square brackets, one set per axis.</li>
 	<li>Using a flag to activate debugging lines of code has been around since the 1950s.</li>
 	<li>Within C++ we can use the conditional compilation compiler directives to implement debugging line of code.</li>
</ol>
</div>
</div>
<div id="fs-id2113938">
<div class="ui-toggle-wrapper">
<div>Answers:</div>
<ol>
 	<li>false</li>
 	<li>true</li>
 	<li>true</li>
 	<li>true</li>
</ol>
</div>
</div>
</section></div>
</section><section id="id1166223531469"></section><section id="id1166222556782">
<h2>Activities</h2>
<section id="id1166217436448">
<h4>Creating a Folder or Sub-Folder for Chapter 23 Files</h4>
<p id="id2439596">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id8489109">
 	<li>Chapter_23 within the folder named: Cpp_Source_Code_Files</li>
</ul>
<p id="id1166220712470">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id5585998">
<h4>Download the Lab File(s)</h4>
<p id="id1166225343652">Download and store the following file(s) to your storage device in the appropriate folder(s). You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id1166221152296">Download from Connexions: <a href="https://cnx.org/resources/91e71c5f5252a93a45c48affb9aceb6aa79098ff/Lab_23a.cpp">Lab_23a.cpp</a></p>

</section><section id="id1166221736150">
<h4>Detailed Lab Instructions</h4>
<p id="id1166220745487">Read and follow the directions below carefully, and perform the steps in the order listed.</p>

<ul id="id1501230">
 	<li>Compile and run the Lab_23a.cpp source code file. Understand how it works.</li>
 	<li>Copy the source code file Lab_23a.cpp naming it: Lab_23b.cpp</li>
 	<li>Add conditional compilation statements similar to the demonstration program used in the Conditional Compilation Connexions module. Specifically use: 157 pennies, 92 nickels, 23 dimes and 31 quarters as your test data.</li>
 	<li>Build (compile and run) your program.</li>
 	<li>After you have successfully written this program, if you are taking this course for college credit, follow the instructions from your professor/instructor for submitting it for grading.</li>
</ul>
</section></section><section id="id1166221356656">
<h3>Problems</h3>
<section id="id1166221148978">
<h4>Problem 23a – Instructions</h4>
<p id="id1166228796019">Give three examples in the real world where data might be structured into a multidimensional array. One example (and you can’t count it) is a theatre ticket which might have a section, row and seat number on it.</p>

</section></section></div>
</div>
</div>
<div>
<div class="media-footer"></div>
</div>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>305</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:17:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:17:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[practice-23]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>76</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Object Oriented Programming</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/object-oriented-programming/</link>
		<pubDate>Sat, 16 Jun 2018 18:17:53 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=309</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id1166222111742">
<h3>Discussion</h3>
<p id="id1166222300042">"In procedural programming, the programmer constructs procedures (or functions, as they are called in C++). The procedures are collections of programming statements that perform a specific task. The procedures each contain their own variables and commonly share variables with other procedures. Procedural programming is centered on the procedure or function."<sup id="footnote-ref1"><a href="https://cnx.org/contents/MDgA8wfz@22.2:CnkyHsd-@3/Object-Oriented-Programming#footnote1">1</a></sup> For decades (1950s to through the 1980s) most programming was taught as <strong>procedural programming</strong>. Coupled with the imposition of using standardized control structures in the late 1960s, we have what is typically called modular structured programming.</p>
<p id="id1166226235682">Another, equally valid approach to programming is <strong>object-oriented programming</strong> or OOP. It was introduced in the mid 1980s and was widely accepted as a programming approach by the early 1990s. The first languages to introduce OOP to the masses were C++ and Java. Shortly after their introduction, there were American National Standards Institute (ANSI) standards established for those languages. Today, C++ and Java are widely used.</p>
<p id="id1166221387845">"The primary differences between the two approaches is their use of data. In a procedural program, the design centers around the rules or procedures for processing the data. The procedures, implemented as functions in C++, are the focus of the design. The data objects are passed to the functions as parameters. The key question is how the functions will transform the data they receive for either storage or further processing. Procedural programming has been the mainstay of computer science since its beginning and is still heavily used today.</p>
<p id="id1166224037546">In an object-oriented program, abbreviated OOP, the design centers around objects that contain (encapsulate) the data and the necessary functions to process the data. In OOP, the objects own the functions that process the data."<sup id="footnote-ref2"><a href="https://cnx.org/contents/MDgA8wfz@22.2:CnkyHsd-@3/Object-Oriented-Programming#footnote2">2</a></sup></p>
<p id="id1166221764380">"Object-oriented programming … is centered on the object. An object is a programming element that contains data and the procedures that operate on the data. The objects contain, within themselves, both the information and the ability to manipulate the information."<sup id="footnote-ref3"><a href="https://cnx.org/contents/MDgA8wfz@22.2:CnkyHsd-@3/Object-Oriented-Programming#footnote3">3</a></sup></p>
<p id="id1166225398083">To help complicate the picture, the C++ programming language can be used (and is used) to write either a procedural program (modular structured program) or an object-oriented program. Some items used by those writing procedural programs in C++ are in fact objects. Examples include:</p>

<ol id="id3180644" type="1">
 	<li>Standard input and output items of: cout and cin; example: cout.setf(ios::fixed)</li>
 	<li>Strings; calculating the length with: identifier_name.length()</li>
 	<li>File input/output; example: inData.open(filespec, ios::in)</li>
</ol>
<p id="id1166222184372">Objects are implemented with a "class" data type; which is a complex or derived data type. Implementation details will not be presented in the module.</p>

</section><section id="id8710347">
<h3>Transition</h3>
<p id="id1166222698461">Many students will learn modular structured programming before learning object-oriented programming. The common way of teaching programming fundamentals is to cover them or divide them into three courses, usually covered in this order:</p>

<ol id="id1166221652077" type="1">
 	<li>Modular structured</li>
 	<li>Object-oriented</li>
 	<li>Data structures</li>
</ol>
<p id="id1166222537328">The following items learned in modular structured programming flow into the learning of object-oriented programming:</p>

<ol id="id1166221795259" type="1">
 	<li>The standard and complex data types are the same</li>
 	<li>The operators are the same, thus data manipulation is the same</li>
 	<li>The control structures are the same</li>
 	<li>Concepts of documentation and making code readable are the same</li>
 	<li>The use of test data to verify logical thinking and program results is similar</li>
</ol>
</section><section id="id1166222151582">
<h2>Key Terms</h2>
<dl id="fs-id1166220708459">
 	<dt><section id="id1166222151582">
<dl id="fs-id1166220979499">
 	<dt>object oriented</dt>
 	<dd id="fs-id1166225339179">A programming approach that encapsulates data with functions.</dd>
</dl>
</section>procedural programming</dt>
 	<dd id="fs-id1166222490948">Aka modular structured programming.</dd>
</dl>
<dl id="fs-id1166220979499"></dl>
</section>
<div>
<h3>Footnotes</h3>
<ul>
 	<li id="footnote1"><a href="https://cnx.org/contents/MDgA8wfz@22.2:CnkyHsd-@3/Object-Oriented-Programming#footnote-ref1">1</a> Tony Gaddis, Judy Walters and Godfrey Muganda, <u>Starting Out with C++ Early Objects Sixth Edition</u> (United States of America: Pearson – Addison Wesley, 2008) 22.</li>
 	<li id="footnote2"><a href="https://cnx.org/contents/MDgA8wfz@22.2:CnkyHsd-@3/Object-Oriented-Programming#footnote-ref2">2</a> Behrouz A. Forouzan and Richard F. Gilberg, <u>Computer Science A Structured Approach using C++ Second Edition</u> (United States of America: Thompson – Brooks/Cole, 2004) 156.</li>
 	<li id="footnote3"><a href="https://cnx.org/contents/MDgA8wfz@22.2:CnkyHsd-@3/Object-Oriented-Programming#footnote-ref3">3</a> Tony Gaddis, Judy Walters and Godfrey Muganda, <u>Starting Out with C++ Early Objects Sixth Edition</u> (United States of America: Pearson – Addison Wesley, 2008) 22.</li>
</ul>
</div>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>309</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:17:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:17:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[object-oriented-programming]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>78</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Understanding High Performance Computing</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/understanding-high-performance-computing/</link>
		<pubDate>Sat, 16 Jun 2018 18:18:42 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=310</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="fs-id4546693">
<h3>Preface – November 13, 2009</h3>
<p id="fs-id1167631071873">This module was created as an entry for the <strong>2008-'09 Open Education Cup: High Performance Computing</strong> competition. The competition was supervised by Dr. Jan Erik Odegard, Executive Director of the Ken Kennedy Institute for Information Technology at Rice University. It was submitted to the "Parallel Algorithms and Applications" category and specifically designed as an introduction to the subject targeting intermediate grade school students to collegiate undergraduates who have little knowledge of High Performance Computing (HPC).</p>
<p id="eip-880">This module received the <strong>"Best Module"</strong> award for the "Parallel Algorithms and Applications" category which included a US $500 prize.</p>
<p id="fs-id5995313">Those who reviewed the entries for the competition made some suggestions for improvement and most have been incorporated into this revised edition of the module. As always; my thanks to them and all others who make suggestions for improving educational materials.</p>
<p id="fs-id1167636936551">Kenneth Leroy Busbee</p>

</section><section id="id16110117">
<h3>Introduction to High Performance Computing</h3>
<p id="id12899188">Grouping multiple computers or multiple computer processors to accomplish a task quicker is referred to as <strong>High Performance Computing</strong> (HPC).  We want to explain how this is accomplished using parallel programming algorithms or concepts.</p>

<section id="id17832484">
<h4>The Shift from a Single Processor to Parallel</h4>
<p id="id12286929">We are going to start our explanation by giving two simple examples.</p>

<div id="fs-id19692204"><section>
<p id="id16907548">After eating all you can, you toss your chicken leg bone out of the car window (shame on you for trashing up the highway), but in short order an ant finds your tossed chicken bone. One single ant could bite off the left over on the bone and transport it to the colony, one bite at a time; but, it might take him 1 whole day (24 hours) of work. But, what if he gets help? He signals some buddies and being a small colony of ants they allocate a total of 10 ants to do the task. Ten times the workers take one tenth the time. The ten ants do the task in 2 hours and 24 minutes.</p>
<p id="id13635003">I toss another bone out the window. An ant finds it and the colony allocates 50 ants to do the task of picking the bone clean. In less than 30 minutes (28.8 to be exact) the 50 ants working in parallel complete the task.</p>

</section></div>
<div id="fs-id21407698"><section>
<p id="id17832150">One painter might take 8 hours to paint the exterior of an average sized house. But, if he can put a crew of 10 painters working simultaneously (or in other words in parallel) it takes only 48 munities. What about a crew of 50 painters assuming that they can do work and not get in the way of each other; well how about less than 10 minutes (9.6 to be exact).</p>

</section></div>
<p id="id8688192">Now let's make sure we understand that the same amount of work was done in the examples given. The work was only completed in a shorter amount of time because we put more workers on the task. Not all tasks can be divided up in this way, but when it can be divided between multiple workers, we can take advantage of the workers doing their sub part of the task in parallel. Let’s look at another example.</p>

<div id="fs-id23527218"><section>
<p id="id6741993">I want to drive from Houston, Texas to Dallas, Texas; a distance of about 250 miles. For easy calculations let's say I can travel 50 miles in one hour. It would take me 5 hours. Well, I could divide the task between 5 cars and have each car travel 50 miles and arrive in Dallas in 1 hour. Right?</p>

</section></div>
<p id="id17716077">Well, wrong. The task of driving from Houston to Dallas cannot be divided into tasks that can be done in parallel. The task can only be done by one person driving in a line from Houston to Dallas in 5 hours. I used the word "line" because it helps connect us to the word: <strong>linear</strong>. A linear task cannot be broken-up into smaller tasks to be done in parallel by multiple workers. Within the computer world, the word associated with linear concept is <strong>sequential processing</strong>. I must drive one mile at a time in sequence to get to Dallas.</p>
<p id="id16610442">Our natural tendency is to share the work that is to work in parallel whenever it is possible. As a group we can accomplish many tasks that can be done in parallel in less time.</p>

</section><section id="id17004903">
<h4>The Birth of Computers – A "Parallel" to Central Processing Unit (CPU) Story</h4>
<p id="id17715278"><q>ENIAC, short for Electronic Numerical Integrator And Computer, was the first general-purpose electronic computer (July 1946). It was the first Turing-complete, digital computer capable of being reprogrammed to solve a full range of computing problems. ENIAC had twenty ten-digit signed accumulators which used ten's complement representation and could perform 5,000 simple addition or subtraction operations between any of them and a source (e.g., another accumulator, or a constant transmitter) every second. It was possible to connect several accumulators to run simultaneously, so the peak speed of operation was potentially much higher due to parallel operation.</q> (ENIAC from Wikipedia)</p>
<p id="id17401179">Often not understood by many today, the first computer used base 10 arithmetic in the electronics and was a <strong>parallel processing</strong>machine by using several accumulators to improve the speed. However, this did not last for long. During its construction:</p>
<p id="id17771050"><q>The First Draft of a Report (commonly shortened to First Draft) on the EDVAC – Electronic Discrete Variable Automatic Computer was an incomplete 101 page document written by John von Neumann and distributed on June 30, 1945 by Herman Goldstine, security officer on the classified ENIAC project. It contains the first published description of the logical design of a computer using the stored-program concept, which has come to be known as the von Neumann architecture.</q> (First Draft of a Report on the EDVAC from Wikipedia)</p>
<p id="id18052433"><q>The von Neumann architecture is a design model for a stored-program digital computer that uses a [central] processing [unit] and a single separate storage structure to hold both instructions and data. It is named after the mathematician and early computer scientist John von Neumann. Such computers implement a universal Turing machine and have a sequential architecture.</q> (Von Neumann architecture from Wikipedia)</p>
<p id="id16664869">Von Neumann also proposed using a binary (base 2) numbering system for the electronics. One of the characteristics of the von Neumann architecture was the trade off of multiple processors using base 10 electronics to a single central processor using base 2 (or digital) electronics. To compare to our ant example, the idea was to use one real fast ant versus 10 slow ants. If one real fast ant can do 1,000 tasks in an hour; it would be more powerful (be able to do more tasks) than 10 ants doing 10 tasks an hour or the equivalent of 100 tasks per hour.</p>
<p id="id17995224">The rest is history – most commercially built computers for about the first forty years (1951 to 1991) followed the von Neumann architecture. The electronic engineers keep building more reliable and faster electronics. From vacuum tube, to transistor, to integrated circuit to what we call today "chip" technology. This transformation made computers break down less frequently (they were more reliable), physically smaller, needing less electric power and faster. Personal computers were introduced in the late 1970's and within ten years became more commonly available and used.</p>
<p id="id5642295">One short coming was that most programming efforts were towards improving the linear (or sequential) way of thinking or solving a problem. After all, the computer electronic engineers would be making a faster computer next year. Everyone understood that the computer had only one <strong>central processing unit</strong> (CPU). Right?</p>

</section><section id="id17716375">
<h4>The Need for Power</h4>
<p id="id17716380">Well, wrong. Computer scientists and electronic engineers had been <strong>experimenting</strong> with multi-processor computers with parallel programming since 1946. But it's not until the 1980's that we see the first parallel processing computers (built by Cray and other computer companies) being sold as commercial built computers. It's time for another example.</p>

<div id="fs-id23796220"><section>
<p id="id17716037">The circus traveling by train from one city to the next has an elephant that dies. They decide to toss the elephant off the train (shame on them for trashing up the country side), but in short order a "super" ant (faster than most regular ants) finds the elephant. This project is much larger than your tossed chicken bone. One single "super" ant could do the task (bite off a piece of the elephant and transport it to the colony, one bite at a time); but, it might take one whole year. After all this requires a lot more work than a chicken bone. But, what if he gets help? He signals some buddies and being a large colony of "super" ants they allocate a total of 2,190 ants to do the task. Wow, they devour the elephant in six hours.</p>

</section></div>
<p id="id13124720">This elephant example is exactly where the computer scientists had arrived. The electronic engineers were going to continue to make improvements in the speed of a single central processing unit computer, but not soon enough to satisfy the "need for power" to be able to solve tasks requiring <strong>immense computing power</strong>. Some of the new tasks that would require immense computer power included the human genome project, searching for oil and gas by creating 3 dimensional images of geological formations and the study of gravitational forces in the universe; just to mention a few. The solution: parallel processing to the rescue. Basically the only way to get this immense computer power was to implement parallel processing techniques. During the late 1970's and early 1980's scientists saw the need to explore the parallel processing paradigm more fully and thus the birth of High Performance Computing. Various national and international conferences started during the 1980's to be able to further the cause of High Performance Computing. For example in November of 2008 the "SC08" supercomputing conference celebrated their 20<sup>th</sup>anniversary.</p>
<p id="id18052395">The predicting of the weather is a good example for the need of High Performance Computing. Using the fastest central processing unit computer it might take a year to predict tomorrow's weather. The information would be correct but 365 days late. Using parallel processing techniques and a powerful "high performance computer", we might be able to predict tomorrow’s weather in 6 hours. Not only correct, but in time to be useful.</p>

</section><section id="fs-id1172054684066">
<h4>Measuring Computer Power</h4>
<p id="fs-id1172046850527">Most people are familiar with the giga hertz (billions of instructions per second) measure to describe how fast a single CPU's processor is running. Most microcomputers of today are running around 3 GHz or 3 billion instructions a second. Although 3 billion sounds fast, many of these instructions are simple operations.</p>
<p id="fs-id1172050374584">Supercomputing uses a measurement involving floating point arithmetic calculations as the benchmark for comparing computer power. "In computing, <strong>FLOPS</strong> (or <strong>flops</strong> or <strong>flop</strong>/<strong>s</strong>) is an acronym meaning <strong>FL</strong>oating point <strong>O</strong>perations <strong>P</strong>er <strong>S</strong>econd." and again "On May 25, 2008, an American military supercomputer built by IBM, named 'Roadrunner', reached the computing milestone of one petaflop by processing more than 1.026 quadrillion calculations per second." (FLOPS from Wikipedia) For those of us not familiar:</p>

<div id="fs-id1172046872932" class="ui-has-child-title"><header>
<div>Getting a Sense of Power</div>
</header><section>
<pre id="fs-id1172054675918"><code>
3 billion or 3 GHz is:                  3,000,000,000
1 quadrillion or 1 pedaflop is: 1,000,000,000,000,000 
</code></pre>
</section></div>
<p id="fs-id1172050688745">You also should realize that your personal computer is not doing 3 gigafolp worth of calculations, but something slower when using the FLOPS measurement.</p>

</section><section id="id18052420">
<h4>High Performance Computing Made Personal</h4>
<p id="id12879585">It took several years (about 30) to get computers to a personal level (1951 to 1981). It took about twenty years (late 1980’s to present 2009) to get multi-processor computers to the personal level. Currently available to the general public are computers with "duo core" and "quad core" processors. In the near future, micro computers will have 8 to 16 core processors. People ask, "Why would I need that much computer power?" There are dozens of applications, but I can think of a least one item that almost everyone wants: high quality voice recognition. That's right! I want to talk to my computer. Toss your mouse, toss your keyboard, no more touch pad – talk to it.</p>
<p id="id17960550">Again, one short coming is that most programming efforts have been towards teaching and learning the sequential processing way of thinking or solving a problem. Educators will now need to teach and programmers will now need to develop skills in programming using parallel concepts and algorithms.</p>

</section><section id="id17960560">
<h4>Summary</h4>
<p id="id17960566">We have bounced you back and forth between sequential and parallel concepts. We covered our natural tendency to do work in parallel. But with the birth of computers the parallel concepts were set to the side and the computer industry implemented a faster single processor approach (sequential). We explained the limitations of sequential processing and the need for computing power. Thus, the birth of High Performance Computing. Parallel processing computers are migrating into our homes. With that migration, there is a great need to educate the existing generation and develop the next generation of scientists and programmers to be able to take advantage of High Performance Computing.</p>

</section></section><section id="id16678745">
<h3>Learner Appropriate Activities</h3>
<p id="id12644573">High Performance Computing is impacting how we do everything. Learning, working, even our relaxation and entertainment are impacted by HPC. To help more people understand HPC, I have listed appropriate activities based on where a learner is in relation to their programming skills.</p>

<section id="id12644590">
<h4>Computer Literacy but No Programming Skills</h4>
<p id="id12644595">We have provided two computer programs that help students see the impact of parallel processing. The first is a "Linear to Parallel Calculator" where the student enters how long it would take one person to complete a task, asks how many people will work as a group on the task, then calculates how long it will take the group to complete the task. The second is a "Parallel Speed Demonstration Program" that simulates parallel processing. It displays to the monitor the first 60 factorial numbers in 60 seconds, then shows as if 10 processors are doing it in 6 seconds, then as if 100 processors are doing it in less than 1 second. Both are compiled and ready for use on an Intel CPU machine (compiled for use on Windows OS).</p>
<p id="id16190497">Download the executable file from Connexions: <a href="https://cnx.org/resources/3c1d7af455140e9814956640778460432a94afa6/Demo_Linear_to_Parallel.exe">Linear to Parallel Calculator</a></p>
<p id="id16190504">Download the executable file from Connexions: <a href="https://cnx.org/resources/0c4db5c483ebf0aad8776c34850e2d3da976f461/Demo_Parallel_Speed.exe">Parallel Speed Demonstration Program</a></p>
<p id="fs-id4994930">An interesting activity would be to join a group that is using thousands of personal microcomputers via Internet connections for parallel processing. Several distributed processing projects are listed in the "FLOPS" article on Widipedia. One such group is the "Great Internet Mersenne Prime Search - GIMPS".</p>
<p id="fs-id10316832">A link to the GIMPS web site is: <a href="http://www.mersenne.org/" target="_window" rel="nofollow">http://www.mersenne.org/</a></p>
<p id="id13917680">Another activity is to "Google" some keywords. Be careful - "Googling" can be confusing and often can be difficult to focus on the precise subject that you want.</p>

<ul id="id13917686">
 	<li>high performance computing</li>
 	<li>computational science</li>
 	<li>supercomputing</li>
 	<li>distributed processing</li>
</ul>
</section><section id="id14721086">
<h4>Learning Programming Fundamentals</h4>
<p id="id14721091">Students learning to program that are currently taking courses in Modular/Structured programming and/or Object Oriented programming might want to review the source code files for the demonstration programs listed above. These programs do not do parallel programming, but the student could modify or improve them to better explain parallel programming concepts.</p>
<p id="id14721105">You may need to right click on the link and select "Save Target As" in order to download these source code files.</p>
<p id="id14721115">Download the source code file from Connexions: <a href="https://cnx.org/resources/1e0b27f2c2209bccdbe466332b1011250e3e8cf8/Demo_Linear_to_Parallel.cpp">Linear to Parallel Calculator</a></p>
<p id="id12854732">Download the source code file from Connexions: <a href="https://cnx.org/resources/95ffbbc204a20ce3c703b215762d99b82bcd9f0c/Demo_Parallel_Speed.cpp">Parallel Speed Demonstration Program</a></p>
<p id="id12854739">Another appropriate activity is to "Google" some of the key words listed above. With your fundamental understanding of programming, you will understand more of the materials than those with no programming experience. You should get a sense that parallel programming is becoming a more important part of a computer professional’s work and career.</p>
<p id="id12854758">Review the "Top 500 Super Computers" at: <a href="http://www.top500.org/" target="_window" rel="nofollow">http://www.top500.org/</a></p>
<p id="id12767168">Look at the source code listings provided in the next section, but remember, you cannot compile or run these on your normal computer.</p>

</section><section id="id12767178">
<h4>Upper Division Under-Graduate College Students</h4>
<p id="id12767183">The challenge is to try parallel computing, not just talk about it.</p>
<p id="id12767190">During the week of May 21st to May 26th in 2006, this author attended a workshop on Parallel and Distributed Computing.  The workshop was given by the National Computational Science Institute and introduced <strong>parallel programming</strong> using multiple computers (a group of micro computers grouped or clustered into a super-micro computer).  The conference emphasized several important points related to the computer industry:</p>

<ol id="id12374034" type="1">
 	<li>During the past few years super-micro computers have become more powerful and more available.</li>
 	<li>Desk top computers are starting to be built with multiple processors (or cores) and we will have multiple (10 to 30) core processors within a few years.</li>
 	<li>Use of super-micro computing power is wide spread and growing in all areas: scientific research, engineering applications, 3D animation for computer games and education, etc.</li>
 	<li>There is a shortage of educators, scientific researchers, and computer professionals that know how to manage and utilize this developing resource. Computer professionals needed include: Technicians that know how to create and maintain a super-micro computer; and <strong>Programmers that know how to create computer applications that use parallel programming concepts</strong>.</li>
</ol>
<p id="id16184183">This last item was emphasized to those of you beginning a career in computer programming that as you progress in your education, you should be aware of the changing nature of computer programming as a profession.  Within a few years <strong>all professional programmers will have to be familiar with parallel programming</strong>.</p>
<p id="id16705304">During the conference this author wrote a program that sorts an array of 150,000 integers using two different approaches.  The first way was without parallel processing.  When it was compiled and executed using a single machine, it took 120.324 seconds to run (2 minutes).  The second way was to redesign the program so parts of it could be run on several processors at the same time.  When it was compiled and executed using 11 machines within a cluster of micro-computers, it took 20.974 seconds to run.  That’s approximately 6 times faster.  Thus, <strong>parallel programming will become a necessity to be able to utilize the multi-processor hardware of the near future.</strong></p>
<p id="id16705335">A distributed computing environment was set up in a normal computer lab using a Linix operating system stored on a CD. After booting several computers with the CD, the computers can communicate with each other with the support of "Message Passing Interface" or MPI commands. This model known as the Bootable Cluster CD (BCCD) is available from:</p>
<p id="id16705343">Bootable Cluster CD – University of Northern Iowa at: <a href="http://www.bccd.net/" target="_window" rel="nofollow">http://www.bccd.net/</a></p>
<p id="id16705348">The source code files used during the above workshop were modified to a version 8, thus an 8 is in the filename. The non-parallel processing "super" code was named: nonps8.cpp with the parallel processing "super" code named: ps8.cpp (Note: The parallel processing code contains some comments that describe that part of the code being run by a machine identified as the "SERVER_NODE"  with a part of the code being run by the 10 other machines (the Clients).  The client machines communicate critical information to the server node using "Message Passing Interface" or MPI commands.)</p>
<p id="id12364735">You may need to right click on the link and select "Save Target As" in order to download these source code files.</p>
<p id="id12364744">Download the source code file from Connexions: <a href="https://cnx.org/resources/6400a5c9a458fbf22675d6bd49690672b6a8d0a9/nonps8.cpp">nonps8.cpp</a></p>
<p id="id12364751">Download the source code file from Connexions: <a href="https://cnx.org/resources/af51a2aead617ba7c5f7c9cedfdc1aa9fca2a084/ps8.cpp">ps8.cpp</a></p>
<p id="id12364758">Two notable resources with super computer information were provided by presenters during the workshop:</p>
<p id="id12364763">Oklahoma University – Supercomputing Center for Education &amp; Research at: <a href="http://www.oscer.ou.edu/education.php" target="_window" rel="nofollow">http://www.oscer.ou.edu/education.php</a></p>
<p id="id12364773">Contra Costa College – High Performance Computing at: <a href="http://contracosta.edu/hpc/resources/presentations/" target="_window" rel="nofollow">http://contracosta.edu/hpc/resources/presentations/</a></p>
<p id="id12364778">You can also "Google" the topic's key words and spend several days reading and experimenting with High Performance Computing.</p>
<p id="id12364786">Consider reviewing the "Educator Resources" links provided in the next section.</p>

</section></section><section id="id6420572">
<h3>Educator Resources</h3>
<p id="id6420578">There are many sites that provide materials and assistance to those teaching the many aspects of High Performance Computing. A few of them are:</p>
<p id="id6420585">Shodor – A National Resource for Computational Science Education at: <a href="http://www.shodor.org/home/" target="_window" rel="nofollow">http://www.shodor.org/home/</a></p>
<p id="id6420591">CSERD – Computational Science Education Reference Desk at: <a href="http://www.shodor.org/refdesk/" target="_window" rel="nofollow">http://www.shodor.org/refdesk/</a></p>
<p id="id6420599">National Computational Science Institute at: <a href="http://www.computationalscience.org/" target="_window" rel="nofollow">http://www.computationalscience.org/</a></p>
<p id="id6420602">Association of Computing Machinery at: <a href="http://www.acm.org/" target="_window" rel="nofollow">http://www.acm.org/</a></p>
<p id="id6420606">Super Computing – Education at: <a href="http://sc09.sc-education.org/about/index.php" target="_window" rel="nofollow">http://sc09.sc-education.org/about/index.php</a></p>

</section><section id="id1785uhpc">
<h3>Simple Definitions</h3>
<dl id=" HighPerformanceComputingdef">
 	<dt>high performance computing</dt>
 	<dd id="fs-id2393uhpc">Grouping multiple computers or multiple computer processors to accomplish a task in less time.</dd>
</dl>
<dl id="linearprocessingdef">
 	<dt>sequential processing</dt>
 	<dd id="fs-id1056uhpc">Using only one processor and completing the tasks in a sequential order.</dd>
</dl>
<dl id="parallelprocessingdef">
 	<dt>parallel processing</dt>
 	<dd id="fs-id2277uhpc">Dividing a task into parts that can utilize more than one processor.</dd>
</dl>
<dl id="centralprocessingunitdef">
 	<dt>central processing unit</dt>
 	<dd id="fs-id2430uhpc">The electronic circuitry that actually executes computer instructions.</dd>
</dl>
<dl id="parallelprogrammingdef">
 	<dt>parallel programming</dt>
 	<dd id="fs-id2371uhpc">Involves developing programs that utilize parallel processing algorithms that take advantage of multiple processors.</dd>
</dl>
</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>310</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:18:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:18:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[understanding-high-performance-computing]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>334</wp:post_parent>
		<wp:menu_order>6</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Practice</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/practice-24/</link>
		<pubDate>Sat, 16 Jun 2018 18:19:12 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=311</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id1166221769277">
<h2>Learning Objectives</h2>
<ol id="id1470391" type="1">
 	<li>Understand key terms and definitions as listed in the modules associated with this chapter.</li>
 	<li>Gain an exposure to object-oriented programming.</li>
 	<li>Gain an exposure to high performance computing.</li>
 	<li>Given general instructions, write the C++ code for a program that includes a general review of the textbook/collection/course.</li>
</ol>
</section><section id="id1166220684652"></section><section id="id3661960">
<h2>Review Questions</h2>
<div id="fs-id1166221177039"><section>
<div id="fs-id1166220489141">
<div id="fs-id1166221875365">
<div>Answer the following statements as either true or false:</div>
<ol>
 	<li>Procedural programming and object-oriented programming cannot be done with the same compiler/IDE.</li>
 	<li>Object-oriented programming encapsulates data and functions.</li>
 	<li>High Performance Computing is a new topic on the computer scene.</li>
 	<li>The concepts and examples of High Performance Computer are difficult to explain.</li>
 	<li>All programmers will need to know about parallel programming in the near future.</li>
</ol>
</div>
</div>
<div id="fs-id1166222073667">
<div class="ui-toggle-wrapper">
<div>Answers:</div>
<ol>
 	<li>false</li>
 	<li>true</li>
 	<li>false</li>
 	<li>false</li>
 	<li>true</li>
</ol>
</div>
</div>
</section></div>
</section><section id="id3676410"></section><section id="id1254820">
<h2>Activities</h2>
<section id="id8067753">
<h4>Creating a Folder or Sub-Folder for Chapter 24 Files</h4>
<p id="id1166222591872">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the Bloodshed Dev-C++ 5 compiler/IDE might be named:</p>

<ul id="id8108420">
 	<li>Chapter_24 within the folder named: Cpp_Source_Code_Files</li>
</ul>
<p id="id3541483">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id1166219564335">
<h4>Download the Lab File(s)</h4>
<p id="id8435616">Download and store the following file(s) to your storage device in the appropriate folder(s). You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id1166226339744">Download from Connexions: <a href="https://cnx.org/resources/cb5a9e6893bc2f425801f3266dade37da5f68784/Lab_24_Narrative_Description.txt">Lab_24_Narrative_Description.txt</a></p>

</section><section id="id4075976">
<h4>Detailed Lab Instructions</h4>
<p id="id8147998">Read and follow the directions below carefully, and perform the steps in the order listed.</p>

<ul id="id3756992">
 	<li>Create a source code file following the directions in the Lab_24_Narrative_Description.txt file. Name it: Lab_24.cpp</li>
 	<li>Build (compile and run) your program.</li>
 	<li>After you have successfully written this program, if you are taking this course for college credit, follow the instructions from your professor/instructor for submitting it for grading.</li>
</ul>
</section></section><section id="id1220538">
<h3>Problems</h3>
<section id="id1166222544338">
<h4>Problem 24a – Instructions</h4>
<p id="id5911463">Describe the fundamental differences between procedural (modular structured) programming and object-oriented programming.</p>

</section><section id="id1166220756978">
<h4>Problem 24b – Instructions</h4>
<p id="id1166225478108">Explain why High Performance Computing is needed to predict tomorrow’s weather.</p>

</section></section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>311</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:19:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:19:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[practice-24]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>78</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Review: Foundation Topics Group: 1-5</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/review-foundation-topics-group-1-5/</link>
		<pubDate>Sat, 16 Jun 2018 18:20:21 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=315</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id5471793">
<h3>Strategy Discussion</h3>
<p id="id1170725572447">Exams vary depending on your instructor. Many will use the following:</p>

<ol id="id1170724694462" type="1">
 	<li>Definitions</li>
 	<li>Self-grading questions including true/false, multiple choice, short answer, etc.</li>
 	<li>Problems</li>
</ol>
<p id="id1170725565691">The materials in this textbook/collection have covered these items at the end of every chapter within the <strong>Practice</strong> module for that chapter. We suggest the following test preparation strategies:</p>

<ol id="id8964857" type="1">
 	<li>If your professor is testing the definitions and expecting you to have them memorized, you should review the “Using the Flash Card Activity” within the “Study Habits that Build the Brain” module within the Appendix materials. Practice writing your definitions using the Flash Card Activity in the Memory Building Activities (MBAs) available within the <strong>Practice</strong> modules or in the Memory Building Activities within this <strong>Review</strong> module.</li>
 	<li>Do a quick review of any exercises within the Connexions modules or the <strong>Practice</strong> modules. Also review quizzes or exams that you have taken and pay special attention to making sure you understand why you missed a question.</li>
 	<li>If your professor has indicated that they might include a few of the problems presented within the <strong>Practice</strong> modules, make sure you have formulated a good answer for each problem. If authorized, collaborate with other students to improve your answers to the problems. Spend a moderate amount of time reviewing each problem with its answer before the exam.</li>
</ol>
</section><section id="id1170735929533"></section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>315</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:20:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:20:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[review-foundation-topics-group-1-5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>80</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Review: Modular Programming Group: 6-9</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/review-modular-programming-group-6-9/</link>
		<pubDate>Sat, 16 Jun 2018 18:20:55 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=316</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id1170734599340">
<h3>Strategy Discussion</h3>
<p id="id5318069">Exams vary depending on your instructor. Many will use the following:</p>

<ol id="id1170729590706" type="1">
 	<li>Definitions</li>
 	<li>Self-grading questions including true/false, multiple choice, short answer, etc.</li>
 	<li>Problems</li>
</ol>
<p id="id1170734469131">The materials in this textbook/collection have covered these items at the end of every chapter within the <strong>Practice</strong> module for that chapter. We suggest the following test preparation strategies:</p>

<ol id="id1170732094535" type="1">
 	<li>If your professor is testing the definitions and expecting you to have them memorized, you should review the “Using the Flash Card Activity” within the “Study Habits that Build the Brain” module within the Appendix materials. Practice writing your definitions using the Flash Card Activity in conjunction with the Memory Building Activities (MBAs) available within the <strong>Practice</strong> modules or in the Memory Building Activities within this <strong>Review</strong> module.</li>
 	<li>Do a quick review of any exercises within the Connexions modules or the <strong>Practice</strong> modules. Also review quizzes or exams that you have taken and pay special attention to making sure you understand why you missed a question.</li>
 	<li>If your professor has indicated that they might include a few of the problems presented within the <strong>Practice</strong> modules, make sure you have formulated a good answer for each problem. If authorized, collaborate with other students to improve your answers to the problems. Spend a moderate amount of time reviewing each problem with its answer before the exam.</li>
</ol>
</section><section id="id7138638"></section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>316</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:20:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:20:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[review-modular-programming-group-6-9]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>80</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Review: Structured Programming Group: 10-16</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/review-structured-programming-group-10-16/</link>
		<pubDate>Sat, 16 Jun 2018 18:21:33 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=317</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id18851306">
<h3>Strategy Discussion</h3>
<p id="id20488605">Exams vary depending on your instructor. Many will use the following:</p>

<ol id="id20488611" type="1">
 	<li>Definitions</li>
 	<li>Self-grading questions including true/false, multiple choice, short answer, etc.</li>
 	<li>Problems</li>
</ol>
<p id="id21980240">The materials in this textbook/collection have covered these items at the end of every chapter within the <strong>Practice</strong> module for that chapter. We suggest the following test preparation strategies:</p>

<ol id="id21904881" type="1">
 	<li>If your professor is testing the definitions and expecting you to have them memorized, you should review the "Using the Flash Card Activity" within the "Study Habits that Build the Brain" module within the Appendix materials. Practice writing your definitions using the Flash Card Activity in conjunction with the Memory Building Activities (MBAs) available within the <strong>Practice</strong> modules or in the Memory Building Activities within this <strong>Review</strong> module.</li>
 	<li>Do a quick review of any exercises within the Connexions modules or the <strong>Practice</strong> moudles. Also review quizzes or exams that you have taken and pay special attention to making sure you understand why you missed a question.</li>
 	<li>If your professor has indicated that they might include a few of the problems presented within the <strong>Practice</strong> modules, make sure you have formulated a good answer for each problem. If authorized, collaborate with other students to improve your answers to the problems. Spend a moderate amount of time reviewing each problem with its answer before the exam.</li>
</ol>
</section><section id="id21926985"></section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>317</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:21:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:21:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[review-structured-programming-group-10-16]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>80</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Review: Intermediate Topics Group: 17-21</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/review-intermediate-topics-group-17-21/</link>
		<pubDate>Sat, 16 Jun 2018 18:22:02 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=318</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id19021599">
<h3>Strategy Discussion</h3>
<p id="id18905301">Exams vary depending on your instructor. Many will use the following:</p>

<ol id="id19013662" type="1">
 	<li>Definitions</li>
 	<li>Self-grading questions including true/false, multiple choice, short answer, etc.</li>
 	<li>Problems</li>
</ol>
<p id="id19091719">The materials in this textbook/collection have covered these items at the end of every chapter within the <strong>Practice</strong> module for that chapter. We suggest the following test preparation strategies:</p>

<ol id="id18993864" type="1">
 	<li>If your professor is testing the definitions and expecting you to have them memorized, you should review the "Using the Flash Card Activity" within the "Study Habits that Build the Brain" module within the Appendix materials. Practice writing your definitions using the Flash Card Activity in conjunction with the Memory Building Activities (MBAs) available within the <strong>Practice</strong> modules or in the Memory Building Activities within this <strong>Review</strong> module.</li>
 	<li>Do a quick review of any exercises wtihin the Connexions modules or <strong>Practice</strong> modules. Also review quizzes or exams that you have taken and pay special attention to making sure you understand why you missed a question.</li>
 	<li>If your professor has indicated that they might include a few of the problems presented within the <strong>Practice</strong> modules, make sure you have formulated a good answer for each problem. If authorized, collaborate with other students to improve your answers to the problems. Spend a moderate amount of time reviewing each problem with its answer before the exam.</li>
</ol>
</section><section id="id19169533"></section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>318</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:22:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:22:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[review-intermediate-topics-group-17-21]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>80</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Review: Advanced Topics Group: 22-24</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/review-advanced-topics-group-22-24/</link>
		<pubDate>Sat, 16 Jun 2018 18:22:36 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=319</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div class="media-body">
<div id="content"><section id="id4446680">
<h3>Strategy Discussion</h3>
<p id="id7572778">Exams vary depending on your instructor. Many will use the following:</p>

<ol id="id3873520" type="1">
 	<li>Definitions</li>
 	<li>Self-grading questions including true/false, multiple choice, short answer, etc.</li>
 	<li>Problems</li>
</ol>
<p id="id3874687">The materials in this textbook/collection have covered these items at the end of every chapter within the <strong>Practice</strong> module for that chapter. We suggest the following test preparation strategies:</p>

<ol id="id4066381" type="1">
 	<li>If your professor is testing the definitions and expecting you to have them memorized, you should review the "Using the Flash Card Activity" within the "Study Habits that Build the Brain" module within the Appendix materials. Practice writing your definitions using the Flash Card Activity in conjunction with the Memory Building Activities (MBAs) available within the <strong>Practice</strong> modules or in the Memory Building Activities within this <strong>Review</strong> module.</li>
 	<li>Do a quick review of any exerecises within the Connexions modules or the <strong>Practice</strong> modules. Also review quizzes or exams that you have taken and pay special attention to making sure you understand why you missed a question.</li>
 	<li>If your professor has indicated that they might include a few of the problems presented within the <strong>Practice</strong> modules, make sure you have formulated a good answer for each problem. If authorized, collaborate with other students to improve your answers to the problems. Spend a moderate amount of time reviewing each problem with its answer before the exam.</li>
</ol>
</section><section id="id4170758"></section></div>
</div>
</div>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>319</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:22:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:22:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[review-advanced-topics-group-22-24]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>80</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Abbreviated Precedence Chart for C++ Operators</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/abbreviated-precedence-chart-for-c-operators/</link>
		<pubDate>Sat, 16 Jun 2018 18:28:16 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=336</guid>
		<description></description>
		<content:encoded><![CDATA[<p id="id1166980153528">An <span>operator</span> is a language-specific syntactical token (one or more symbols) that causes an action to be taken on one or more operands. The following item provides an abbreviated list of those C++ operators that are typically taught in a programming fundamentals course that teaches modular structured programming concepts.</p>
<p id="id4144077">The first column shows the precedence (the higher precedence is 1 or it goes first) and operators that have the same precedence also have the same associativity (the associativity is only listed once for the group of operators). Decrement is two minus signs, but some word processing software programs might have problems printing two minus signs and convert it to a double dash. Insertion (two &lt; signs) and extraction (two &gt; signs) might also have printing problems. These printing problems are noted in the comments with <strong>emphasized</strong> text.</p>

<table id="id1166982036752" summary="">
<tbody>
<tr>
<td><strong>PR</strong></td>
<td><strong>OPERATOR NAME</strong></td>
<td><strong>SYMBOL(S)</strong></td>
<td><strong>COMMENTS</strong></td>
<td><strong>ASSOICIATIVITY</strong></td>
<td><strong>CONNEXIONS</strong><strong>MODULE</strong></td>
</tr>
<tr>
<td>1</td>
<td>function call</td>
<td>()</td>
<td></td>
<td>Left to Right</td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:614f8ea8-b14e-4271-89c5-ddcab0183675@10">m19145</a></td>
</tr>
<tr>
<td>1</td>
<td>index</td>
<td>[]</td>
<td>aka array index</td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:f9cadf7b-bbc5-43d1-8869-d3f5a0720316">m21316</a></td>
</tr>
<tr>
<td>2</td>
<td>class member</td>
<td>.</td>
<td>a period</td>
<td>Right to Left</td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:4235cdfa-7320-4bfd-be4e-89b2b352e160">m20796</a></td>
</tr>
<tr>
<td>2</td>
<td>postfix increment</td>
<td>++</td>
<td>unary</td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:e6cbde34-8f6d-46c1-a8ed-1f9b26721252">m20499</a></td>
</tr>
<tr>
<td>2</td>
<td>postfix decrement</td>
<td>--</td>
<td>unary, <strong>two minus signs</strong></td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:e6cbde34-8f6d-46c1-a8ed-1f9b26721252">m20499</a></td>
</tr>
<tr>
<td>3</td>
<td>indirection</td>
<td>*</td>
<td>unary, aka dereference</td>
<td>Right to Left</td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:8324224c-3582-410e-bc88-cf382eab3af1">m22152</a></td>
</tr>
<tr>
<td>3</td>
<td>address</td>
<td>&amp;</td>
<td>unary</td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:8d6d0d4f-2098-4959-9739-484dc60af8f3">m22148</a></td>
</tr>
<tr>
<td>3</td>
<td>unary positive</td>
<td>+</td>
<td>unary, aka plus</td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:d3a6d075-aecd-4776-b139-e608620ecc4f">m20501</a></td>
</tr>
<tr>
<td>3</td>
<td>unary negative</td>
<td>-</td>
<td>unary, aka minus</td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:d3a6d075-aecd-4776-b139-e608620ecc4f">m20501</a></td>
</tr>
<tr>
<td>3</td>
<td>prefix increment</td>
<td>++</td>
<td>unary</td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:e6cbde34-8f6d-46c1-a8ed-1f9b26721252">m20499</a></td>
</tr>
<tr>
<td>3</td>
<td>prefix decrement</td>
<td>--</td>
<td>unary, <strong>two minus signs</strong></td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:e6cbde34-8f6d-46c1-a8ed-1f9b26721252">m20499</a></td>
</tr>
<tr>
<td>3</td>
<td>cast</td>
<td>(type)</td>
<td>unary</td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:35ea5e0a-ff9a-48b0-8740-588edb0e2f40@7">m18744</a></td>
</tr>
<tr>
<td>3</td>
<td>sizeof</td>
<td>sizeof (type)</td>
<td>unary</td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:b8dd0f6d-c7d8-460e-b693-7ab0931bc4fb">m18736</a></td>
</tr>
<tr>
<td>3</td>
<td>logical NOT</td>
<td>!</td>
<td>unary</td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:262f60cd-62b3-43de-9ee6-e0d589f7714a">m19847</a></td>
</tr>
<tr>
<td>4</td>
<td>multiply</td>
<td>*</td>
<td></td>
<td>Left to Right</td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:b95afa19-1f40-496a-8010-daf7ca6b7191@4">m18706</a></td>
</tr>
<tr>
<td>4</td>
<td>divide</td>
<td>/</td>
<td></td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:b95afa19-1f40-496a-8010-daf7ca6b7191@4">m18706</a></td>
</tr>
<tr>
<td>4</td>
<td>modulus</td>
<td>%</td>
<td>remainder</td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:b95afa19-1f40-496a-8010-daf7ca6b7191@4">m18706</a></td>
</tr>
<tr>
<td>5</td>
<td>add</td>
<td>+</td>
<td></td>
<td>Left to Right</td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:b95afa19-1f40-496a-8010-daf7ca6b7191@4">m18706</a></td>
</tr>
<tr>
<td>5</td>
<td>subtract</td>
<td>-</td>
<td></td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:b95afa19-1f40-496a-8010-daf7ca6b7191@4">m18706</a></td>
</tr>
<tr>
<td>6</td>
<td>insertion</td>
<td>&lt;&lt;</td>
<td>writing, <strong>two less than signs</strong></td>
<td>Left to Right</td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:0a7d9df6-a818-4672-b671-bacff92c3eb8@5">m18835</a></td>
</tr>
<tr>
<td>6</td>
<td>extraction</td>
<td>&gt;&gt;</td>
<td>reading, <strong>two greater than signs</strong></td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:0a7d9df6-a818-4672-b671-bacff92c3eb8@5">m18835</a></td>
</tr>
<tr>
<td>7</td>
<td>less than</td>
<td>&lt;</td>
<td></td>
<td>Left to Right</td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:27dee7f9-5b89-49f2-8c93-c8e3583b22e5">m19549</a></td>
</tr>
<tr>
<td>7</td>
<td>greater than</td>
<td>&gt;</td>
<td></td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:27dee7f9-5b89-49f2-8c93-c8e3583b22e5">m19549</a></td>
</tr>
<tr>
<td>7</td>
<td>less than or equal to</td>
<td>&lt;=</td>
<td></td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:27dee7f9-5b89-49f2-8c93-c8e3583b22e5">m19549</a></td>
</tr>
<tr>
<td>7</td>
<td>greater than or equal to</td>
<td>&gt;=</td>
<td></td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:27dee7f9-5b89-49f2-8c93-c8e3583b22e5">m19549</a></td>
</tr>
<tr>
<td>8</td>
<td>equality</td>
<td>==</td>
<td>equal to</td>
<td>Left to Right</td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:27dee7f9-5b89-49f2-8c93-c8e3583b22e5">m19549</a></td>
</tr>
<tr>
<td>8</td>
<td>inequality</td>
<td>!=</td>
<td>not equal to</td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:27dee7f9-5b89-49f2-8c93-c8e3583b22e5">m19549</a></td>
</tr>
<tr>
<td>9</td>
<td>logical AND</td>
<td>&amp;&amp;</td>
<td></td>
<td>Left to Right</td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:262f60cd-62b3-43de-9ee6-e0d589f7714a">m19847</a></td>
</tr>
<tr>
<td>10</td>
<td>logical OR</td>
<td>||</td>
<td></td>
<td>Left to Right</td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:262f60cd-62b3-43de-9ee6-e0d589f7714a">m19847</a></td>
</tr>
<tr>
<td>11</td>
<td>conditional</td>
<td>? :</td>
<td>trinary</td>
<td>Left to Right</td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:bc1d4e2f-db31-47ff-b243-449495fa6dfc">m20811</a></td>
</tr>
<tr>
<td>12</td>
<td>assignment</td>
<td>=</td>
<td></td>
<td>Right to Left</td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:21c64adb-cce1-45cd-8608-d89572cfa1e3@4">m18725</a></td>
</tr>
<tr>
<td>12</td>
<td>addition assignment</td>
<td>+=</td>
<td></td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:45274e9b-7adf-4589-b427-17e31c90b576@7">m18743</a></td>
</tr>
<tr>
<td>12</td>
<td>subtraction assignment</td>
<td>-=</td>
<td></td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:45274e9b-7adf-4589-b427-17e31c90b576@7">m18743</a></td>
</tr>
<tr>
<td>12</td>
<td>multiplication assignment</td>
<td>*=</td>
<td></td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:45274e9b-7adf-4589-b427-17e31c90b576@7">m18743</a></td>
</tr>
<tr>
<td>12</td>
<td>division assignment</td>
<td>/=</td>
<td></td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:45274e9b-7adf-4589-b427-17e31c90b576@7">m18743</a></td>
</tr>
<tr>
<td>12</td>
<td>modulus assignment</td>
<td>%=</td>
<td></td>
<td></td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:45274e9b-7adf-4589-b427-17e31c90b576@7">m18743</a></td>
</tr>
<tr>
<td>13</td>
<td>sequence or comma</td>
<td>,</td>
<td></td>
<td>Left to Right</td>
<td><a href="https://cnx.org/contents/303800f3-07f3-44d5-a12c-49e93e8948c5@22.2:daea26a9-29f8-4388-85d2-8a8c3dac44b9">m18690</a></td>
</tr>
</tbody>
</table>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>336</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:28:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:28:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[abbreviated-precedence-chart-for-c-operators]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>334</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>C++ Reserved Keywords</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/c-reserved-keywords/</link>
		<pubDate>Sat, 16 Jun 2018 18:28:51 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=337</guid>
		<description></description>
		<content:encoded><![CDATA[<p id="id3551034">All programming languages have "reserved words". There are usually less than 50 of these reserved words in any given programming language. They are reserved because they have been pre-assigned a specific meaning within that programming language, thus the compiler recognizes those words to mean a specific thing or action. Within C++ the reserved words are also known as "keywords".</p>
<p id="id14609578">Programmers use identifier names for a variety of items, to include: functions, variables, named constants, alias names, etc. But, they can't use as identifier names the words that are "reserved to the language".</p>
<p id="id18990018">For the C++ language all "reserved keywords" are typed in lower case. The list that follows includes the American National Standards Institute (ANSI) and the International Organization for Standardization (ISO) lists of reserved words for the C++ programming language. The ISO reserved words may not be implemented in the compiler that you are using, however they may be adopted in future releases of C++ compilers. Wisdom dictates to avoid using them at this point so that there will not be a problem compiling your source code in future releases of compilers. There has been no distinction made in the ANSI or ISO reserved word lists. A search of the Internet for C++ reserved words will reveal several different lists. Some are more unique to a specific compiler. Some will be incomplete because the list has been enlarged. The talbe that follows should work for any beginning programming course using C++. The reserved keywords are:</p>

<table id="id18556217" summary="">
<tbody>
<tr>
<td>and</td>
<td>double</td>
<td>not_eq</td>
<td>throw</td>
</tr>
<tr>
<td>and_eq</td>
<td>dynamic_cast</td>
<td>operator</td>
<td>true</td>
</tr>
<tr>
<td>asm</td>
<td>else</td>
<td>or</td>
<td>try</td>
</tr>
<tr>
<td>auto</td>
<td>enum</td>
<td>or_eq</td>
<td>typedef</td>
</tr>
<tr>
<td>bitand</td>
<td>explicit</td>
<td>private</td>
<td>typeid</td>
</tr>
<tr>
<td>bitor</td>
<td>extern</td>
<td>protected</td>
<td>typename</td>
</tr>
<tr>
<td>bool</td>
<td>false</td>
<td>public</td>
<td>union</td>
</tr>
<tr>
<td>break</td>
<td>float</td>
<td>register</td>
<td>unsigned</td>
</tr>
<tr>
<td>case</td>
<td>fro</td>
<td>reinterpret-cast</td>
<td>using</td>
</tr>
<tr>
<td>catch</td>
<td>friend</td>
<td>return</td>
<td>virtual</td>
</tr>
<tr>
<td>char</td>
<td>goto</td>
<td>short</td>
<td>void</td>
</tr>
<tr>
<td>class</td>
<td>if</td>
<td>signed</td>
<td>volatile</td>
</tr>
<tr>
<td>compl</td>
<td>inline</td>
<td>sizeof</td>
<td>wchar_t</td>
</tr>
<tr>
<td>const</td>
<td>int</td>
<td>static</td>
<td>while</td>
</tr>
<tr>
<td>const-cast</td>
<td>long</td>
<td>static_cast</td>
<td>xor</td>
</tr>
<tr>
<td>continue</td>
<td>mutable</td>
<td>struct</td>
<td>xor_eq</td>
</tr>
<tr>
<td>default</td>
<td>namespace</td>
<td>switch</td>
<td></td>
</tr>
<tr>
<td>delete</td>
<td>new</td>
<td>template</td>
<td></td>
</tr>
<tr>
<td>do</td>
<td>not</td>
<td>this</td>
</tr>
</tbody>
</table>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>337</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:28:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:28:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[c-reserved-keywords]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>334</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ASCII Character Set</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/ascii-character-set/</link>
		<pubDate>Sat, 16 Jun 2018 18:29:35 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=338</guid>
		<description></description>
		<content:encoded><![CDATA[<p id="id15366277">ASCII stands for American Standard Code for Information Interchange (pronounced "ask-key"). Computers can only understand numbers, so an ASCII code is the numerical representation of a character such as 'a' or '@' or an action of some sort. ASCII was developed a long time ago and now the non-printing characters are rarely used for their original purpose. The first 32 values (0 to 31) and the last value (127) are the non-printing characters.</p>
<p id="id15854538">Several software products can be used to create an ASCII text file.</p>

<ul id="id19470582">
 	<li>Notepad within Windows OS and it uses by default the .txt extension.</li>
 	<li>Microsoft Word by saving the file as 'text only' and it uses by default the .txt extension.</li>
 	<li>Integrated Development Environment (IDE) compliers for most programming languages usually save source code as ASCII text files but they will use an extension that describes the content of the text file. Example: C++ usually uses .cpp as the extension.</li>
</ul>
<p id="id16325572">The following web links provide more information and tables listing the ASCII Character Set:</p>

<ul>
 	<li id="id17501079"><a href="http://asciiset.com/" target="_window" rel="nofollow">http://asciiset.com/</a></li>
 	<li id="id4007568"><a href="http://www.asciitable.com/" target="_window" rel="nofollow">http://www.asciitable.com/</a></li>
 	<li id="id19491980"><a href="http://en.wikipedia.org/wiki/ASCII" target="_window" rel="nofollow">http://en.wikipedia.org/wiki/ASCII</a></li>
</ul>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>338</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:29:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:29:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ascii-character-set]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>334</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Show Hide File Extensions</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/show-hide-file-extensions/</link>
		<pubDate>Sat, 16 Jun 2018 18:30:17 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=339</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div class="media-body">
<div id="content">
<p id="id21872198">By default, file extensions for known file types are hidden in Windows operating systems. However, you can change this setting so that file extensions are shown for all file types. Being able to see file extensions can be very helpful for students taking computer courses because those course instructions often refer to file extensions.</p>
<p id="id21872216">All Windows operating systems navigate you to the “Folder Options” menu, then have you select the “View” tab. Indeed the box is identical in Windows XP, Windows Vista and Windows 7.</p>

<figure id="id21872257"><span id="id21872257_media"><img id="id21872257__onlineimage" src="https://cnx.org/resources/6950c2bd36c064e2f1f47d29051e987c9adc4a5e/graphics1.png" alt="" width="436" height="525" /></span></figure>
<p id="id21872284">The check in the box acts like a toggle switch. With a check present, it will hide known file types. Without the check present, it will show all file types. Click on the box to make the check appear [hide file extensions] or disappear [show file extensions] and then select “OK”.</p>
<p id="id21872300">Instructions for navigating to the “Folder Options” for various Windows operating systems along with an Internet link for additional help are provided below.</p>

<section id="id21872310">
<h3>Windows XP</h3>
<p id="id21872318">With the Windows Explorer open, slect the “Tools” tab and then “Folder Options”.</p>
<p id="id21872325">Link for additional help: <a href="http://www.fileinfo.net/help/windows-show-extensions.html" rel="nofollow">http://www.fileinfo.net/help/windows-show-extensions.html</a> or <a href="http://dotwhat.net/page/displayextensions/" rel="nofollow">http://dotwhat.net/page/displayextensions/</a></p>

</section><section id="id21872348">
<h3>Windows Vista</h3>
<p id="id21872355">Select the “Start” button, then “Control Panel”, then “Appearance and Personalization” and then “Folder Options”.</p>
<p id="id21872367">Link for additional help: <a href="http://windows.microsoft.com/en-us/windows-vista/Show-or-hide-file-name-extensions" rel="nofollow">http://windows.microsoft.com/en-us/windows-vista/Show-or-hide-file-name-extensions</a></p>

</section><section id="id21872390">
<h3>Windows 7</h3>
<p id="id21872397">Select the “Start” button, then “Control Panel” and then “Folder Options”.</p>
<p id="id21872404">Link for additional help: <a href="http://maximumpcguides.com/windows-7/hide-file-extensions/" rel="nofollow">http://maximumpcguides.com/windows-7/hide-file-extensions/</a></p>

</section></div>
</div>
</div>
<div>
<div class="media-footer"></div>
</div>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>339</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:30:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:30:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[show-hide-file-extensions]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>334</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Academic or Scholastic Dishonesty</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/academic-or-scholastic-dishonesty/</link>
		<pubDate>Sat, 16 Jun 2018 18:30:55 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=340</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id1168507172056">
<h3>Introduction</h3>
<p id="id1168505941821">The relationship between faculty and students has always been one of open and honest communication. The faculty member carries the responsibility of presenting course materials via reading assignments, lectures, labs, etc. The student is to learn and understand these materials. Additionally, the faculty members employ various methods to assess the student’s mastery of the course materials. Frequently this is done via quizzes, tests, writing assignments, the completion of lab materials, etc. Academic dishonesty (sometimes called “Scholastic Dishonesty”) is the violation of that trust.</p>
<p id="id1168513772043">Cheating on quizzes and tests as well as plagiarism is usually well understood by students before arriving at the collegiate level of education. Most colleges include adequate explanation in their student handbook explaining well what constitutes cheating on exams and plagiarism. Academic dishonesty often carries some stiff penalties. Usually, the student receives the grade of “F” from the professor in the course in which he is enrolled. The student might be expelled from all of their classes for which they are currently enrolled (“F” in all of your classes) and expelled from the institution (may not register for classes in the future). Sounds harsh, but it is a violation of the <strong>bond of trust</strong> between the student and the educational institution.</p>

</section><section id="id1168514527476">
<h3>Collusion</h3>
<p id="id1168505950754">Another category of academic dishonesty is collusion which is the unauthorized collaboration with another person in preparing written work (including lab assignments) offered for credit (counting towards your grade calculation). To better understand collusion, students need to realize that as part of the learning and evaluation of that learning, many professors use group projects; a directed or authorized collaboration. Often students are encouraged to form study groups to help discuss the course materials thus improving the learning process. These authorized and sometimes directed activities are not collusion.</p>
<p id="id1168506996889">The following discussion is to help the student understand collusion (unauthorized collaboration) with specific reference to courses that use computers. This is not an all inclusive list, but will cover the common situations that faculty have encountered over the years. Unless your specific professor informs you differently, you are to assume that the following items discussed are collusion.</p>

</section><section id="id1168519275088">
<h3>Type it Yourself</h3>
<p id="id1168507035520">Lab assignments are to be your own personal typing efforts.  That is you are to type them or make the modifications yourself to the files (documents, spreadsheets, databases, programming source code, etc.) If your course is a programming subject, you are to run the source code file on your compiler, making corrections as need to complete the lab assignment. If the directions for an assignment include starting a new file then don’t use an existing file and modify it to complete the assignment. <strong>Unless specifically authorized by your professor, students should not complete computerized course work as a team or group and then share the final completed product.</strong></p>
<p id="id1168513830320">Students have said that they worked as a team or group and that all participated and all learned the materials. Don’t try this excuse because professors don’t buy it. Here is the problem: Part of the learning process is in you doing it yourself. Example: I ask two students to make me some pancakes for breakfast; I expect two individually prepared plates of pancakes (one from each of them) for my breakfast. The professor really does not want to eat two plates of pancakes (or 50 to 100 plates of pancakes, depending on how many students they are teaching), but part of your directed learning activity for the course is to demonstrate that you can make pancakes (not watch someone else make pancakes or participate as a group to make pancakes).</p>

</section><section id="id1168515924279">
<h3>Control Access to Your Files</h3>
<p id="id1168508107575">Controlling the files you create (or are directed to modify) means that others will not have access to copy your work. In other words, don’t share your files.</p>
<p id="id1168506965984">Students have said that they shared the file so they the other student could see how the completed assignment should look. Don’t try this excuse because professors don’t buy it. Here is the problem: When you share the file you share your typing efforts (or your original work and your efforts to create that original work). Back to our pancake example: “I only gave the other student a plate of completed pancakes, so he could see what the end product should be.” All the other student does is add some blue berries and whip cream. If a student makes minor modifications to your work (changes the spots where his name is at) and turns it in as his work – you will be included in the charge of academic dishonesty. <strong>Unless specifically authorized by your professor, don’t share any files that you create or modify with another student – ever, not now and not in the future.</strong></p>
<p id="id1168507020087">Here are two suggestions for controlling access to your files:</p>
<p id="id1168514129441">When using a course delivery software product or learning system, such as BlackBorad Vista, <strong>don’t give another person your password</strong>. With the password, they will have access to your submitted assignments including the files that you created.</p>
<p id="id1168514347309">Don’t leave your files on a machine where others may have access to them. If multiple students are using or have access to the same machine (often happens with students living in the same household – husband/wife, siblings or roommates) or in an on-campus course where many students will have access to the machine – <strong>store your files on a flash drive</strong>. Physically control who gets access to your flash drive.</p>

</section><section id="id1168511673725">
<h3>Ask for a Clarification of the Collaboration</h3>
<p id="id1168506090106">If you have any question about an activity that might be construed as unauthorized collaboration, ask your professor. They will provide clarification and direction to you about the activity.</p>
<p id="id1168508943793">Students have said that they did not understand or think that it was unauthorized collaboration. Don’t try this excuse because professors don’t buy it<em>.</em> Here is the problem: We can’t, and won’t list every minor way in which students can collude. <strong>The burden is for you to ask for any clarification for the specific course from your professor.</strong> Don’t assume that what another instructor allowed in another course will be allowed by this professor in this course.</p>

</section><section id="id1168507198805">
<h3>Detecting Academic Dishonesty</h3>
<p id="id1168507042213">Professors weren’t born yesterday. The faculty members of most institutions have individually years and collectively thousands of years at understanding academic dishonesty. Cheating on tests, plagiarism and collusion are not new to us. We share our expertise with each other at detecting academic dishonesty. Additionally, the years of technical computer experience of professors who teach using computers in lab settings is often astounding.</p>
<p id="id1168508683349">Students have said that they did not think they could be detected or that academic dishonesty could not be proved. Don’t try this approach because professors believe that they are slightly smarter. Actually, we know that we are a lot smarter. It amazes us that student don’t realize that professors are a formidable force. <strong>Don’t gamble that you can beat us at </strong><strong>the “Academic Dishonesty Game”.</strong> Please don’t take this as a challenge and use it as an excuse to see if you can be academically dishonest and not get caught. We are warning you, not challenging you.</p>

</section><section id="id1168513714455">
<h3>Serious Consequences</h3>
<p id="id1168521787958">The consequences will vary from instructor to instructor and from institution to institution. They range from a simple slap on the hand (don’t do it again) to complete explusion from the institution (expelled from all of your courses). Because the <strong>bond of trust</strong> is broken, many instructors will simply expel you from the course you are taking. As an example: Within the BCIS1405 course at Houston Community College, we expelled 8 students (along with giving them the grade of “F”) from Distance Educations sections during the Spring 2008 term for Academic Dishonesty.</p>
<p id="id1168515927564">Be ready for what ever the consequences your instructor will deliver if you are dishonest.</p>

</section><section id="id1168513741588">
<h3>Summary</h3>
<ul id="id1168513668629">
 	<li>The ethics of academic honesty; there is a bond of trust that whatever the student does in relationship to the evaluation process are their own work and efforts.</li>
</ul>
<ul id="id1168510859434">
 	<li>Collusion is the unauthorized collaboration of students on work submitted for evaluation.</li>
</ul>
<ul id="id1168507112958">
 	<li>First directive: Type if yourself</li>
</ul>
<ul id="id1168504819170">
 	<li>Second directive: Don’t share your files</li>
</ul>
<ul id="id1168508404633">
 	<li>Seek clarification from your professor if you have any doubt that the collaborative activity might be considered collusion.</li>
</ul>
<ul id="id1168507234881">
 	<li>Professors are very capable at detecting academic dishonesty.</li>
</ul>
<ul id="id1168520500396">
 	<li>There are usually consequences to your dishonest behavior.</li>
</ul>
</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>340</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:30:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:30:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[academic-or-scholastic-dishonesty]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>334</wp:post_parent>
		<wp:menu_order>7</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Successful Learning Skills</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/successful-learning-skills/</link>
		<pubDate>Sat, 16 Jun 2018 18:31:26 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=341</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id19018590">
<h3>Realize the Time Commitment</h3>
<p id="id13531568">College computer courses often are listed in the catalog of courses with both lecture and lab hours. But unlike the natural and biological sciences (chemistry, physics and biology) that must meet in a specific lab room designed for those courses, students can usually complete their lab portions at a variety of locations (the college's computer lab, home, work, public library, friend's house, etc.).</p>
<p id="id18011418">The normal rule of thumb is 1 to 1.5 hours out of class studying for every hour in class and for computer courses this normally means both the lecture and lab hours. Students with learning disabilities or those whose primary language is not English will want to plan for more study time and should use a larger ratio. Thus, you should calculate the weekly hours of commitment needed for a course depending on your circumstances. Example:</p>
<p id="id18145429">If a student is taking a 4 credit hour computer course that the college catalog says contains a combination of 6 hours (adding your lecture and lab hours) during a regular 16 week semester; the weekly classroom and study time for that course would be 12 to 15 hours a week.</p>
<p id="id19460570">But many students take courses at a faster pace by either taking a course between semesters in a very concentrated mode, starting a course after the regular start of a semester or during the summer. To calculate the weekly study time needed you will need to calculate the total regular semester instructional time and divide by the number of weeks in the faster pace delivery. Example:</p>
<p id="id3067524">Our 4 credit hour course is to be taken during a summer term that has 9 weeks of instruction time. The total regular semester time would be 15 times the normal semester commitment (180 to 225 hours). Dividing it by 9 would mean 20 to 25 hours per week.</p>

</section><section id="id17925670">
<h3>Understand Your Capacity to Concentrate</h3>
<p id="id18195233">You cannot expect to spend long periods of time working on computer course materials. After 3 to 4 hours of working on course materials, your ability to learn drops significantly (and for most to near zero). This problem is compounded by the nature of the material which is cumulative in nature. This means that you must understand item a before you try to learn item b. All of the math and sciences courses of study are of this nature.</p>

</section><section id="id15427263">
<h3>Plan Regular Study Times</h3>
<p id="id17214420">The combination of the time commitment and your ability to concentrate leads to the conclusion that you cannot cram your study time into a week-end of concentrated study. You must break up your study time into 3 to 4 hour study periods doing only one study period per day. You must establish a regular routine for each week. Students taking a regular semester course on-campus will count their class (lecture and lab) time and plan 2 to 3 additional study periods.</p>
<p id="id8175032">If taking a course via distance education, students need to plan for all of the course time, thus during a regular semester term, our 4 credit hour course example would require 3 to 4 study periods with 3 to 4 hours for each study period per week. If taking the course at <strong>faster pace</strong> (9 week summer term) you will need to schedule more study times. This may mean a <strong>3 to 4 hour study period daily for 6 days a week</strong> (with only one day off as a day of rest).</p>
<p id="id19470540">You need to stay on top of a course to successfully complete it. Pacing yourself with multiple study times allows for effective learning. Students who procrastinate until close to an exam and then try cramming through course materials are rarely "A" students.</p>

</section><section id="id18881800">
<h3>Learning Requires Variety and Repetition</h3>
<p id="id15588418">Variety comes in many forms and includes lecture, lab assignments, studying textbooks, multi-media materials, quizzes, writing a research papers, learning activities such as group discussions, crossword puzzles, flash cards, etc. This variety actually helps our brain to understand and build memory. In addition to variety, repetition (exposure over multiple study periods) is essential for our brains to be able to learn and recall the course materials. Again, this understanding and recall are essential to courses that require cumulative learning (you must understand item a before you can learn item b).</p>
<p id="id18734650">Textbooks and professors break-up course materials into chapters or learning modules often with learning objectives first and review items at the end of each unit. Each chapter or module might have any of the above mentioned items. But doing things and study are different. You can't just show up to class and listen, you can't just read stuff, you need to study. Study requires a variety of activities. Ask yourself:</p>

<ul id="id18999329">
 	<li>Do you understand each learning objective?</li>
 	<li>Can you explain or formulate an answer for each learning objective?</li>
 	<li>If you did not understand the reading materials, did you re-read it?</li>
 	<li>Do the review items (especially questions).</li>
 	<li>Take lecture notes.</li>
 	<li>Do the lecture notes or handouts give you a better understanding than the textbook?</li>
 	<li>Often the problems or lab assignments are to be studied in conjunction with and reinforce the study materials. Have you tried to do and understand the problems or lab assignments?</li>
 	<li>Are there any learning activities available and if yes, did you do them.</li>
 	<li>Did you consider using 3x5 cards to study definitions and vocabulary?</li>
 	<li>Did you review the learning objectives before taking any quizzes?</li>
 	<li>If the quizzes are computerized, did you study your quiz results?</li>
 	<li>After reviewing quiz results and re-study, did you retake the quiz again if available?</li>
</ul>
<p id="id18140603">All of this requires time and effort on your part as the student in any course (distance education or on-campus). You need several study periods a week to learn the materials in any course. The purpose of a quiz is for you to self assess your understanding of the materials. If your learning is not complete, <strong>change or modify your learning habits</strong>.</p>

</section><section id="id10985785">
<h3>Interact with the Other Students</h3>
<p id="id18490779">In a normal classroom students interact with each other. They often form study groups with other students and meet regularly to help each other study materials. These interactions in most cases are essential to the learning process. If your only interaction is by private conversation or private email with the instructor, you are not fully participating in the course. For distance education students, most learning systems (such as Blackboard Vista) provide several tools to create this interaction. They typically include announcements, discussion list, email and chat tools.</p>

</section><section id="id19170121">
<h3>Don't Procrastinate and Don't Get Behind</h3>
<p id="id17273321">What should you do if you get behind? Plan <strong>regular study periods.</strong> The lack of regular study periods is most likely the reason for why you got behind. Plan when you will do <strong>extra study periods</strong> in order to catch up.</p>

</section><section id="id18999110">
<h3>Attend Class and Take Notes</h3>
<p id="id5507931">Taking lecture notes and being able to review those note later when you are studying provides variety that is needed to learn material. Just writing the notes down more actively engages the brain, because you are listening and writing. But you need to arrange with at least two fellow classmates that you will all take notes and share notes with each other if absent. In addition to course materials, other administrative matters are discussed in class (such as the announcement of exam date change).</p>
<p id="id15611544">If you are taking a distance education course, you need to regularly enter the learning management system (such as Blackboard Vista) and review the announcements, discussion list postings and read (and answer if appropriate) email. Most distance education professors assume that anything he has communicated via these tools will have been read by the student within 3 days. In short this means you are responsible for having read the items and completing any action requested.</p>

</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>341</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:31:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:31:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[successful-learning-skills]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>334</wp:post_parent>
		<wp:menu_order>8</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Study Habits that Build the Brain</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/study-habits-that-build-the-brain/</link>
		<pubDate>Sat, 16 Jun 2018 18:32:06 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=342</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id25113229">
<h3>Introduction</h3>
<p id="id24913633">During the spring of 2008 the author, Kenneth Leroy Busbee, did some research with students taking a computer programming fundamentals course to determine if using 3x5 cards would improve student performance on exams. In short, it did! This was not a surprise, but it became obvious that most of us (faculty at all levels of education as well as students) have little understanding of how are brain builds understanding and long term memory.</p>
<p id="id24879352">Attached are several PowerPoint presentations that have been save in an Adobe PDF format. Please spend a few minutes reviewing the information provided. Hopefully it will help students to better learn the subjects they are studying.</p>

</section><section id="id23459461">
<h3>Main Presentation</h3>
<p id="id8031934">Link to: <a href="https://cnx.org/resources/8f976290b34b820c53840f10a889187ce1700fcb/Study_Habits_that_Build_the_Brain.pdf" target="_window">Study Habits that Build the Brain</a></p>

</section><section id="id24886041">
<h3>Specific Topics</h3>
<p id="id24928377">Link to: <a href="https://cnx.org/resources/bd888df5e92c065de16e64c4741e131a1e40be58/Reading_the_Textbook.pdf" target="_window">Reading the Textbook</a></p>
<p id="id24893720">Link to: <a href="https://cnx.org/resources/6cde9071af6f24f2302947f4f5225b03fa30126a/Taking_Lecture_Notes.pdf" target="_window">Taking Lecture Notes</a></p>
<p id="id25027175">Link to: <a href="https://cnx.org/resources/765dcaf114ba2a15096286342613a60e10a84610/Using_3x5_Cards.pdf" target="_window">Using 3x5 Cards</a></p>
<p id="id24627038">Link to: <a href="https://cnx.org/resources/d8cff76bcc1b86ee47f06715a7533056c8ce58f3/Using_the_Flash_Card_Activity.pdf" target="_window">Using the Flash Card Activity</a></p>

</section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>342</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:32:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:32:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[study-habits-that-build-the-brain]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>334</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>C++ Examples</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/cpp-examples-2/</link>
		<pubDate>Wed, 20 Jun 2018 00:08:42 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=674</guid>
		<description></description>
		<content:encoded><![CDATA[<h2><img class="alignright" style="width: 20%;height: 20%" src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/18/ISO_C%2B%2B_Logo.svg/306px-ISO_C%2B%2B_Logo.svg.png" alt="ISO C++ Logo.svg" />Overview</h2>
<strong>C++</strong> is a general-purpose programming language. It has imperative, object-oriented and generic programming features, while also providing facilities for low-level memory manipulation. C++ was developed by Bjarne Stroustrup at Bell Labs starting in 1979 as an extension of the C language. The C++ programming language was initially standardized in 1998.[footnote]<a href="https://en.wikipedia.org/wiki/C%2B%2B">Wikipedia: C++</a>[/footnote]

C++ is one of the most popular current programming languages[footnote]<a href="https://www.tiobe.com/tiobe-index/">TIOBE: Index</a>[/footnote] and is often used in computer science courses.
<h2>Hello World</h2>

<hr />

<pre>// This program displays "Hello world!"
//
// References:
// http://www.cplusplus.com/doc/tutorial/program_structure/

#include &lt;iostream&gt;

int main()
{
    std::cout &lt;&lt; "Hello world!";
}</pre>

<hr />

Each code element represents:[footnote]<a href="https://en.wikibooks.org/wiki/Programming_Fundamentals/Hello_World">Wikibooks: Programming Fundamentals/Hello World</a>[/footnote]
<ul>
 	<li><code>//</code> begins a comment</li>
 	<li><code>#include &lt;iostream&gt;</code> includes standard input and output streams</li>
 	<li><code>int main()</code> begins the main function, which returns an integer value</li>
 	<li><code>{</code> begins a block of code</li>
 	<li><code>std::cout</code> is standard output</li>
 	<li><code>&lt;&lt;</code> directs the next element to standard output</li>
 	<li><code>"Hello world!"</code> is the literal string to be displayed</li>
 	<li><code>;</code> ends each line of C++ code</li>
 	<li><code>}</code> ends a block of code</li>
</ul>
<h2>C++ IDEs</h2>
There are many free cloud-based and local IDEs available to begin coding in C++. Check with your instructor or do your own research for recommendations.
<h3>Cloud-Based IDEs</h3>
<ul>
 	<li><a href="https://www.codechef.com/ide">CodeChef</a></li>
 	<li><a href="https://www.onlinegdb.com/">GDB Online</a></li>
 	<li><a href="http://ideone.com">Ideone</a></li>
 	<li><a href="https://paiza.io/projects/new">paiza.IO</a></li>
 	<li><a href="http://pythontutor.com/visualize.html#code=&amp;py=cpp">PythonTutor</a></li>
 	<li><a href="https://repl.it/languages/cpp">repl.it</a></li>
 	<li><a href="https://www.tutorialspoint.com/compile_cpp_online.php">TutorialsPoint</a></li>
</ul>
<h3>Local IDEs</h3>
<ul>
 	<li><em>TBD</em></li>
</ul>

<hr />

<div class="textbox shaded">

Note to Contributors:

The following was copied from the original chapter and separated out for C++. There is a module on the Bloodshed Dev-C++ 5 Compiler/IDE that was moved to the appendix that may be moved back and / or integrated here if necessary.

A C++ subject matter expert is needed to determine how much of this content is necessary here.

</div>
<h2>Standard I/O within C++</h2>
<p id="id4794607">The developers of the C++ programming language decided to provide some of the more technical code needed to interact with the operating system and the I/O devices. In the following example the include directive inserts a file that contains code from the Input-Output Stream library. This file contains necessary code to use cout and cin for sending data to the monitor or getting data from the keyboard.</p>
<p id="id4794646"><code>#include &lt;iostream&gt;</code></p>
<p id="id4794655">You should think of <strong>cout</strong> and <strong>cin</strong> as being locations that you can send to or receive data from; similar in concept to any other variable storage location within the data area of our program. The C++ programming language has two operators to use in conjunction with I/O devices.</p>

<table id="id4794684" summary="">
<tbody>
<tr>
<td>Action</td>
<td>C ++ operator symbol</td>
<td>Used with</td>
</tr>
<tr>
<td>insertion operator (write)</td>
<td>&lt;&lt; (a pair of less than symbols)</td>
<td>cout</td>
</tr>
<tr>
<td>extraction operator (read)</td>
<td>&gt;&gt; (a pair of greater than symbols)</td>
<td>cin</td>
</tr>
</tbody>
</table>
<p id="id1807587">Consider the following code:</p>

<div id="fs-id1166432794434" class="ui-has-child-title"><header>
<div>Insertion and Extraction</div>
</header><section>
<pre id="fs-id1166432892165"><code>
int age1;     // variable set up
   then later on in our program
cout &lt;&lt; "\nEnter the age of the first person ---&gt;: ";
cin &gt;&gt; age1;</code></pre>
</section></div>
<p id="id1807595">Using the <strong>cout</strong> the programmer displays (or inserts) a prompting message on the monitor for the user to see. Using the <strong>cin</strong> the user types an integer value and hits the enter key and the computer extracts the value from the keyboard and stores it into the variable named age1. Within the computer all data are stored as numbers and thus part of the technical code provided by the developers of the C++ programming language that is within the <strong>Input-Output Stream</strong> library converts data from numbers to those symbols we are used to seeing as humans and vice versa. Example: If the user entered the numeral digits 57 and hit the enter key – the extraction operator would convert the 57 into a binary number and move the binary number into the integer storage place named age1.</p>
<p id="id1807658">The <strong>cout</strong> which uses the standard output device does not format the output into a Graphical User Interface (GUI) where you have a mouse to use. A modern operating system using GUI normally opens a black screen output box that would be similar to how the monitor was used when first developed in the 1960's. That is the default of how <strong>cout</strong> is normally implemented by most compilers.</p>
<p id="id1807706">The output message has a unique item worth mentioning. At the very front of the message is a backslash followed by the letter n. They do not get printed on the monitor. It is a special code (called a printer <strong>escape code</strong>) telling the printer to go to a new line. Printer! I thought we were using a monitor? We are but the code is a left over from the early days of printer output. The backslash tells the printer or monitor that the next letter is a command. The letter n is used for telling the printer or monitor to go to the front of a new line.</p>

<h2>References</h2>
<ul>
 	<li><a href="https://en.wikiversity.org/wiki/Computer_Programming">Wikiversity: Computer Programming</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>674</wp:post_id>
		<wp:post_date><![CDATA[2018-06-20 00:08:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-20 00:08:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cpp-examples-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>40</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="dbraunsc"><![CDATA[Dave Braunschweig]]></category>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[c-examples]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[cpp-examples-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Python Examples</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/python-examples-2/</link>
		<pubDate>Wed, 20 Jun 2018 00:33:20 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=678</guid>
		<description></description>
		<content:encoded><![CDATA[<h2><img class="alignright" style="height: 33%;width: 33%" src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f8/Python_logo_and_wordmark.svg/486px-Python_logo_and_wordmark.svg.png" alt="File:Python logo and wordmark.svg" />Overview</h2>
<strong>Python</strong> is an interpreted high-level programming language for general-purpose programming. Created by Guido van Rossum and first released in 1991, Python has a design philosophy that emphasizes code readability, notably using significant whitespace. It provides constructs that enable clear programming on both small and large scales.[footnote]<a href="https://en.wikipedia.org/wiki/Python_(programming_language)">Wikipedia: Python (programming language)</a>[/footnote]

Python is one of the most popular current programming languages[footnote]<a href="https://www.tiobe.com/tiobe-index/">TIOBE: Index</a>[/footnote], is frequently recommended as a first programming language, and often used in information systems and data science courses.
<h2>Hello World</h2>

<hr />

<pre># This program displays "Hello world!"
#
# References:
# https://en.wikibooks.org/wiki/Non-Programmer%27s_Tutorial_for_Python_3/Hello,_World

print("Hello world!")</pre>

<hr />

Each code element represents:[footnote]<a href="https://en.wikibooks.org/wiki/Programming_Fundamentals/Hello_World">Wikibooks: Programming Fundamentals/Hello World</a>[/footnote]
<ul>
 	<li><code>#</code> begins a comment</li>
 	<li><code>print()</code> calls the print function</li>
 	<li><code>"Hello world!"</code> is the literal string to be displayed</li>
</ul>
<h2>Python IDEs</h2>
There are many free cloud-based and local IDEs available to begin coding in Python. Check with your instructor or do your own research for recommendations.
<h3>Cloud-Based IDEs</h3>
<ul>
 	<li><a href="https://www.codechef.com/ide">CodeChef</a></li>
 	<li><a href="https://www.onlinegdb.com/">GDB Online</a></li>
 	<li><a href="http://ideone.com">Ideone</a></li>
 	<li><a href="https://paiza.io/projects/new">paiza.IO</a></li>
 	<li><a href="http://pythonfiddle.com/">Python Fiddle</a></li>
 	<li><a href="http://pythontutor.com/visualize.html#code=&amp;py=3">PythonTutor</a></li>
 	<li><a href="https://repl.it/languages/python3">repl.it</a></li>
 	<li><a href="https://www.tutorialspoint.com/execute_python3_online.php">TutorialsPoint</a></li>
</ul>
<h3>Local IDEs</h3>
<ul>
 	<li><a href="https://en.wikipedia.org/wiki/IDLE">IDLE</a></li>
 	<li><a href="https://en.wikipedia.org/wiki/Thonny">Thonny</a></li>
</ul>
<h2>References</h2>
<ul>
 	<li><a href="https://en.wikiversity.org/wiki/Computer_Programming">Wikiversity: Computer Programming</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>678</wp:post_id>
		<wp:post_date><![CDATA[2018-06-20 00:33:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-20 00:33:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[python-examples-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>40</wp:post_parent>
		<wp:menu_order>8</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="dbraunsc"><![CDATA[Dave Braunschweig]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[python-examples]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[python-examples-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java Examples</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/java-examples-2/</link>
		<pubDate>Wed, 20 Jun 2018 01:21:24 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=689</guid>
		<description></description>
		<content:encoded><![CDATA[<h2><img class="alignright" style="height: 15%;width: 15%" src="https://upload.wikimedia.org/wikipedia/en/thumb/3/30/Java_programming_language_logo.svg/234px-Java_programming_language_logo.svg.png" alt="Java programming language logo.svg" />Overview</h2>
Java is a general-purpose computer-programming language that is concurrent, class-based, object-oriented, and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "write once, run anywhere" (WORA), meaning that compiled Java code can run on all platforms that support Java without the need for recompilation. Java was originally developed by James Gosling at Sun Microsystems and released in 1995.

Java is one of the most popular current programming languages[footnote]<a href="https://www.tiobe.com/tiobe-index/">TIOBE: Index</a>[/footnote] and is often used in computer science courses.
<h2>Hello World</h2>

<hr />

<pre>// This program displays "Hello world!"
//
// References:
// https://introcs.cs.princeton.edu/java/11hello/HelloWorld.java.html

class hello {
    public static void main(String[] args) {
        System.out.println("Hello world!");
    }
}</pre>

<hr />

Each code element represents:[footnote]<a href="https://en.wikibooks.org/wiki/Programming_Fundamentals/Hello_World">Wikibooks: Programming Fundamentals/Hello World</a>[/footnote]
<ul>
 	<li><code>//</code> begins a comment</li>
 	<li><code>class hello</code> begins the Hello World program</li>
 	<li><code>{</code> begins a block of code</li>
 	<li><code>public static void main(String[] args)</code> begins the main function</li>
 	<li><code>System.out.println()</code> calls the standard output print line function</li>
 	<li><code>"Hello world!"</code> is the literal string to be displayed</li>
 	<li><code>;</code> ends each line of Java code</li>
 	<li><code>}</code> ends a block of code</li>
</ul>
<h2>Java IDEs</h2>
There are many free cloud-based and local IDEs available to begin coding in Java. Check with your instructor or do your own research for recommendations.
<h3>Cloud-Based IDEs</h3>
<ul>
 	<li><a href="https://www.codechef.com/ide">CodeChef</a></li>
 	<li><a href="https://www.onlinegdb.com/">GDB Online</a></li>
 	<li><a href="http://ideone.com">Ideone</a></li>
 	<li><a href="https://paiza.io/projects/new">paiza.IO</a></li>
 	<li><a href="http://pythontutor.com/visualize.html#code=&amp;py=java">PythonTutor</a></li>
 	<li><a href="https://repl.it/languages/java">repl.it</a></li>
 	<li><a href="https://www.tutorialspoint.com/compile_java_online.php">TutorialsPoint</a></li>
</ul>
<h3>Local IDEs</h3>
<ul>
 	<li><a href="https://en.wikipedia.org/wiki/BlueJ">BlueJ</a></li>
 	<li><a href="https://en.wikipedia.org/wiki/JEdit">jEdit</a></li>
 	<li><a href="https://en.wikipedia.org/wiki/JGRASP">jGRASP</a></li>
</ul>
<h2>References</h2>
<ul>
 	<li><a href="https://en.wikiversity.org/wiki/Computer_Programming">Wikiversity: Computer Programming</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>689</wp:post_id>
		<wp:post_date><![CDATA[2018-06-20 01:21:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-20 01:21:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[java-examples-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>40</wp:post_parent>
		<wp:menu_order>6</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="dbraunsc"><![CDATA[Dave Braunschweig]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[java-examples]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[java-examples-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Preface</title>
		<link>https://press.rebus.community/programmingfundamentals/front-matter/preface/</link>
		<pubDate>Wed, 13 Jun 2018 15:21:53 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/2018/06/13/introduction/</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id1169946083199">
<h1>About this Textbook/Collection</h1>
<em><strong>Programming Fundamentals - A Modular Structured Approach, 2nd Edition</strong></em> is an adaptation of "<em>Programming Fundamentals - A Modular Structured Approach using C++</em>", written by Kenneth Leroy Busbee, a faculty member at Houston Community College in Houston, Texas. The materials used in this textbook/collection were originally developed by Busbee and others as independent modules for publication within the Connexions environment. The original source is available at <a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17/" target="_blank" rel="noopener">https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17/</a> .

This edition, adapted by Dave Braunschweig and others, expands on the original vision by supporting multiple programming languages and including example code in C++, Java, Python, and others. Additional programming languages will be included in future editions.

Programming fundamentals are often divided into three college courses: Modular/Structured, Object Oriented and Data Structures. This textbook/collection covers the first of those three courses.

<section id="id1169942602330">
<h2>Learning Modules</h2>
<p id="id1169946111784">The learning modules of this textbook/collection were written as <strong>standalone</strong> modules. Students using a collection of modules as a textbook will usually view its contents by reading the modules sequentially as presented by the author of the collection.</p>
<p id="id1169938616481">However, many readers of these modules may find them as a result of an Internet search. The project allows the author of a module to create web links to other modules and Internet locations. These links are shown when viewing materials on-line and are categorized into three types: Example, Prerequisite and Supplemental.</p>
<p id="id1169945907906">Students using this collection for a college course should note that all of the <strong>Prerequisite links</strong> within the modules will be modules that student should have already read and most of the <strong>Supplemental links</strong> will be modules that the student will read shortly. Thus, students should use Prerequisite links for review as needed and not be overly concerned about viewing all of the Supplemental links at the first reading of this textbook/collection.</p>

</section><section id="id1169938813964">
<h2>Conceptual Approach</h2>
<p id="id1169923243593">The learning modules of this textbook/collection were, for the most part, written without consideration of a specific programming language. Concepts are presented generically, with program logic demonstrated first in pseudocode and flowchart and pseudocode format. Language-specific examples follow the general overview.</p>

</section><section id="id1169956098779"></section><section id="id1169922829902"></section></section><section id="id1169933172576"><section id="id1169934488007">
<h2>Re-use and Customization</h2>
<p id="id1169932916625">The <a href="http://creativecommons.org/licenses/by/2.0/" rel="nofollow">Creative Commons (CC) Attribution license</a> applies to all modules in this textbook. Under this license, any module may be used or modified for any purpose as long as proper attribution to the original author(s) is maintained.</p>

</section><section id="id1169934429747"></section><section id="id1169940749409">
<h2>PDF Conversion Problems</h2>
<p id="id1169932117296">There are several known PDF printing problems. A description of the known problems are:</p>

<ol id="id1169934691630" type="1">
 	<li>When it converts an "Example" the PDF displays the first line of an example properly but indents the remaining lines of the example. This problem occurs for the printing of a book (because it prints a PDF) and downloading either a module or a textbook/collection as a PDF.</li>
 	<li>Within C++ there are three operators that do not convert properly to PDF format.</li>
</ol>
<table id="id1169931842815" summary="">
<tbody>
<tr>
<td>decrement</td>
<td>--</td>
<td>which is two minus signs</td>
</tr>
<tr>
<td>insertion</td>
<td>&lt;&lt;</td>
<td>which is two less than signs</td>
</tr>
<tr>
<td>extraction</td>
<td>&gt;&gt;</td>
<td>which is two greater than signs</td>
</tr>
</tbody>
</table>
</section></section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 15:21:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 15:21:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[preface]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[front-matter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="dbraunsc"><![CDATA[Dave Braunschweig]]></category>
		<category domain="front-matter-type" nicename="introduction"><![CDATA[Introduction]]></category>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[introduction]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Book Information</title>
		<link>https://press.rebus.community/programmingfundamentals/?metadata=book-information</link>
		<pubDate>Wed, 13 Jun 2018 15:21:54 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/2018/06/13/book-information/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 15:21:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 15:21:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[book-information]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[metadata]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="license" nicename="cc-by"><![CDATA[CC BY (Attribution)]]></category>
		<category domain="contributor" nicename="dbraunsc"><![CDATA[Dave Braunschweig]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[Programming Fundamentals]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_language]]></wp:meta_key>
			<wp:meta_value><![CDATA[en]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_cover_image]]></wp:meta_key>
			<wp:meta_value><![CDATA[https://press.rebus.community/app/uploads/sites/136/2018/06/cover.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_primary_subject]]></wp:meta_key>
			<wp:meta_value><![CDATA[UM]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_short_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[Programming Fundamentals]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_copyright_holder]]></wp:meta_key>
			<wp:meta_value><![CDATA[Authors and Contributors]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_book_license]]></wp:meta_key>
			<wp:meta_value><![CDATA[cc-by]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_custom_copyright]]></wp:meta_key>
			<wp:meta_value><![CDATA[Creative Commons Attribution CC-BY License

You are free to:
<ul>
 	<li>Share — copy and redistribute the material in any medium or format</li>
 	<li>Adapt — remix, transform, and build upon the material for any purpose, even commercially.</li>
</ul>
Under the following terms:
<ul>
 	<li>Attribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.</li>
 	<li>No additional restrictions — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.</li>
</ul>
See <a href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a> for more information.

&nbsp;]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_about_140]]></wp:meta_key>
			<wp:meta_value><![CDATA[Programming Fundamentals]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_subtitle]]></wp:meta_key>
			<wp:meta_value><![CDATA[A Modular Structured Approach, 2nd Edition]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_contributors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Author Acknowledgements</title>
		<link>https://press.rebus.community/programmingfundamentals/front-matter/author-acknowledgements/</link>
		<pubDate>Wed, 13 Jun 2018 23:13:04 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=front-matter&#038;p=25</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>1st Edition Acknowledgements</h2>
<p id="id10283313">I wish to acknowledge the many people who have helped me and have encouraged me in this project.</p>

<ol id="id10043036" type="1">
 	<li>Mr. Abass Alamnehe, who is a fellow faculty member at Houston Community College. He has encouraged the use of Connexions as an "open source" publishing concept. His comments on several modules have led directly to the improvement of the materials in this textbook/collection.</li>
 	<li>The hundreds (most likely a thousand plus) students that I have taken programming courses that I have taught since 1984. The languages include: COBOL, main frame IBM assembly, Intel assembly, Pascal, "C" and "C++". They have often suggested that I write my own book because they thought that I was explaining the subject matter better than the author of the textbook that we were using. Little did my students understand that directly or indirectly they aided in the improvement of the materials from which I taught as well as improving me as a teacher.</li>
 	<li>To my future students and all those that will use this textbook/collection. They will provide suggestions for improvement as well as being the thousand eyes identifying the hard to find typos, etc.</li>
 	<li>My wife, Carol, who supports me in all that I do. She has tolerated the many hours that I have spent in concentration on developing the modules that comprise this work. Without her support, this work would not have happened.</li>
</ol>
Kenneth Leroy Busbee
<h2>2nd Edition Acknowledgements</h2>
I wish to acknowledge the many people who have helped make this edition possible, including:
<ul>
 	<li>Kenneth Leroy Busbee for his initial vision and willingness to share content as CC-BY, making it possible to build on his success.</li>
 	<li>Jay Singelmann and Jean Longhurst, who first taught me structured programming.</li>
 	<li>Joyce Farrell, whose <em>Programming Logic and Design</em> book I have used for several years and has no doubt influenced my approach.</li>
 	<li>Devin Cook for developing Flowgorithm, releasing it as free software, and graciously allowing its use to generate the pseudocode and flowcharts used in this textbook.</li>
 	<li>Zoe Wake Hyde and the staff and volunteers at Rebus Community for providing a community and platform to create and collaborate on open content.</li>
 	<li>Contributors and editors TBD.</li>
 	<li>My wife and family for accepting my dedication to open educational resources and loving me anyway.</li>
</ul>
Dave Braunschweig
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 23:13:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 23:13:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[author-acknowledgements]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[front-matter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="dbraunsc"><![CDATA[Dave Braunschweig]]></category>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Orientation and Syllabus</title>
		<link>https://press.rebus.community/programmingfundamentals/front-matter/orientation-and-syllabus/</link>
		<pubDate>Wed, 13 Jun 2018 23:16:38 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=front-matter&#038;p=28</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id1169867858949">
<div class="textbox shaded">

Note to Contributors:

Strikethrough text will be replaced or deleted  The checkoff list at the bottom of the page will need to be updated.

</div>
<h2>Orientation</h2>
<section id="id1169867935002">
<h3>Textbook/Collection Layout</h3>
<p id="id1169865585984">The approach of this course will be to take the student through a progression of materials that will allow the student to develop the skills of programming. The basic unit of study is a Pressbooks page (chapter). Several pages are collected into a chapter (part).</p>
<del>The chapters are divided into five groups.</del>
<table id="id1169854120583" summary="Table listing the quanitiy of modules in various sections.">
<tbody>
<tr>
<td><del><strong>Group Title</strong></del></td>
<td><del><strong>Chapters</strong></del></td>
<td><del><strong>Modules</strong></del></td>
</tr>
<tr>
<td><del>Pre-Chapter Items</del></td>
<td><del>N/A</del></td>
<td><del>4</del></td>
</tr>
<tr>
<td><del>Foundation Topics</del></td>
<td><del>1-5</del></td>
<td><del>27</del></td>
</tr>
<tr>
<td><del>Modular Programming</del></td>
<td><del>6-9</del></td>
<td><del>17</del></td>
</tr>
<tr>
<td><del>Structured Programming</del></td>
<td><del>10-16</del></td>
<td><del>30</del></td>
</tr>
<tr>
<td><del>Intermediate Topics</del></td>
<td><del>17-21</del></td>
<td><del>17</del></td>
</tr>
<tr>
<td><del>Advanced Topics</del></td>
<td><del>22-24</del></td>
<td><del>11</del></td>
</tr>
<tr>
<td><del>Review Materials</del></td>
<td><del>N/A</del></td>
<td><del>5</del></td>
</tr>
<tr>
<td><del>Appendix</del></td>
<td><del>N/A</del></td>
<td><del>7</del></td>
</tr>
<tr>
<td><del><strong>Total Modules</strong></del></td>
<td><del><strong>N/A</strong></del></td>
<td><del><strong>118</strong></del></td>
</tr>
</tbody>
</table>
<p id="eip-468">Some professors using this textbook/collection might decide to eliminate certain modules or chapters. Some may eliminate the entire Advanced Topics group. Other professors may choose to add additional study materials. The advantage of this textbook/collection is that it may be adapted by professors to suit the needs of their students.</p>

</section><section id="id1169854404350">
<h3>Chapter Layout</h3>
<p id="id1169856342981">Each chapter will usually flow from:</p>

<ol id="id1169859999567" type="1">
 	<li>One or more modules built for independent delivery.</li>
 	<li>A Practice module built specifically for this textbook/collection.</li>
</ol>
<p id="id1169857641613">As you proceed with the modules that comprise a chapter, you should:</p>

<ul id="id1169846272633">
 	<li>Complete any tasks/demos that require downloading items.</li>
 	<li>Do any exercises.</li>
 	<li>Create study cards for all definitions. When this material is used as a textbook for a course the definitions are to be memorized. Confirm this with your professor.</li>
</ul>
<p id="id1169870171578">As you start the Practice module you will usually encounter:</p>

<ul id="id1169855364207">
 	<li>Learning Objectives</li>
 	<li>Exercises – In addition to any exercises within the study modules that you completed before the practice module, there will be at least one exercise for students to complete.</li>
 	<li>Lab Assignment – Usually, completed on one's own efforts. Review the instructions/restrictions from your professor/teacher if using this for a high school or college credit course.</li>
 	<li>Problems – The intent of this activity is for students to formulate their own answers. Thus, solutions to the problems will not be provided. When the materials are used as a textbook for a course, the professor/teacher may assign students to a "Study Group" or let students form study groups to discuss their solutions with each other. If you are using this for a high school or college credit course, verify that you may work as team at solving the problems. This type of approved activity is called "authorized collusion" and is not a violation of "Academic or Scholastic Dishonesty" rules.</li>
</ul>
<p id="id1169854314686">A professor using this textbook/collection/course will most likely have additional lab assignments, quizzes and exams that would be used in calculating your grade.</p>

</section><section id="id1169864445404">
<h3>Reading List</h3>
<p id="id1169855439094">The modules in this textbook/collection have had content reviewed and are believed to be sufficient, thus <strong>no additional textbook is required</strong>. However, some students desire additional references or reading. The author has used several textbooks over the years for teaching "COSC1436 – Programming Fundamentals I" course at Houston Community College and at the Community College of Qatar. A reading reference list has been prepared and includes references for the following textbooks:</p>

<ol id="id1169860083015" type="1">
 	<li>Starting Out with C++ Early Objects, by: Tony Gaddis et. al., 7<sup>th</sup> Edition, International Edition, ISBN: 978-0-13-137714-1</li>
 	<li>Starting Out with C++ Early Objects, by: Tony Gaddis et. al., 6<sup>th</sup> Edition, ISBN: 0-321-51238-3</li>
 	<li>Starting Out with C++ Early Objects, by: Tony Gaddis et. al., 5<sup>th</sup> Edition, ISBN: 0-321-38348-6</li>
 	<li>Computer Science – A structured Approach using C++, by: Behrouz A. Forouzan et. al., 2<sup>nd</sup> Edition, ISBN: 0-534-37480-8</li>
</ol>
<p id="id1169859767151">These textbooks are typically available in the used textbook market at a reasonable price. You may use any one of the three books. If you acquire one of the above <strong>optional</strong> traditional textbooks, you may want to download and store the following file to your storage device (disk drive or flash drive) in an appropriate folder.</p>
<p id="id1169869995084">Download from Connexions: <a href="https://cnx.org/resources/0ba808f7ed6a42062d743ee2e2056b1a0b69b5c1/Connexions_Module_Reading_List_col10621_V2.pdf" target="_window">Connexions_Module_Reading_List_col10621.pdf</a></p>

</section></section><section id="id1169854514053">
<h2>Syllabus</h2>
<p id="id1169863307715">The syllabus for a course that is for credit will be provided by your specific course professor. If you are using this textbook/collection for non-credit as self-study, we have some suggestions:</p>

<ol id="id1169866542113" type="1">
 	<li>Plan regular study periods</li>
 	<li>Review the three (3) Pre-Chapter Items modules</li>
 	<li>Review the last four (4) modules in the Appendix</li>
 	<li>Proceed with Chapter 1 going through all 24 chapters</li>
 	<li>Do all of the demo programs as you encounter them</li>
 	<li>Memorize all of the terms and definitions</li>
 	<li>Do all lab assignments</li>
 	<li>Prepare answers to all of the problems in the Practice modules</li>
 	<li>At the end of every section, do the Review module</li>
</ol>
<p id="id1169854437868">These is no magic way to learn about computer programming other than to immerse yourself into regular study and <strong>study includes more than casual reading</strong>. To help you keep track of your study, we have included a check off list for the textbook/collection.</p>

<table id="id1169864221866" summary="Table listing the quanitiy of modules in various sections.">
<tbody>
<tr>
<td><strong>Check</strong></td>
<td><strong>Description</strong></td>
<td><strong># Modules</strong></td>
</tr>
<tr>
<td></td>
<td>Pre-Chapter Items</td>
<td>4</td>
</tr>
<tr>
<td></td>
<td>Last four Appendix Items</td>
<td>4</td>
</tr>
<tr>
<td></td>
<td>Chapters 1 to 5</td>
<td>27</td>
</tr>
<tr>
<td></td>
<td>Review Materials for 1 to 5</td>
<td>1</td>
</tr>
<tr>
<td></td>
<td>Chapters 6 to 9</td>
<td>17</td>
</tr>
<tr>
<td></td>
<td>Review Materials for 6 to 9</td>
<td>1</td>
</tr>
<tr>
<td></td>
<td>Chapters 10 to 16</td>
<td>30</td>
</tr>
<tr>
<td></td>
<td>Review Materials for 10 to 16</td>
<td>1</td>
</tr>
<tr>
<td></td>
<td>Chapters 17 to 21</td>
<td>17</td>
</tr>
<tr>
<td></td>
<td>Review Materials for 17 to 21</td>
<td>1</td>
</tr>
<tr>
<td></td>
<td>Chapters 22 to 24</td>
<td>11</td>
</tr>
<tr>
<td></td>
<td>Review Materials for 22 to 24</td>
<td>1</td>
</tr>
<tr>
<td></td>
<td>First three Appendix Items</td>
<td>3</td>
</tr>
<tr>
<td><strong>N/A</strong></td>
<td><strong>Total Modules</strong></td>
<td><strong>118</strong></td>
</tr>
</tbody>
</table>
</section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>28</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 23:16:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 23:16:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[orientation-and-syllabus]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[front-matter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Data Types in C++</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/data-types-in-c-2__trashed/</link>
		<pubDate>Thu, 14 Jun 2018 01:29:25 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=119</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id1164502340833">
<h3>General Discussion</h3>
<p id="id7802186">Our interactions (inputs and outputs) of a program are treated in many languages as a stream of bytes. These bytes represent data that can be interpreted as representing values that we understand. Additionally, within a program we process this data in various ways such as adding them up or sorting them. This data comes in different forms. Examples include: yourname which is a string of characters; your age which is usually an integer; or the amount of money in your pocket which is usually a value measured in dollars and cents (something with a fractional part). A major part of understanding how to design and code programs in centered in understanding the types of data that we want to manipulate and how to manipulate that data.</p>
<p id="id5031045">"A <strong>type</strong> defines a set of values and a set of operations that can be applied on those values. The set of values for each type is known as the domain for that type."<sup id="footnote-ref1"><a href="https://cnx.org/contents/MDgA8wfz@22.2:OuFDQm0F@13/Data-Types-in-C#footnote1">1</a></sup> The four major families of data include:</p>

<ul id="id1164507699965">
 	<li>Nothing</li>
 	<li>Integer</li>
 	<li>Floating-point</li>
 	<li>Complex</li>
</ul>
<p id="id1164502169767">The C++ programming language identifies five data types as standard data types:</p>

<ul id="id1164496985840">
 	<li>Void</li>
 	<li>Boolean</li>
 	<li>Character</li>
 	<li>Integer</li>
 	<li>Floating-point</li>
</ul>
<p id="id3639700">The standard data types and the complex data types within C++ have a series of attributes, which include:</p>

<ul id="id3098795">
 	<li>C++ Reserved or Key Word</li>
 	<li>Domain – the allowed values</li>
 	<li>Signage – do they allow negative numbers or only positive numbers</li>
 	<li>Meaning – i.e. What do they represent</li>
 	<li>Rules of Definition – What special characters indicate the data type</li>
 	<li>Size – in terms of the number of bytes of storage used in the memory</li>
 	<li>Operations Allowed – i.e. Which operators can I use on the data type</li>
</ul>
<p id="id1164506274290">Placing some of the above into a summary table, we get:</p>

<table id="id5814228" summary="">
<tbody>
<tr>
<td>Family</td>
<td>Data Type</td>
<td>Reserved Word</td>
<td>Represents</td>
<td>Standard Type</td>
</tr>
<tr>
<td>Nothing</td>
<td>Null or nothing</td>
<td>void</td>
<td>No data</td>
<td>Yes</td>
</tr>
<tr>
<td>Integer</td>
<td>Boolean</td>
<td>bool</td>
<td>Logical true and false</td>
<td>Yes</td>
</tr>
<tr>
<td>Integer</td>
<td>Character</td>
<td>char</td>
<td>Single characters</td>
<td>Yes</td>
</tr>
<tr>
<td>Integer</td>
<td>Integer</td>
<td>int</td>
<td>Whole numbers</td>
<td>Yes</td>
</tr>
<tr>
<td>Floating Point</td>
<td>Floating Point</td>
<td>float</td>
<td>Fractional numbers</td>
<td>Yes</td>
</tr>
<tr>
<td>Complex</td>
<td>String</td>
<td>string</td>
<td>A sequence (sting them along) of characters</td>
<td>No</td>
</tr>
<tr>
<td>Complex</td>
<td>Array</td>
<td>N/A</td>
<td>A collection of elements of the same data type</td>
<td>No</td>
</tr>
<tr>
<td>Complex</td>
<td>Pointer</td>
<td>N/A</td>
<td>A value that points to a location (an address) within the data area</td>
<td>No</td>
</tr>
</tbody>
</table>
<p id="id1164508439704">The five standard data types usually exist in most programming languages and act or behave similarly from language to language. Most courses of study for a programming course or language will explain the standard data types first. After they are learned, the complex data types are introduced.</p>
<p id="id3486562">The Boolean, character and integer data types are identified as belonging to the Integer Family. These data types are all represented by integer numbers and thus act or behave similarly.</p>

</section><section id="id1164497228772">
<h3>Definitions</h3>
<dl id="fs-id7679280">
 	<dt>data type</dt>
 	<dd id="fs-id7636704">Defines a set of values and a set of operations that can be applied on those values.</dd>
</dl>
<dl id="fs-id1164009087267">
 	<dt>data type families</dt>
 	<dd id="fs-id1164009282911">1) Nothing 2) Integer 3) Floating-Point 4) Complex</dd>
</dl>
<dl id="fs-id1164009285041">
 	<dt>domain</dt>
 	<dd id="fs-id4759706">The set of allowed values for a data type.</dd>
</dl>
<dl id="fs-id7609263">
 	<dt>integer</dt>
 	<dd id="fs-id1164008879842">A data type representing whole numbers.</dd>
</dl>
<dl id="fs-id8603314">
 	<dt>floating point</dt>
 	<dd id="fs-id1164011164575">A data type representing numbers with fractional parts.</dd>
</dl>
</section>
<div>
<h3>Footnotes</h3>
<ul>
 	<li id="footnote1"><a href="https://cnx.org/contents/MDgA8wfz@22.2:OuFDQm0F@13/Data-Types-in-C#footnote-ref1">1</a> <span>Behrouz A. Forouzan and Richard F. Gilberg, <u>Computer Science A Structured Approach using C++ Second Edition</u> (United States of America: Thompson – Brooks/Cole, 2004) 33.</span></li>
</ul>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>119</wp:post_id>
		<wp:post_date><![CDATA[2018-06-14 01:29:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-14 01:29:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[data-types-in-c-2__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1528939898]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[data-types-in-c-2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Arithmetic Assignment Operators</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/arithmetic-assignment-operators__trashed/</link>
		<pubDate>Sat, 16 Jun 2018 16:52:58 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=146</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id45847042">
<h3>Overview of Arithmetic Assignment</h3>
<p id="id46386146">The five <span>arithmetic assignment</span> operators are a form of short hand. Various textbooks call them "compound assignment operators" or "combined assignment operators". Their usage can be explaned in terms of the assignment operator and the arithmetic operators. In the table we will use the variable age and you can assume that it is of integer data type.</p>

<table id="id45453363" summary="">
<tbody>
<tr>
<td>Arithmetic assignment examples:</td>
<td>Equivalent code:</td>
</tr>
<tr>
<td><code>age += 14;</code></td>
<td><code>age = age + 14;</code></td>
</tr>
<tr>
<td><code>age -= 14;</code></td>
<td><code>age = age - 14;</code></td>
</tr>
<tr>
<td><code>age *= 14;</code></td>
<td><code>age = age * 14;</code></td>
</tr>
<tr>
<td><code>age /= 14;</code></td>
<td><code>age = age / 14;</code></td>
</tr>
<tr>
<td><code>age %= 14;</code></td>
<td><code>age = age % 14;</code></td>
</tr>
</tbody>
</table>
</section><section id="id46608166">
<h3>Demonstration Program in C++</h3>
<section id="id46634381">
<h4>Creating a Folder or Sub-Folder for Source Code Files</h4>
<p id="id46472140">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the <span>Bloodshed Dev-C++ 5 compiler/IDE</span> might be named:</p>

<ul id="id46473508">
 	<li>Demo_Programs</li>
</ul>
<p id="id46640298">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id46461740">
<h4>Download the Demo Program</h4>
<p id="id46069550">Download and store the following file(s) to your storage device in the appropriate folder(s). Following the methods of your compiler/IDE, compile and run the program(s). Study the soruce code file(s) in conjunction with other learning materials.</p>
<p id="id45453010">Download from Connexions: <a href="https://cnx.org/resources/763331042be8c588bf61930d1a01fa00e7bf04c2/Demo_Arithmetic_Assignment.cpp">Demo_Arithmetic_Assignment.cpp</a></p>

</section></section>

<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>146</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 16:52:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 16:52:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[arithmetic-assignment-operators__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>13</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1529804849]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[arithmetic-assignment-operators]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Compiler Directives</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/compiler-directives__trashed/</link>
		<pubDate>Sat, 16 Jun 2018 16:59:46 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=158</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id7602378">
<div class="textbox shaded">

Note to Contributors:

Please merge this with the C++ and / or Java Examples pages if it is needed here. Another, perhaps better option would be to split it and merge includes here and move defines to the next chapter and make that part of a data constants page.

</div>
<h2>Discussion</h2>
<p id="id3010656">A <strong>compiler directive</strong> is an instruction to the compiler to complete a task before formally starting to compile the program, thus they are sometimes called pre-processor directives. Among other items, during the pre-processor step the compiler is looking for compiler directives and processes them as they are encountered. After completing the tasks as directed, the compiler proceeds to its second step where it checks for syntax errors (violations of the rules of the language) and converts the source code into an object code that contains machine language instructions, a data area, and a list of items to be resolved when he object file is linked to other object files.</p>
<p id="id6194474">Within C++ the pound symbol or # as the first character of a line indicates that the next word is a directive (or command word) to be evaluated. The two most common compiler directives are:</p>

<ol id="id7809345" type="1">
 	<li><strong>include</strong> – with the item following include being the name of a file that is to be inserted at that place in the file. The files are often called "Header Files" because the include directive is normally inserted toward the top of the file (at the head) as one of the first items.</li>
 	<li><strong>define</strong> – with the item followed by an identifier name and a value. This identifier name and value is stored by the compiler and when it encounters the identifier name in the program it substitutes the value for the identifier name.</li>
</ol>
<p id="id4074672">In the following example the include directive is inserting a file that contains code from the Input-Output Stream library. This file contains necessary code to use cout and cin for sending data to the monitor or getting data from the keyboard.</p>
<p id="id3499118"><code>#include &lt;iostream&gt;</code></p>
<p id="id4857489">In the next example the define directive is being used to handle a constant (called a defined constant).</p>

<div id="fs-id3137542" class="ui-has-child-title"><header>
<div>Subtituting PI</div>
</header><section>
<pre id="fs-id2682630"><code>
#define PI 3.14159
....Later on in the program when it encounters PI
....it will replace or substitute PI with the value 3.14159
....For example:
area_circle = radius * radius * PI;
    would become:
area_circle = radius * radius * 3.14159;</code></pre>
</section></div>
<p id="id7261086">Of note, compiler directives in C++ do not have a semi-colon after them. Within C++ programming instructions or statements end with a semi-colon, but not compiler directives.</p>

</section><section id="id7471593">
<h2>Key Terms</h2>
<dl id="fs-id3834973">
 	<dt>compiler directive</dt>
 	<dd id="fs-id8798639">An instruction to the compiler to complete a task before formally starting to compile the program.</dd>
</dl>
<dl id="fs-id3695301">
 	<dt>include</dt>
 	<dd id="fs-id2847115">A compiler directive to insert the contents of a file into the program.</dd>
</dl>
</section>
<h2>References</h2>
<ul>
 	<li><a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">cnx.org: Programming Fundamentals - A Modular Structured Approach using C++</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>158</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 16:59:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 16:59:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[compiler-directives__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>40</wp:post_parent>
		<wp:menu_order>8</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="klbusbee"><![CDATA[Kenneth Leroy Busbee]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[klbusbee]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1529770308]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[compiler-directives]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A Note to Contributors</title>
		<link>https://press.rebus.community/programmingfundamentals/front-matter/a-note-to-contributors/</link>
		<pubDate>Sat, 16 Jun 2018 19:02:10 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=front-matter&#038;p=350</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="textbox shaded">

Welcome to Programming Fundamentals - A Modular Structured Approach, 2nd Edition!

If you teach an introductory programming course in any programming language, or you are a student who has recently completed an introductory programming course, your contributions are needed to make this free textbook as widely inclusive, accessible, and available as possible!

The original content for this book was created by Kenneth Leroy Busbee and written specifically for his course based on C++. The goal for this second edition is to make it programming-language neutral, so that it may serve as an introductory programming textbook for students using any of a variety of programming languages, including C++, C#, Java, JavaScript, Python, and others.

Programming concepts are introduced generically, with logic demonstrated in pseudocode and flowchart form, followed by examples for different programming languages. Emphasis is placed on a modular, structured approach that supports reuse, maintenance, and self-documenting code.

To maintain a change history for CC-BY licensing attribution, Kenneth Leroy Busbee's original content was copied from <a href="https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17">https://cnx.org/contents/MDgA8wfz@22.2:YzfkjC2r@17</a> as is, and then edited for sequence, content, and programming language support.

As you begin to review and contribute to this edition, please keep the audience in mind. If something is missing, think about whether that concept applies to programming in general or only to certain programming languages, and whether it is a fundamental, first-semester programming concept or something better addressed in a more advanced textbook.

Make heavy use of Comments at the bottom of each page to help other contributors understand how to improve the page content from your perspective.

Thank you for being willing to share your expertise to make fundamental programming concepts free, accessible, and available to all!

Dave Braunschweig

</div>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>350</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 19:02:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 19:02:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[a-note-to-contributors]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[front-matter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="dbraunsc"><![CDATA[Dave Braunschweig]]></category>
		<category domain="front-matter-type" nicename="disclaimer"><![CDATA[Disclaimer]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Test</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/test__trashed/</link>
		<pubDate>Sat, 16 Jun 2018 20:24:17 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=472</guid>
		<description></description>
		<content:encoded><![CDATA[Test page.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>472</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 20:24:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 20:24:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[test__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>334</wp:post_parent>
		<wp:menu_order>8</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1529181078]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[test]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_comments_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:2;s:1:"1";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[Dave Braunschweig]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[dbraunsc@harpercollege.edu]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.harpercollege.edu/~dbraunsc</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[98.213.32.53]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-06-16 20:24:31]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-06-16 20:24:31]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Testing comments.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[post-trashed]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>181</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Hello World</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/hello-world/</link>
		<pubDate>Wed, 20 Jun 2018 02:50:53 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=709</guid>
		<description></description>
		<content:encoded><![CDATA[<h2><img class="alignright" src="https://upload.wikimedia.org/wikipedia/commons/5/54/Hello_world.png" />Overview</h2>
A "<strong>Hello, world</strong>!" program is a computer program that outputs or displays "Hello, world!" to a user. Being a very simple program in most programming languages, it is often used to illustrate the basic syntax of a programming language for a working program, and as such is often the very first program people write.[footnote]<a href="https://en.wikipedia.org/wiki/&quot;Hello,_World!&quot;_program">Wikipedia: "Hello, World!" program</a>[/footnote]
<h2>Discussion</h2>
A "Hello, world!" program is traditionally used to introduce novice programmers to a programming language. "Hello, world!" is also traditionally used in a sanity test to make sure that a computer language is correctly installed, and that the operator understands how to use it.[footnote]<a href="https://en.wikipedia.org/wiki/&quot;Hello,_World!&quot;_program">Wikipedia: "Hello, World!" program</a>[/footnote]

The tradition of using the phrase "Hello, world!" as a test message was influenced by an example program in the seminal book <em>The C Programming Language</em>. The example program from that book prints "hello, world" (without capital letters or exclamation mark), and was inherited from a 1974 Bell Laboratories internal memorandum by Brian Kernighan.[footnote]<a href="https://en.wikipedia.org/wiki/&quot;Hello,_World!&quot;_program">Wikipedia: "Hello, World!" program</a>[/footnote]

In addition to displaying "Hello, world!", a "Hello, world!" program might include comments. A <strong>comment</strong> is a programmer-readable explanation or annotation in the source code of a computer program. They are added with the purpose of making the source code easier for humans to understand, and are generally ignored by compilers and interpreters. The syntax of comments in various programming languages varies considerably.[footnote]<a href="https://en.wikipedia.org/wiki/Comment_(computer_programming)">Wikipedia: Comment (computer programming</a>)[/footnote]
<h2>Pseudocode</h2>

<hr />

<pre>Function Main
    ... This program displays "Hello world!"
    Output "Hello world!"
End
</pre>

<hr />

Each code element represents:[footnote]<a href="https://en.wikibooks.org/wiki/Programming_Fundamentals/Hello_World">Wikibooks: Programming Fundamentals/Hello World</a>[/footnote]
<ul>
 	<li><code>Function Main</code> begins the main function</li>
 	<li><code>...</code> begins a comment</li>
 	<li><code>Output</code> indicates the following value(s) will be displayed or printed</li>
 	<li><code>"Hello world!"</code> is the literal string to be displayed</li>
 	<li><code>End</code> ends a block of code</li>
</ul>
<h2>Flowchart</h2>
<img style="height: 67%;width: 67%" src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/0e/Flowgorithm_Hello_World_with_Comments.svg/800px-Flowgorithm_Hello_World_with_Comments.svg.png" alt="File:Flowgorithm Hello World.svg" />
<h2>Example Code</h2>
The following pages provide examples of "Hello, world!" programs in different programming languages. Each page includes an explanation of the code elements that comprise the program and links to IDEs you may use to test the program.
<h2><strong>Key Terms</strong></h2>
<dl>
 	<dt>comment</dt>
 	<dd>A programmer-readable explanation or annotation in the source code of a computer program.</dd>
</dl>
<h2>References</h2>
<ul>
 	<li><a href="https://en.wikiversity.org/wiki/Computer_Programming">Wikiversity: Computer Programming</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>709</wp:post_id>
		<wp:post_date><![CDATA[2018-06-20 02:50:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-20 02:50:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[hello-world]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>40</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="dbraunsc"><![CDATA[Dave Braunschweig]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A Note To Readers</title>
		<link>https://press.rebus.community/programmingfundamentals/front-matter/a-note-to-readers/</link>
		<pubDate>Thu, 21 Jun 2018 00:39:52 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=front-matter&#038;p=714</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="textbox shaded">

Welcome to Programming Fundamentals – A Modular Structured Approach, 2nd Edition!

Please note that this textbook edition is a work in progress, with a goal targeting pre-release by July 31, 2018. We are currently seeking contributors and peer reviewers for all programming languages.

You are welcome to read through and add comments at the bottom of the page wherever you have suggestions or concerns regarding content or approach. All suggestions will be reviewed and considered.

If you are looking for a specific programming language that does not have examples included yet, please let us know.

Dave Braunschweig

</div>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>714</wp:post_id>
		<wp:post_date><![CDATA[2018-06-21 00:39:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-21 00:39:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[a-note-to-readers]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[front-matter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="dbraunsc"><![CDATA[Dave Braunschweig]]></category>
		<category domain="front-matter-type" nicename="disclaimer"><![CDATA[Disclaimer]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JavaScript Examples</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/javascript-examples-2/</link>
		<pubDate>Sat, 23 Jun 2018 15:43:48 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=794</guid>
		<description></description>
		<content:encoded><![CDATA[<h2><img class="alignright" style="width: 25%;height: 25%;margin-top: -40px;margin-left: -20px" src="https://upload.wikimedia.org/wikipedia/commons/thumb/c/ce/Unofficial_JavaScript_logo.svg/600px-Unofficial_JavaScript_logo.svg.png" alt="File:Unofficial JavaScript logo.svg" />Overview</h2>
<strong>JavaScript</strong>, often abbreviated as JS, is a high-level, interpreted programming language. Alongside HTML and CSS, JavaScript is one of the three core technologies of the World Wide Web. JavaScript enables interactive web pages and thus is an essential part of web applications. The vast majority of websites use it, and all major web browsers have a dedicated JavaScript engine to execute it.[footnote]<a href="https://en.wikipedia.org/wiki/JavaScript">Wikipedia: JavaScript</a>[/footnote]

JavaScript is one of the most popular current programming languages[footnote]<a href="https://www.tiobe.com/tiobe-index/">TIOBE: Index</a>[/footnote], and is the primary programming language for front-end web development.
<h2>Hello World</h2>

<hr />

<pre>// This script displays "Hello world!".
//
// References:
// http://javascript.info/hello-world
// https://www.w3schools.com/js/js_output.asp
// http://progopedia.com/example/hello-world/114/

output("Hello world!")

function output(text) {
  if (typeof console === 'object') {
    console.log(text);
  }
  else if (typeof document === 'object') {
    document.write(text);
  }
  else {
    print(text);
  }
}
</pre>

<hr />

Each code element represents:[footnote]<a href="https://en.wikibooks.org/wiki/Programming_Fundamentals/Hello_World">Wikibooks: Programming Fundamentals/Hello World</a>[/footnote]
<ul>
 	<li><code>//</code> begins a comment</li>
 	<li><code>output()</code> calls the output function</li>
 	<li><code>"Hello world!"</code> is the literal string to be displayed</li>
 	<li><code>function output(text)</code> defines a output function that checks the JavaScript environment and writes to the console, the current document, or standard output as appropriate.</li>
</ul>
Note: <code>window.alert("Hello world!")</code> is another approach, which may be used to display an alert box on a web page.
<h2>JavaScript IDEs</h2>
There are many free cloud-based and local IDEs available to begin coding in JavaScript. Check with your instructor or do your own research for recommendations.
<h3>Cloud-Based IDEs</h3>
<ul>
 	<li><a href="http://math.chapman.edu/~jipsen/js/">Chapman.edu: Online JavaScript Interpreter</a></li>
 	<li><a href="https://www.codechef.com/ide">CodeChef</a></li>
 	<li><a href="https://www.onlinegdb.com/">GDB Online</a></li>
 	<li><a href="http://ideone.com">Ideone</a></li>
 	<li><a href="https://paiza.io/projects/new">paiza.IO</a></li>
 	<li><a href="http://pythontutor.com/visualize.html#code=&amp;py=js">PythonTutor</a></li>
 	<li><a href="https://repl.it/languages/python3">repl.it</a></li>
</ul>
<h3>Local IDEs</h3>
<ul>
 	<li><a href="https://en.wikipedia.org/wiki/Brackets_(text_editor)">Brackets</a></li>
 	<li><a href="https://en.wikipedia.org/wiki/Visual_Studio_Code">Visual Studio Code</a></li>
</ul>
<h2>References</h2>
<ul>
 	<li><a href="https://en.wikiversity.org/wiki/Computer_Programming">Wikiversity: Computer Programming</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>794</wp:post_id>
		<wp:post_date><![CDATA[2018-06-23 15:43:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-23 15:43:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[javascript-examples-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>40</wp:post_parent>
		<wp:menu_order>7</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="dbraunsc"><![CDATA[Dave Braunschweig]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[javascript-examples]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[javascript-examples-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Nothing Data Type</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/nothing-data-type/</link>
		<pubDate>Sat, 23 Jun 2018 21:42:14 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=827</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Overview</h2>
A <strong>nothing data type</strong> is a feature of some programming languages which allow the setting of a special value to indicate a missing or uninitialized value rather than using the value 0 (zero).[footnote]<a href="https://en.wikipedia.org/wiki/Nullable_type">Wikipedia: Nullable type</a>[/footnote]
<h2>Discussion</h2>
Most programming languages support the use of a reserved word or words to represent missing, uninitialized, or invalid values.
<table>
<tbody>
<tr>
<th>Language</th>
<th>Reserved Word</th>
<th>Meaning</th>
</tr>
<tr>
<td>C++</td>
<td><code>null</code></td>
<td>no value</td>
</tr>
<tr>
<td>C#</td>
<td><code>null</code></td>
<td>no value</td>
</tr>
<tr>
<td>Java</td>
<td><code>null</code></td>
<td>no value</td>
</tr>
<tr>
<td>JavaScript</td>
<td><code>null</code></td>
<td>no value</td>
</tr>
<tr>
<td>JavaScript</td>
<td><code>NaN</code></td>
<td>Not a Number</td>
</tr>
<tr>
<td>Python</td>
<td><code>None</code></td>
<td>no value</td>
</tr>
</tbody>
</table>
<h2>Key Terms</h2>
<dl>
 	<dt>NaN</dt>
 	<dd>Reserved word used to indicate a non-numeric value in a numeric variable.</dd>
</dl>
<dl>
 	<dt>null</dt>
 	<dd>Reserved word used to represent a missing value or invalid value.</dd>
</dl>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>827</wp:post_id>
		<wp:post_date><![CDATA[2018-06-23 21:42:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-23 21:42:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[nothing-data-type]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>8</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="dbraunsc"><![CDATA[Dave Braunschweig]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>C# Examples</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/csharp-examples-2/</link>
		<pubDate>Sun, 24 Jun 2018 14:09:54 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=860</guid>
		<description></description>
		<content:encoded><![CDATA[<h2><img class="alignright" style="width: 20%;height: 20%" src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/0d/C_Sharp_wordmark.svg/464px-C_Sharp_wordmark.svg.png" alt="File:C Sharp wordmark.svg" />Overview</h2>
C# is a general-purpose, object-oriented programming language encompassing strong typing, imperative, declarative, functional, generic, object-oriented (class-based), and component-oriented programming disciplines. It was developed around 2000 by Microsoft within its .NET initiative and later approved as a standard by Ecma (ECMA-334) and ISO (ISO/IEC 23270:2006). C# is one of the programming languages designed for the Common Language Infrastructure.

C# is one of the most popular current programming languages[footnote]<a href="https://www.tiobe.com/tiobe-index/">TIOBE: Index</a>[/footnote], is the primary language for Windows application development, and is often used in computer science and gaming courses.
<h2>Hello World</h2>

<hr />

<pre>// This program displays "Hello world!"
//
// References:
// https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/hello-world-your-first-program

public class Hello
{
    public static void Main()
    {
        System.Console.WriteLine("Hello world!");
    }
}
</pre>

<hr />

Each code element represents:[footnote]<a href="https://en.wikibooks.org/wiki/Programming_Fundamentals/Hello_World">Wikibooks: Programming Fundamentals/Hello World</a>[/footnote]
<ul>
 	<li><code>//</code> begins a comment</li>
 	<li><code>public class Hello</code> begins the Hello World program</li>
 	<li><code>{</code> begins a block of code</li>
 	<li><code>public static void Main()</code> begins the main function</li>
 	<li><code>System.Console.WriteLine()</code> calls the standard output write line function</li>
 	<li><code>"Hello world!"</code> is the literal string to be displayed</li>
 	<li><code>;</code> ends each line of C# code</li>
 	<li><code>}</code> ends a block of code</li>
</ul>
<h2>C# IDEs</h2>
There are many free cloud-based and local IDEs available to begin coding in C#. Check with your instructor or do your own research for recommendations.
<h3>Cloud-Based IDEs</h3>
<ul>
 	<li><a href="https://www.codechef.com/ide">CodeChef</a></li>
 	<li><a href="https://csharppad.com/">C# Pad</a></li>
 	<li><a href="https://dotnetfiddle.net/">.NET Fiddle</a></li>
 	<li><a href="http://ideone.com">Ideone</a></li>
 	<li><a href="https://paiza.io/projects/new">paiza.IO</a></li>
 	<li><a href="http://rextester.com/l/csharp_online_compiler">Rextester</a></li>
 	<li><a href="https://repl.it/languages/java">repl.it</a></li>
 	<li><a href="https://www.tutorialspoint.com/compile_java_online.php">TutorialsPoint</a></li>
</ul>
<h3>Local IDEs</h3>
<ul>
 	<li><a href="https://en.wikipedia.org/wiki/Microsoft_Visual_Studio">Microsoft Visual Studio</a></li>
 	<li><a href="https://en.wikipedia.org/wiki/Visual_Studio_Code">Visual Studio Code</a></li>
</ul>
<h2>References</h2>
<ul>
 	<li><a href="https://en.wikiversity.org/wiki/Computer_Programming">Wikiversity: Computer Programming</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>860</wp:post_id>
		<wp:post_date><![CDATA[2018-06-24 14:09:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-24 14:09:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[csharp-examples-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>40</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="dbraunsc"><![CDATA[Dave Braunschweig]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[c-examples-2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[csharp-examples-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>C++ Examples</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/cpp-examples-3/</link>
		<pubDate>Sun, 24 Jun 2018 20:09:51 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=884</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Data Types</h2>
<pre>// This program demonstrates variables, literal constants, and data types.

#include &lt;iostream&gt;
#include &lt;sstream&gt;

using namespace std;

int main() {
    int i;
    double d;
    string s;
    bool b;
    
    i = 1234567890;
    d = 1.23456789012345;
    s = "string";
    b = true;
    cout &lt;&lt; "Integer i = " &lt;&lt; i &lt;&lt; endl;
    cout &lt;&lt; "Double d = " &lt;&lt; d &lt;&lt; endl;
    cout &lt;&lt; "String s = " &lt;&lt; s &lt;&lt; endl;
    cout &lt;&lt; "Boolean b = " &lt;&lt; b &lt;&lt; endl;
    return 0;
}

Output:
Integer i = 1234567890
Real r = 1.23457
String s = string
Boolean b = 1
</pre>
Each code element represents:
<ul>
 	<li><code>//</code> begins a comment</li>
 	<li><code>#include &lt;iostream&gt;</code> includes standard input and output streams<code></code></li>
 	<li><code>#include &lt;sstream&gt;</code> includes standard string streams<code></code></li>
 	<li><code>using namespace std</code> allows reference to <code>string</code>, <code>cout</code>, and <code>endl</code> without writing <code>std::string</code>, <code>std::cout</code>, and <code>std::endl</code>.</li>
 	<li><code>int main()</code> begins the main function, which returns an integer value</li>
 	<li><code>{</code> begins a block of code</li>
 	<li><code>int i</code> defines an integer variable named i</li>
 	<li><code>;</code> ends each line of C++ code</li>
 	<li><code>double d</code> defines a double floating-point variable named d</li>
 	<li><code>string s</code> defines a string variable named s</li>
 	<li><code>bool b</code> defines a Boolean variable named b</li>
 	<li><code>i = , d = , s =, b =</code> assign literal values to the corresponding variables</li>
 	<li><code>cout</code> is standard output</li>
 	<li><code>&lt;&lt;</code> directs the next element to standard output</li>
 	<li><code>endl</code> ends the current line</li>
 	<li><code>return 0</code> returns the value 0 from main, indicating the main function completed successfully</li>
 	<li><code>}</code> ends a block of code</li>
</ul>
<h2>Arithmetic</h2>
<pre>// This program demonstrates arithmetic operations.

#include &lt;iostream&gt;
#include &lt;sstream&gt;

using namespace std;

int main() {
    int a;
    int b;
    
    a = 3;
    b = 2;
    
    cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;
    cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;
    cout &lt;&lt; "a + b = " &lt;&lt; a + b &lt;&lt; endl;
    cout &lt;&lt; "a - b = " &lt;&lt; a - b &lt;&lt; endl;
    cout &lt;&lt; "a * b = " &lt;&lt; a * b &lt;&lt; endl;
    cout &lt;&lt; "a / b = " &lt;&lt; a / b &lt;&lt; endl;
    cout &lt;&lt; "a % b = " &lt;&lt; a + b &lt;&lt; endl;
    return 0;
}

Output:
a = 3
b = 2
a + b = 5
a - b = 1
a * b = 6
a / b = 1
a % b = 5
</pre>
Each new code element represents:
<ul>
 	<li><code>+, -, *, /, and %</code> represent addition, subtraction, multiplication, division, and modulus, respectively.</li>
</ul>
<h2>Temperature</h2>
<pre>// This program converts an input Fahrenheit temperature to Celsius.
//
// References:
//     https://www.mathsisfun.com/temperature-conversion.html
//     https://en.wikibooks.org/wiki/C_Sharp_Programming

#include &lt;iostream&gt;

using namespace std;

int main() {
    double fahrenheit;
    double celsius;
    
    cout &lt;&lt; "Enter Fahrenheit temperature:" &lt;&lt; endl;
    cin &gt;&gt; fahrenheit;

    celsius = (fahrenheit - 32) * 5 / 9;

    cout &lt;&lt; fahrenheit &lt;&lt; "° Fahrenheit is " &lt;&lt; celsius &lt;&lt; "° Celsius" &lt;&lt; endl;

    return 0;
}

Output:
Enter Fahrenheit temperature:
 100
100° Fahrenheit is 37.7778° Celsius
</pre>
Each new code element represents:
<ul>
 	<li><code>cin &gt;&gt; fahrenheit</code> reads the next integer from standard input and assigns the value to the fahrenheit variable</li>
</ul>
<h2>References</h2>
<ul>
 	<li><a href="https://en.wikiversity.org/wiki/Computer_Programming">Wikiversity: Computer Programming</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>884</wp:post_id>
		<wp:post_date><![CDATA[2018-06-24 20:09:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-24 20:09:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cpp-examples-3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>16</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="dbraunsc"><![CDATA[Dave Braunschweig]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[c-examples-3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>C# Examples</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/csharp-examples-3/</link>
		<pubDate>Sun, 24 Jun 2018 20:10:14 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=886</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Data Types</h2>
<pre>// This program demonstrates variables, literal constants, and data types.

using System;

public class DataTypes
{
    public static void Main(string[] args)
    {
        int i;
        double d;
        string s;
        Boolean b;
        
        i = 1234567890;
        d = 1.23456789012345;
        s = "string";
        b = true;

        Console.WriteLine("Integer i = " + i);
        Console.WriteLine("Double d = " + d);
        Console.WriteLine("String s = " + s);
        Console.WriteLine("Boolean b = " + b);
    }
}

Output:
Integer i = 1234567890
Double d = 1.23456789012345
String s = string
Boolean b = True
</pre>
Each code element represents:
<ul>
 	<li><code>//</code> begins a comment</li>
 	<li><code>using System</code> allows references to <code>Boolean</code> and <code>Console</code> without writing <code>System.Boolean</code> and <code>System.Console</code></li>
 	<li><code>public class DataTypes</code> begins the Data Types program</li>
 	<li><code>{</code> begins a block of code</li>
 	<li><code>public static void Main()</code> begins the main function</li>
 	<li><code>int i</code> defines an integer variable named i</li>
 	<li><code>;</code> ends each line of C# code</li>
 	<li><code>double d</code> defines a double floating-point variable named d</li>
 	<li><code>string s</code> defines a string variable named s</li>
 	<li><code>Boolean b</code> defines a Boolean variable named b</li>
 	<li><code>i = , d = , s =, b =</code> assign literal values to the corresponding variables</li>
 	<li><code>Console.WriteLine()</code> calls the standard output write line function</li>
 	<li><code>}</code> ends a block of code</li>
</ul>
<h2>Arithmetic</h2>
<pre>// This program demonstrates arithmetic operations.

using System;

public class Arithmetic
{
    public static void Main(string[] args)
    {
        int a;
        int b;
        
        a = 3;
        b = 2;

        Console.WriteLine("a = " + a);
        Console.WriteLine("b = " + b);
        Console.WriteLine("a + b = " + (a + b));
        Console.WriteLine("a - b = " + (a - b));
        Console.WriteLine("a * b = " + a * b);
        Console.WriteLine("a / b = " + a / b);
        Console.WriteLine("a % b = " + (a + b));
    }
}

Output:
a = 3
b = 2
a + b = 5
a - b = 1
a * b = 6
a / b = 1
a % b = 5
</pre>
Each new code element represents:
<ul>
 	<li><code>+, -, *, /, and %</code> represent addition, subtraction, multiplication, division, and modulus, respectively.</li>
</ul>
<h2>Temperature</h2>
<pre>// This program converts an input Fahrenheit temperature to Celsius.

using System;

public class Temperature
{
    public static void Main(string[] args)
    {
        double fahrenheit;
        double celsius;
        
        Console.WriteLine("Enter Fahrenheit temperature:");
        fahrenheit = Convert.ToDouble(Console.ReadLine());

        celsius = (fahrenheit - 32) * 5 / 9;

        Console.WriteLine(
            fahrenheit.ToString() + "° Fahrenheit is " + 
            celsius.ToString() + "° Celsius" + "\n");
    }
}

Output:
Enter Fahrenheit temperature:
 100
100° Fahrenheit is 37.7777777777778° Celsius
</pre>
Each new code element represents:
<ul>
 	<li><code>Console.ReadLine()</code> reads the next line from standard input</li>
 	<li><code>Convert.ToDouble</code> converts the input to a double floating-point value</li>
</ul>
<h2>References</h2>
<ul>
 	<li><a href="https://en.wikiversity.org/wiki/Computer_Programming">Wikiversity: Computer Programming</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>886</wp:post_id>
		<wp:post_date><![CDATA[2018-06-24 20:10:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-24 20:10:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[csharp-examples-3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>17</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="dbraunsc"><![CDATA[Dave Braunschweig]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[c-examples-4]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java Examples</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/java-examples-3/</link>
		<pubDate>Sun, 24 Jun 2018 20:10:43 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=888</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>888</wp:post_id>
		<wp:post_date><![CDATA[2018-06-24 20:10:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-24 20:10:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[java-examples-3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>18</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="dbraunsc"><![CDATA[Dave Braunschweig]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[java-examples-2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JavaScript Examples</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/javascript-examples-3/</link>
		<pubDate>Sun, 24 Jun 2018 20:11:12 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=890</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>890</wp:post_id>
		<wp:post_date><![CDATA[2018-06-24 20:11:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-24 20:11:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[javascript-examples-3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>19</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="dbraunsc"><![CDATA[Dave Braunschweig]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[javascript-examples-2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Python Examples</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/python-examples-3/</link>
		<pubDate>Sun, 24 Jun 2018 20:11:38 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=892</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>892</wp:post_id>
		<wp:post_date><![CDATA[2018-06-24 20:11:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-24 20:11:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[python-examples-3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>20</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="dbraunsc"><![CDATA[Dave Braunschweig]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[python-examples-2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Input-Process-Output Model</title>
		<link>https://press.rebus.community/programmingfundamentals/chapter/input-process-output-model/</link>
		<pubDate>Mon, 25 Jun 2018 02:02:31 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=chapter&#038;p=908</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Overview</h2>
The <strong>input–process–output (IPO) model</strong> is a widely used approach in systems analysis and software engineering for describing the structure of an information processing program or other process. Many introductory programming and systems analysis texts introduce this as the most basic structure for describing a process.[footnote]<a href="https://en.wikipedia.org/wiki/IPO_model">Wikipedia: IPO model</a>[/footnote]
<h2>Discussion</h2>
A computer program or any other sort of process using the input-process-output model receives inputs from a user or other source, does some computations on the inputs, and returns the results of the computations. The system divides the work into three categories:[footnote]<a href="https://en.wikipedia.org/wiki/IPO_model">Wikipedia: IPO model</a>[/footnote]
<ul>
 	<li>A requirement from the environment (input)</li>
 	<li>A computation based on the requirement (process)</li>
 	<li>A provision for the environment (output)</li>
</ul>
For example, a program might be written to convert Fahrenheit temperatures into Celsius temperatures. Following the IPO model, the program must:
<ul>
 	<li>Ask the user for the Fahrenheit temperature (input)</li>
 	<li>Perform a calculation to convert the Fahrenheit temperature into the corresponding Celsius temperature (process)</li>
 	<li>Display the Celsius temperature (output)</li>
</ul>
<h2>Pseudocode</h2>
<pre>Function Main
    ... This program converts an input Fahrenheit temperature to Celsius.

    Declare Real fahrenheit
    Declare Real celsius
    
    Output "Enter Fahrenheit temperature:"
    Input fahrenheit

    Assign celsius = (fahrenheit - 32) * 5 / 9

    Output fahrenheit &amp; "° Fahrenheit is " &amp; celsius &amp; "° Celsius"
End

Output:
Enter Fahrenheit temperature:
100
100° Fahrenheit is 37.7777777777778° Celsius
</pre>
<h2>Flowchart</h2>
<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/67/Flowgorithm_Input_Process_Output.svg/560px-Flowgorithm_Input_Process_Output.svg.png" alt="File:Flowgorithm Input Process Output.svg" />
<h2>References</h2>
<ul>
 	<li><a href="https://en.wikiversity.org/wiki/Computer_Programming">Wikiversity: Computer Programming</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>908</wp:post_id>
		<wp:post_date><![CDATA[2018-06-25 02:02:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-25 02:02:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[input-process-output-model]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>36</wp:post_parent>
		<wp:menu_order>15</wp:menu_order>
		<wp:post_type><![CDATA[chapter]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="contributor" nicename="dbraunsc"><![CDATA[Dave Braunschweig]]></category>
		<category domain="chapter-type" nicename="numberless"><![CDATA[Numberless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_show_title]]></wp:meta_key>
			<wp:meta_value><![CDATA[on]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[pb_authors]]></wp:meta_key>
			<wp:meta_value><![CDATA[dbraunsc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Introduction to Programming</title>
		<link>https://press.rebus.community/programmingfundamentals/part/introduction-to-programming/</link>
		<pubDate>Wed, 13 Jun 2018 15:21:53 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/2018/06/13/main-body/</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="textbox shaded">

Note to Contributors:

We'll need to decide what to do with each chapter introduction. A chapter overview and learning objectives might be nice. For now, I've just listed the module titles contained in the chapter.

Also, please note Pressbooks terminology. What we might think of as a chapter is called a Part. What we might think of as a module or subchapter item is called a Chapter.

</div>
<ul>
 	<li>Systems Development Life Cycle</li>
 	<li>Program Design</li>
 	<li>Pseudocode</li>
 	<li>Flowcharting</li>
 	<li>Testing</li>
 	<li>Practice</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 15:21:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 15:21:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[introduction-to-programming]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Authors</title>
		<link>https://press.rebus.community/programmingfundamentals/authors/</link>
		<pubDate>Wed, 13 Jun 2018 15:21:54 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/authors/</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- Here be dragons. -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 15:21:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 15:21:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[authors]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
	</item>
	<item>
		<title>Cover</title>
		<link>https://press.rebus.community/programmingfundamentals/</link>
		<pubDate>Wed, 13 Jun 2018 15:21:54 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/cover/</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- Here be dragons. -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>8</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 15:21:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 15:21:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cover]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
	</item>
	<item>
		<title>Table of Contents</title>
		<link>https://press.rebus.community/programmingfundamentals/table-of-contents/</link>
		<pubDate>Wed, 13 Jun 2018 15:21:54 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/table-of-contents/</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- Here be dragons. -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>9</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 15:21:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 15:21:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[table-of-contents]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
	</item>
	<item>
		<title>About</title>
		<link>https://press.rebus.community/programmingfundamentals/about/</link>
		<pubDate>Wed, 13 Jun 2018 15:21:54 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/about/</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- Here be dragons. -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 15:21:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 15:21:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[about]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
	</item>
	<item>
		<title>Buy</title>
		<link>https://press.rebus.community/programmingfundamentals/buy/</link>
		<pubDate>Wed, 13 Jun 2018 15:21:54 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/buy/</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- Here be dragons. -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>11</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 15:21:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 15:21:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[buy]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
	</item>
	<item>
		<title>Access Denied</title>
		<link>https://press.rebus.community/programmingfundamentals/access-denied/</link>
		<pubDate>Wed, 13 Jun 2018 15:21:54 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/access-denied/</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- Here be dragons. -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 15:21:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 15:21:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[access-denied]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
	</item>
	<item>
		<title>Data and Operators</title>
		<link>https://press.rebus.community/programmingfundamentals/part/data-and-operators/</link>
		<pubDate>Wed, 13 Jun 2018 23:33:52 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=part&#038;p=36</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
 	<li>Constants and Variables</li>
 	<li>Identifier Names</li>
 	<li>Data Types</li>
 	<li>Integer Data Type</li>
 	<li>Floating-Point Data Type</li>
 	<li>String Data Type</li>
 	<li>Boolean Data Type</li>
 	<li>Nothing Data Type</li>
 	<li>Data Manipulation</li>
 	<li>Assignment Operator</li>
 	<li>Arithmetic Operator</li>
 	<li>Integer Division and Modulus</li>
 	<li>Lvalue and Rvalue</li>
 	<li>Data Type Conversions</li>
 	<li>Examples</li>
 	<li>Practice</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>36</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 23:33:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 23:33:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[data-and-operators]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Integrated Development Environment</title>
		<link>https://press.rebus.community/programmingfundamentals/part/integrated-development-environment/</link>
		<pubDate>Wed, 13 Jun 2018 23:37:08 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=part&#038;p=40</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
 	<li>Integrated Development Environment</li>
 	<li>Standard Input and Output</li>
 	<li>Hello World</li>
 	<li>C++ Examples</li>
 	<li>C# Examples</li>
 	<li>Java Examples</li>
 	<li>JavaScript Examples</li>
 	<li>Python Examples</li>
 	<li>Practice</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>40</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 23:37:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 23:37:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[integrated-development-environment]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Functions</title>
		<link>https://press.rebus.community/programmingfundamentals/part/functions/</link>
		<pubDate>Wed, 13 Jun 2018 23:38:20 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=part&#038;p=42</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
 	<li>Pseudocode Examples for Functions</li>
 	<li>Hierarchy or Structure Chart</li>
 	<li>Program Control Functions</li>
 	<li>Specific Task Functions</li>
 	<li>Standard Libraries</li>
 	<li>Global vs Local Data Storage</li>
 	<li>Void Data Type</li>
 	<li>Documentation and Making Source Code Readable</li>
 	<li>Using a Header File for User Defined Specific Task Functions</li>
 	<li>Practice</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>42</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 23:38:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 23:38:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[functions]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Conditions</title>
		<link>https://press.rebus.community/programmingfundamentals/part/conditions/</link>
		<pubDate>Wed, 13 Jun 2018 23:42:08 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=part&#038;p=50</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
 	<li>Structured Programming</li>
 	<li>Pseudocode Examples for Control Structures</li>
 	<li>Flowcharting</li>
 	<li>If Then Else</li>
 	<li>Boolean Data Type</li>
 	<li>Relational Operators</li>
 	<li>Compound Statement</li>
 	<li>Nested If Then Else</li>
 	<li>Logical Operators</li>
 	<li>Case Control Structure</li>
 	<li>Branching Control Structures</li>
 	<li>Practice</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>50</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 23:42:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 23:42:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[conditions]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Loops</title>
		<link>https://press.rebus.community/programmingfundamentals/part/loops/</link>
		<pubDate>Wed, 13 Jun 2018 23:44:32 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=part&#038;p=56</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
 	<li>Do While Loop</li>
 	<li>Flag Concept</li>
 	<li>Assignment vs Equality within C++</li>
 	<li>Repeat Until Loop</li>
 	<li>Increment and Decrement Operators</li>
 	<li>While Loop</li>
 	<li>For Loop</li>
 	<li>Circular Nature of the Integer Data Type Family</li>
 	<li>Formatting Output</li>
 	<li>Nested For Loops</li>
 	<li>Practice</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>56</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 23:44:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 23:44:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[loops]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>6</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Strings and Files</title>
		<link>https://press.rebus.community/programmingfundamentals/part/string-class-unary-positive-and-negative/</link>
		<pubDate>Wed, 13 Jun 2018 23:47:04 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=part&#038;p=62</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
 	<li>String Class within C++</li>
 	<li>Unary Positive and Negative Operators</li>
 	<li>Character Data Type</li>
 	<li>Typedef - An Alias</li>
 	<li>File Input and Output</li>
 	<li>Loading an Array from a File</li>
 	<li>Practice</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>62</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 23:47:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 23:47:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[string-class-unary-positive-and-negative]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Conditional Operator and Recursion</title>
		<link>https://press.rebus.community/programmingfundamentals/part/conditional-operator-and-recursion/</link>
		<pubDate>Wed, 13 Jun 2018 23:48:05 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=part&#038;p=64</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
 	<li>Conditional Operator</li>
 	<li>Recursion vs Iteration</li>
 	<li>Practice</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>64</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 23:48:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 23:48:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[conditional-operator-and-recursion]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Arrays</title>
		<link>https://press.rebus.community/programmingfundamentals/part/arrays/</link>
		<pubDate>Wed, 13 Jun 2018 23:49:01 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=part&#038;p=66</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
 	<li>Array Data Type</li>
 	<li>Array Index Operator</li>
 	<li>Displaying Array Members</li>
 	<li>Finding a Specific Member of an Array</li>
 	<li>Sorting an Array</li>
 	<li>Sizeof Operator</li>
 	<li>Sequence Operator</li>
 	<li>Arrays and Functions</li>
 	<li>Math Statistics with Arrays</li>
 	<li>Multidimensional Arrays</li>
 	<li>Practice</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>66</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 23:49:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 23:49:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[arrays]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>7</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>More on Typedef</title>
		<link>https://press.rebus.community/programmingfundamentals/part/more-on-typedef/</link>
		<pubDate>Wed, 13 Jun 2018 23:51:28 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=part&#038;p=72</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
 	<li>Versatile Code with Typedef</li>
 	<li>Practice</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>72</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 23:51:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 23:51:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[more-on-typedef]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>10</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Pointers</title>
		<link>https://press.rebus.community/programmingfundamentals/part/pointers/</link>
		<pubDate>Wed, 13 Jun 2018 23:52:16 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=part&#038;p=74</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
 	<li>Address Operator</li>
 	<li>Parameter Passing by Reference</li>
 	<li>Pointer Data Type</li>
 	<li>Indirection Operator</li>
 	<li>Practice</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>74</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 23:52:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 23:52:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[pointers]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>11</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>More Arrays &#038; Compiler Directives</title>
		<link>https://press.rebus.community/programmingfundamentals/part/more-arrays-compiler-directives/</link>
		<pubDate>Wed, 13 Jun 2018 23:54:05 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=part&#038;p=76</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
 	<li>Multidimensional Arrays</li>
 	<li>Conditional Compilation</li>
 	<li>Practice</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>76</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 23:54:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 23:54:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[more-arrays-compiler-directives]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>12</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Object-Oriented Programming</title>
		<link>https://press.rebus.community/programmingfundamentals/part/object-oriented-programming/</link>
		<pubDate>Wed, 13 Jun 2018 23:55:13 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=part&#038;p=78</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
 	<li>Object-Oriented Programming</li>
 	<li>Practice</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>78</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 23:55:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 23:55:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[object-oriented-programming]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>13</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Review Materials</title>
		<link>https://press.rebus.community/programmingfundamentals/part/review-materials/</link>
		<pubDate>Wed, 13 Jun 2018 23:56:14 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=part&#038;p=80</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
 	<li>Review: Foundation Topics Group: 1-5</li>
 	<li>Review: Modular Programming Group: 6-9</li>
 	<li>Review: Structured Programming Group: 10-16</li>
 	<li>Review: Intermediate Topics Group: 17-21</li>
 	<li>Review: Advanced Topics Group: 22-24</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>80</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 23:56:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 23:56:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[review-materials]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>14</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Program Planning &#038; Design</title>
		<link>https://press.rebus.community/programmingfundamentals/part/program-planning-design__trashed/</link>
		<pubDate>Wed, 13 Jun 2018 23:26:31 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=part&#038;p=32</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
 	<li>Program Design</li>
 	<li>Pseudocode</li>
 	<li>Test Data</li>
 	<li>Practice</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>32</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 23:26:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 23:26:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[program-planning-design__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1529206649]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[program-planning-design]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Often Used Data Types</title>
		<link>https://press.rebus.community/programmingfundamentals/part/often-used-data-types__trashed/</link>
		<pubDate>Wed, 13 Jun 2018 23:35:39 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=part&#038;p=38</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
 	<li>Integer Data Type</li>
 	<li>Floating-Point Data Type</li>
 	<li>String Data Type</li>
 	<li>Arithmetic Assignment Operators</li>
 	<li>Lvalue and Rvalue</li>
 	<li>Integer Division and Modulus</li>
 	<li>Practice</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>38</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 23:35:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 23:35:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[often-used-data-types__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1529716172]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[often-used-data-types]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Specific Task Functions</title>
		<link>https://press.rebus.community/programmingfundamentals/part/specific-task-functions__trashed/</link>
		<pubDate>Wed, 13 Jun 2018 23:39:37 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=part&#038;p=44</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
 	<li>Specific Task Functions</li>
 	<li>Global vs Local Data Storage</li>
 	<li>Using a Header File for User Defined Specific Task Functions</li>
 	<li>Practice</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>44</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 23:39:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 23:39:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[specific-task-functions__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1529717035]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[specific-task-functions]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Standard Libraries</title>
		<link>https://press.rebus.community/programmingfundamentals/part/standard-libraries__trashed/</link>
		<pubDate>Wed, 13 Jun 2018 23:40:24 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=part&#038;p=46</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
 	<li>Standard Libraries</li>
 	<li>Practice</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>46</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 23:40:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 23:40:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[standard-libraries__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1529717118]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[standard-libraries]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Character Data, Sizeof, Typedef, Sequence</title>
		<link>https://press.rebus.community/programmingfundamentals/part/character-data-sizeof-typedef-sequence__trashed/</link>
		<pubDate>Wed, 13 Jun 2018 23:41:20 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=part&#038;p=48</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
 	<li>Character Data Type</li>
 	<li>Sizeof Operator</li>
 	<li>Typedef - An Alias</li>
 	<li>Sequence Operator</li>
 	<li>Practice</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>48</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 23:41:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 23:41:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[character-data-sizeof-typedef-sequence__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>8</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1529720228]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[character-data-sizeof-typedef-sequence]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Two Way Selection</title>
		<link>https://press.rebus.community/programmingfundamentals/part/two-way-selection__trashed/</link>
		<pubDate>Wed, 13 Jun 2018 23:42:55 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=part&#038;p=52</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
 	<li>If Then Else</li>
 	<li>Boolean Data Type</li>
 	<li>Relational Operators</li>
 	<li>Compound Statement</li>
 	<li>Practice</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>52</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 23:42:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 23:42:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[two-way-selection__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>6</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1529717889]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[two-way-selection]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Multiway Selection</title>
		<link>https://press.rebus.community/programmingfundamentals/part/multiway-selection__trashed/</link>
		<pubDate>Wed, 13 Jun 2018 23:43:46 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=part&#038;p=54</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
 	<li>Nested If Then Else</li>
 	<li>Logical Operators</li>
 	<li>Case Control Structure</li>
 	<li>Branching Control Structures</li>
 	<li>Practice</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>54</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 23:43:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 23:43:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[multiway-selection__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>6</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1529717905]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[multiway-selection]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Test Before Loops</title>
		<link>https://press.rebus.community/programmingfundamentals/part/test-before-loops__trashed/</link>
		<pubDate>Wed, 13 Jun 2018 23:45:39 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=part&#038;p=58</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
 	<li>Increment and Decrement Operators</li>
 	<li>While Loop</li>
 	<li>Practice</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>58</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 23:45:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 23:45:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[test-before-loops__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>7</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1529719153]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[test-before-loops]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Counting Loops</title>
		<link>https://press.rebus.community/programmingfundamentals/part/counting-loops__trashed/</link>
		<pubDate>Wed, 13 Jun 2018 23:46:23 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=part&#038;p=60</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
 	<li>For Loop</li>
 	<li>Circular Nature of the Integer Data Type Family</li>
 	<li>Formatting Output</li>
 	<li>Nested For Loops</li>
 	<li>Practice</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>60</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 23:46:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 23:46:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[counting-loops__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>7</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1529719232]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[counting-loops]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>File I/O and Array Functions</title>
		<link>https://press.rebus.community/programmingfundamentals/part/file-i-o-and-array-functions__trashed/</link>
		<pubDate>Wed, 13 Jun 2018 23:50:08 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=part&#038;p=68</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
 	<li>File Input and Output</li>
 	<li>Arrays and Functions</li>
 	<li>Loading an Array from a File</li>
 	<li>Math Statistics with Arrays</li>
 	<li>Practice</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>68</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 23:50:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 23:50:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[file-i-o-and-array-functions__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1529720532]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[file-i-o-and-array-functions]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>More Array Functions</title>
		<link>https://press.rebus.community/programmingfundamentals/part/more-array-functions__trashed/</link>
		<pubDate>Wed, 13 Jun 2018 23:50:53 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=part&#038;p=70</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
 	<li>Finding a Specific Member of an Array</li>
 	<li>Sorting an Array</li>
 	<li>Practice</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>70</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 23:50:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 23:50:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[more-array-functions__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>10</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1529719833]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[more-array-functions]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Program Design</title>
		<link>https://press.rebus.community/programmingfundamentals/part/program-design__trashed/</link>
		<pubDate>Thu, 14 Jun 2018 01:13:30 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=part&#038;p=98</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id1164917961775">
<h3>Topic Introduction</h3>
<p id="id1164916302672">Program Design consists of the steps a programmer should do before they start coding the program in a specific language. These steps when properly documented will make the completed program easier for other programmers to maintain in the future. There are three broad areas of activity:</p>

<ul id="id1164913269267">
 	<li>Understanding the Program</li>
 	<li>Using Design Tools to Create a Model</li>
 	<li>Develop Test Data</li>
</ul>
</section><section id="id1164912683612">
<h3>Understanding the Program</h3>
<p id="id1164907595267">If you are working on a project as a one of many programmers, the system analyst may have created a variety of documentation items that will help you understand what the program is to do. These could include screen layouts, narrative descriptions, documentation showing the processing steps, etc. If you are not on a project and you are creating a simple program you might be given only a simple description of the purpose of the program. Understanding the purpose of a program usually involves understanding it's:</p>

<ul id="id1164911185296">
 	<li>Inputs</li>
 	<li>Processing</li>
 	<li>Outputs</li>
</ul>
<p id="id1164916290809">This <strong>IPO</strong> approach works very well for beginning programmers. Sometimes, it might help to visualize the programming running on the computer. You can imagine what the monitor will look like, what the user must enter on the keyboard and what processing or manipulations will be done.</p>

</section><section id="id1164913480582">
<h3>Using Design Tools to Create a Model</h3>
<p id="id1164913166432">At first you will not need a hierarchy chart because your first programs will not be complex. But as they grow and become more complex, you will divide your program into several modules (or functions).</p>
<p id="id1164914402838">The first modeling tool you will usually learn is <strong>pseudocode</strong>. You will document the logic or algorithm of each function in your program. At first, you will have only one function, and thus your pseudocode will follow closely the IPO approach above.</p>
<p id="id1164910222113">There are several methods or tools for planning the logic of a program. They include: flowcharting, hierarchy or structure charts, pseudocode, HIPO, Nassi-Schneiderman charts, Warnier-Orr diagrams, etc. Programmers are expected to be able to understand and do flowcharting and pseudocode. These methods of developing the model of a program are usually taught in most computer courses. Several standards exist for flowcharting and pseudocode and most are very similar to each other. However, most companies have their own documentation standards and styles. Programmers are expected to be able to quickly adapt to any flowcharting or pseudocode standards for the company at which they work. The others methods that are less universal require some training which is generally provided by the employer that chooses to use them.</p>
<p id="id1164916387555">Later in your programming career, you will learn about using applications software that helps create an information system and/or programs. This type of software is called Computer-aided Software Engineering.</p>
<p id="id1164913129755">Understanding the logic and planning the algorithm on paper before you start to code is very important concept. Many students develop poor habits and skipping this step is one of them.</p>

</section><section id="id1164911033472">
<h3>Develop Test Data</h3>
<p id="id1164917730113"><strong>Test data</strong> consists of the user providing some input values and predicting the outputs. This can be quite easy for a simple program and the test data can be used to check the model to see if it produces the correct results.</p>

</section><section id="id1164914481273">
<h3>Definitions</h3>
<dl id="fs-id1164917078538">
 	<dt>IPO</dt>
 	<dd id="fs-id1164911971264">Inputs - Processing - Outputs</dd>
</dl>
<dl id="fs-id7667693">
 	<dt>pseudocode</dt>
 	<dd id="fs-id1164917236414">English-like statements used to convey the steps of an algorithm or function.</dd>
</dl>
<dl id="fs-id1966744">
 	<dt>test data</dt>
 	<dd id="fs-id6282461">Providing input values and predicting the outputs.</dd>
</dl>
</section>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>98</wp:post_id>
		<wp:post_date><![CDATA[2018-06-14 01:13:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-14 01:13:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[program-design__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>15</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1528939103]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[program-design]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Pseudocode</title>
		<link>https://press.rebus.community/programmingfundamentals/part/pseudocode__trashed/</link>
		<pubDate>Thu, 14 Jun 2018 01:15:14 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=part&#038;p=100</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id1167338469115">
<h3>Overview</h3>
<p id="id1167338469122">Pseudocode is one method of designing or planning a program. <strong>Pseudo</strong> means false, thus pseudocode means false code. A better translation would be the word fake or imitation. Pseudocode is fake (not the real thing). It looks like (imitates) real code but it is NOT real code. It uses English statements to describe what a program is to accomplish. It is fake because no complier exists that will translate the pseudocode to any machine language. Pseudocode is used for documenting the program or module design (also known as the algorithm).</p>
<p id="id1167338441600">The following outline of a simple program illustrates pseudocode. We want to be able to enter the ages of two people and have the computer calculate their average age and display the answer.</p>

<div id="fs-id10207076" class="ui-has-child-title"><header>
<div>Outline using Pseudocode</div>
</header><section>
<pre id="fs-id16874732"><code>
Input
  display a message asking the user to enter the first age
  get the first age from the keyboard
  display a message asking the user to enter the second age
  get the second age from the keyboard
Processing
  calculate the answer by adding the two ages together and dividing by two
Output
  display the answer on the screen
  pause so the user can see the answer</code></pre>
</section></div>
<p id="id1167338491327">After developing the program design, we use the pseudocode to write code in a language (like Pascal, COBOL, FORTRAN, "C", " C++", etc.) where you must follow the rules of the language (syntax) in order to code the logic or algorithm presented in the pseudocode. Pseudocode usually does not include other items produced during programming design such as identifier lists for variables or test data.</p>
<p id="id1167338491907">There are other methods for planning and documenting the logic for a program. One method is <span>HIPO</span>. It stands for Hierarchy plus Input Process Output and was developed by IBM in the 1960s. It involved using a hierarchy (or structure) chart to show the relationship of the sub-routines (or functions) in a program. Each sub-routine had an <span>IPO</span> piece. Since the above problem/task was simple, we did not need to use multiple sub-routines, thus we did not produce a hierarchy chart. We did incorporate the IPO part of the concept for the pseudocode outline.</p>

</section><section id="id1167338492140">
<h3>Definitions</h3>
<dl id="fs-id10942887">
 	<dt>pseudo</dt>
 	<dd id="fs-id7759482">Means false and includes the concepts of fake or imitation.</dd>
</dl>
</section>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>100</wp:post_id>
		<wp:post_date><![CDATA[2018-06-14 01:15:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-14 01:15:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[pseudocode__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>15</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1528939113]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[pseudocode]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Test Data</title>
		<link>https://press.rebus.community/programmingfundamentals/part/test-data__trashed/</link>
		<pubDate>Thu, 14 Jun 2018 01:16:13 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=part&#038;p=102</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id1167333453426">
<h3>Overview</h3>
<p id="id1167333257185">Test data consists of the user providing some input values and predicting the outputs. This can be quite easy for a simple program and the test data can be used twice.</p>

<ol id="id1167330811410" type="1">
 	<li>to check the model to see if it produces the correct results (<strong>model checking</strong>)</li>
 	<li>to check the coded program to see if it produces the correct results (<strong>code checking</strong>)</li>
</ol>
<p id="id1167333379079">Test data is developed by using the algorithm of the program. This algorithm is usually documented during the program design with either flowcharting or pseudocode. Here is the pseudocode in outline form describing the inputs, processing and outputs for a program used for painting rectangular buildings.</p>

<div id="fs-id1171849350847" class="ui-has-child-title"><header>
<div>Pseudocode using an IPO Outline for Painting a Rectangular Building</div>
</header><section>
<pre id="fs-id1171853025778"><code>
Input
  display a message asking user for the length of the building
  get the length from the keyboard
  display a message asking user for the width of the building
  get the width from the keyboard
  display a message asking user for the height of the building
  get the height from the keyboard
  display a message asking user for the price per gallon of paint
  get the price per gallon of paint from the keyboard
  display a message asking user for the sq ft coverage of a gallon of paint
  get the sq ft coverage of a gallon of paint from the keyboard
Processing
  calculate the total area of the building by:
    multiplying the length by height by 2
    then multiply the width by height by 2
    then add the two results together
  calculate the number of gallons of paint needed by:
    dividing the total area by the coverage per gallon
    then round up to the next whole gallon
  calculate the total cost of the paint by:
    multiplying the total gallons needed by the price of one gallon of paint
Output
  display the number of gallons needed on the monitor
  display the total cost of the paint on the monitor
  pause so the user can see the answer</code></pre>
</section></div>
</section><section id="id1167336044123">
<h3>Creating Test Data and Model Checking</h3>
<p id="id1167334260095">Test data is used to verify that the inputs, processing and outputs are working correctly. As test data is initially developed it can verify that the documented algorithm (pseudocode in the example we are doing) is correct. It helps us understand and even visualize the inputs, processing and outputs of the program.</p>
<p id="id1167334344196">Inputs: My building is 100 feet long by 40 feet wide and 10 feet in height and I selected paint costing $28.49 per gallon that will cover 250 square feet per gallon. We should verify that the pseudocode is prompting the user for this data.</p>
<p id="id1167334450153">Processing: Using my solar powered hand held calculator, I can calculate (or predict) the total area would be: (100 x 10 x 2 plus 40 x 10 x 2) or 2,800 sq ft. The total gallons of paint would be: (2800 / 250) or 11.2 gallons. But rounded up, I would need twelve (12) gallons of paint. The total cost would be: (28.49 times 12) or $341.88. We should verify that the pseudocode is performing the correct calculations.</p>
<p id="id1167333359162">Output: Only the significant information (number of gallons to buy and the total cost) are displayed for the user to see. We should verify that the appropriate information is being displayed.</p>

</section><section id="id1167334175727">
<h3>Testing the Coded Program – Code Checking</h3>
<p id="id1167334091788">The test data can be developed and used to test the algorithm that is documented (in our case our pseudocode) during the program design phase. Once the program is code with compiler and linker errors resolved, the programmer gets to play user and should test the program using the test data developed. When you run your program, how will you know that it is working properly? Did you properly plan your logic to accomplish your purpose? Even if your plan was correct, did it get converted correctly (coded) into the chosen programming language (in our case C++)? The answer (or solution) to all of these questions is our test data.</p>
<p id="id1167337752664">By developing test data we are predicting what the results should be, thus we can verify that our program is working properly. When we run the program we would enter the input values used in our test data. Hopefully the program will output the predicted values. If not then our problem could be any of the following:</p>

<ol id="id1167333434468" type="1">
 	<li>The plan (IPO outline or other item) could be wrong</li>
 	<li>The conversion of the plan to code might be wrong</li>
 	<li>The test data results were calculated wrong</li>
</ol>
<p id="id1167332991017">Resolving problems of this nature can be the most difficult problems a programmer encounters. You must review each of the above to determine where the error is lies. Fix the error and re-test your program.</p>

</section><section id="id1167330792380">
<h3>Definitions</h3>
<dl id="fs-id1171850166322">
 	<dt>model checking</dt>
 	<dd id="fs-id1171853009808">Using test data to check the design model (usually done in pseudocode).</dd>
</dl>
<dl id="fs-id1171853616200">
 	<dt>code checking</dt>
 	<dd id="fs-id1171853450515">Using test data to check the coded program in a specific language (like C++).</dd>
</dl>
</section>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>102</wp:post_id>
		<wp:post_date><![CDATA[2018-06-14 01:16:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-14 01:16:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[test-data__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>15</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1528939118]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[test-data]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Practice</title>
		<link>https://press.rebus.community/programmingfundamentals/part/practice__trashed/</link>
		<pubDate>Thu, 14 Jun 2018 01:16:46 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=part&#038;p=104</guid>
		<description></description>
		<content:encoded><![CDATA[<section id="id5197465">
<h3>Learning Objectives</h3>
<p id="id1172768255984">With 100% accuracy during a: memory building activity, exercises, lab assignment, problems, or timed quiz/exam; the student is expected to:</p>

<ol id="id1172770882553" type="1">
 	<li>Define the terms on the definitions as listed in the modules associated with this chapter.</li>
 	<li>Create a pseudocode document for a programming problem</li>
 	<li>Create a test data document for a programming problem</li>
</ol>
</section><section id="id1172770570340">
<h3>Memory Building Activities</h3>
<p id="id1562253">Link to: <a href="https://cnx.org/resources/f2d0c4d611f20c849c80b7893e49cce16676f999/index.html" target="_window">MBA 02</a></p>

</section><section id="id1172769399444">
<h3>Exercises</h3>
<div id="fs-id5837247"><section>
<div id="fs-id5503909">
<div id="fs-id13435487">
<div>Answer the following statements as either true or false:</div>
<ol>
 	<li>Coding the program in a language like C++ is the first task of planning. You plan as you code.</li>
 	<li>Pseudocode is the only commonly used planning tool.</li>
 	<li>Test data is developed for testing the program once it is code into a language like C++.</li>
 	<li>The word pseudo means false and includes the concepts of fake or imitation.</li>
 	<li>Many programmers pick up the bad habit of not completing the planning step before starting to code the program.</li>
</ol>
</div>
</div>
<div id="fs-id3308798">
<div class="ui-toggle-wrapper"></div>
</div>
</section></div>
</section><section id="id6401074">
<h3>Miscellaneous Items</h3>
<p id="id1172765217116">None at this time.</p>

</section><section id="id8630100">
<h3>Lab Assignment</h3>
<section id="id1172766035932">
<h4>Creating a Folder or Sub-Folder for Chapter 02 Files</h4>
<p id="id1172768734892">Depending on your compiler/IDE, you should decide where to download and store source code files for processing. Prudence dictates that you create these folders as needed prior to downloading source code files. A suggested sub-folder for the <span>Bloodshed Dev-C++ 5 compiler/IDE</span> might be named:</p>

<ul id="id1172767143283">
 	<li>Chapter_02 within the folder named: Cpp_Source_Code_Files</li>
</ul>
<p id="id1172767205505">If you have not done so, please create the folder(s) and/or sub-folder(s) as appropriate.</p>

</section><section id="id5454163">
<h4>Download the Lab File(s)</h4>
<p id="id1172766214157">Download and store the following file(s) to your storage device in the appropriate folder(s). You may need to right click on the link and select "Save Target As" in order to download the file.</p>
<p id="id1172768037508">Download from Connexions: <a href="https://cnx.org/resources/9cc9698364a00307138fcc41a5043b8e705e829b/Solution_Lab_01_Pseudocode.txt">Solution_Lab_01_Pseudocode.txt</a></p>
<p id="id1172766371228">Download from Connexions: <a href="https://cnx.org/resources/eecfaabb108bcc4e9230e52515dd11a9ff12d482/Solution_Lab_01_Test_Data.txt">Solution_Lab_01_Test_Data.txt</a></p>

</section><section id="id1172767270216">
<h4>Detailed Lab Instructions</h4>
<p id="id1172768693708">Read and follow the directions below carefully, and perform the steps in the order listed.</p>

<ul id="id1172766076754">
 	<li>Navigate to your sub-folder: Chapter_02 and print the: Solution_Lab_01_Pseudocode.txt and the: Solution_Lab_01_Test_Data.txt files. Review the printouts in conjunction with your Lab 01 source code file. Note: In Lab 01 we gave you step by step directions for modifying the Compiler_Test.cpp source code file into the Lab_01.cpp source code file. I could have given you the pseudocode and test data files, but you had not received any instructions about them. Now, after having studied the Chapter 2 materials, these files should make sense.</li>
 	<li>Make copies of the: Solution_Lab_01_Pseudocode.txt and Solution_Lab_01_Test_Data.txt and rename them: <strong>Lab_02_Pseudocode.txt</strong> and <strong>Lab_02_Test_Data.txt</strong></li>
 	<li>Here is the problem. Your local bank has many customers who save their change and periodically bring it in for deposit. The customers have sorted the coins (pennies, nickels, dimes and quarters – forget half dollars and dollar coins) and know how many (an integer data type) of each value they have but have evolved (or their environment has made them lazy). They have lost their ability to do simple arithmetic.  They can’t seem to determine the total value of all of the coins without a calculator (or computer).  Write a program to interact with the customers and to determine and report the total value of their coins.</li>
 	<li>No! No! No! We are <strong>not</strong> going to write a program (create source code) using the C++ programming language. We are going to design a plan for a program using pseudocode as our model. Additionally, we need to develop some test data for use in testing our model.</li>
 	<li>Start your text editor (Microsoft Notepad. Set the font on Notepad to: Courier 12 font because Courier uses the same amount of space horizontally for each letter. It will make the information in the files show as it should be seen. Open your Lab 02 pseudocode text file. Change all items as needed to be able to solve the above problem. NOTE: You may use any application software that will let you open, modify and save ASCII text files. You may even use the Bloodshed Dev-C++ 5 compiler/IDE software to view, modify and save ASCII text files; after all, our source code files are ASCII text files with a special extension of .cpp</li>
 	<li>Open your Lab 02 test data text file. Modify the text file as appropriate. Use your test data and step through your pseudocode. Does everything seem to work? Have you missed something?</li>
 	<li>When you are satisfied that you have your program plan and test data completed, close your text files. That’s right, I said, "Save and close your text files." Files should be properly closed before being used by other software and this includes the Operating System software that moves, copies and renames files.</li>
 	<li>After you have successfully written this program, if you are taking this course for college credit, follow the instructions from your professor/instructor for submitting it for grading.</li>
</ul>
</section></section><section id="id1629007">
<h3>Problems</h3>
<section id="id1172766353813">
<h4>Problem 02a – Instructions</h4>
<p id="id1172767840542">Create simple IPO pseudocode to solve the following:</p>
<p id="id1172765811103">Problem: I have a friend who is visiting from Europe and he does not understand exactly how much gas he is buying for his car. We need to write a program that allows him to enter the gallons of gas and convert it to liters (metric system). NOTE: One US gallon equals 3.7854 liters.</p>

</section><section id="id3218930">
<h4>Problem 02b – Instructions</h4>
<p id="id1172767510824">Create test data for the following:</p>
<p id="id1172765012898">Problem: A major restaurant sends a chef to purchase fruits and vegetables every day. Upon returning to the store the chef must enter two pieces of data for each item he purchased. The quantity (Example: 2 cases) and the price he paid (Example: $4.67). The program has a list of 20 items and after the chef enters the information, the program provides a total for the purchases for that day. You need to prepare test data for five (5) items: apples, oranges, bananas, lettuce and tomatoes.</p>

</section></section>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>104</wp:post_id>
		<wp:post_date><![CDATA[2018-06-14 01:16:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-14 01:16:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[practice__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>15</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1528939125]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[practice]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Appendix</title>
		<link>https://press.rebus.community/programmingfundamentals/part/appendix/</link>
		<pubDate>Sat, 16 Jun 2018 18:26:48 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=part&#038;p=334</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
 	<li>Abbreviated Precedence Chart for C++ Operators</li>
 	<li>C++ Reserved Keywords</li>
 	<li>ASCII Character Set</li>
 	<li>Show Hide File Extensions</li>
 	<li>Academic or Scholastic Dishonesty</li>
 	<li>Successful Learning Skills</li>
 	<li>Study Habits that Build the Brain</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>334</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 18:26:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 18:26:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[appendix]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>15</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Integrated Development Environment</title>
		<link>https://press.rebus.community/programmingfundamentals/part/integrated-development-environment-2__trashed/</link>
		<pubDate>Sat, 16 Jun 2018 20:49:14 +0000</pubDate>
		<dc:creator><![CDATA[dbraunsc]]></dc:creator>
		<guid isPermaLink="false">https://press.rebus.community/programmingfundamentals/?post_type=part&#038;p=474</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>474</wp:post_id>
		<wp:post_date><![CDATA[2018-06-16 20:49:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-16 20:49:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[integrated-development-environment-2__trashed]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>16</wp:menu_order>
		<wp:post_type><![CDATA[part]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1529182198]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[integrated-development-environment-2]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
